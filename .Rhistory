doc <- body_add_flextable(doc, value = ft)
print(doc, target = "Tables/zoo_bio_model_summary.docx")
summary(model_zoo_bio)
dd_zoo_perma <- dd_zoo_long %>%
group_by(Mesocosm.No, Treatment, Day, group) %>%
summarise(total_biomass = sum(biomass))
# Ensure Treatment is a factor
dd_zoo_long$Treatment <- as.factor(dd_zoo_long$Treatment)
dd_zoo_long$Day <- factor(dd_zoo_long$Day, levels = c(-4, 10, 24,  38))  # Specify custom order
# Create zooplankton groups
# Create the new column "group" based on "taxa"
dd_zoo_long <- dd_zoo_long %>%
mutate(group = case_when(
taxa %in% c("Simocephalus", "Chydorus", "Daphnia.longispina", "Alona", "Alonella", "Ceriodaphnia") ~ "Cladocera",
taxa %in% c("Cyclopoida", "Calanoida", "Nauplii") ~ "Copepods",
taxa %in% c("Keratella.quadrata", "Lecanidae", "Mytilina", "Lepadella", "Testudinella", "Euchlanis", "Polyarthra", "Brachionus",
"Squatinella", "Ascomorpha", "Trichocerca", "Cephalodella") ~ "Rotifers",
taxa == "Ostracoda" ~ "Ostracoda"
))
dd_zoo_long <- dd_zoo_long %>%
mutate(group = case_when(
group == "Rotifers" ~ "Ostracoda",
group == "Ostracoda" ~ "Rotifers",
TRUE ~ group  # Leave other values unchanged
))
# Calculate relative abundance
dd_zoo_long_per <- dd_zoo_long[,-c(4,6,7)] %>%
group_by( Treatment, Day, group) %>%
summarize(total_group = sum(biomass)) %>%
mutate(total_bio = sum(total_group)) %>%
mutate(relative_bio = total_group / total_bio * 100)
# Step 2: Build the plot
p_zoo<- ggplot(dd_zoo_long_per, aes(x = Treatment, y = relative_bio, fill = group)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "", y = "Relative Biomass (%)", tag = "(b)") +
scale_fill_brewer(palette = "Set1") +  # Apply a ColorBrewer palette
theme_bw(base_size = 20) +
theme(
panel.background = element_rect(fill = "white", colour = "black"),
plot.title = element_text(hjust = 0.5, margin = margin(b = 20), size = 20, face = "bold"),
axis.text = element_text(size = 30),
axis.title = element_text(size = 30),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30),
legend.key.size = unit(1.5, "lines"),
legend.position = "bottom",
legend.justification = "center",
legend.direction = "horizontal",
legend.box = "vertical",
axis.text.x = element_text(hjust = 1),
strip.text = element_text(size = 30)
) +
# Use facet_wrap2 from ggh4x to apply custom strip colors and order by Day_plot (ordered factor)
facet_wrap2(
~ Day,   # Use Day_plot to control the order
scales = "free_x")
# Display the plot
print(p_zoo)
dd_zoo_perma <- dd_zoo_long %>%
group_by(Mesocosm.No, Treatment, Day, group) %>%
summarise(total_biomass = sum(biomass))
wide_data <- dd_zoo_perma %>%
pivot_wider(
names_from = group,
values_from = total_biomass)
group_bio_wide <- as.data.frame(wide_data)
group_bio_wide[is.na(group_bio_wide)] <- 0
set.seed(258)
# PERMANOVA per day
day_results <- lapply(unique(group_bio_wide$Day), function(day) {
subset_data <- group_bio_wide %>% filter(Day == day)
species_data <- subset_data[, 6:ncol(subset_data)]  # Extract species abundance columns
bray_curtis_dist <- vegdist(species_data, method = "bray", binary = FALSE, na.rm = TRUE)  # Calculate Bray-Curtis dissimilarity
adonis_result <- adonis(bray_curtis_dist ~ Treatment, data = subset_data, permutations = 999)
result <- list(Day = day, PERMANOVA_result = adonis_result)
print(result)
return(result)
})
# Prepare data for nice printing, including degrees of freedom
day_results_df <- lapply(day_results, function(res) {
if (!is.null(res$PERMANOVA_result$aov.tab)) {
data.frame(
Day = res$Day,
df_model = res$PERMANOVA_result$aov.tab$Df[1],  # Extract numerator degrees of freedom (model)
df_residual = res$PERMANOVA_result$aov.tab$Df[2],  # Extract denominator degrees of freedom (residual)
F = res$PERMANOVA_result$aov.tab$F.Model[1],
R2 = res$PERMANOVA_result$aov.tab$R2[1],
p_value = res$PERMANOVA_result$aov.tab$`Pr(>F)`[1]
)
} else {
data.frame(
Day = res$Day,
df_model = NA,
df_residual = NA,
F = NA,
R2 = NA,
p_value = NA
)
}
}) %>%
bind_rows() %>%
arrange(Day)
# Print the results using kable with limited number of decimals and additional formatting
kable(day_results_df, format = "html", digits = 3) %>%
kable_styling(full_width = FALSE) %>%
column_spec(6, bold = ifelse(day_results_df$p_value < 0.05, TRUE, FALSE))  # Make p-value column bold if significant
# Save table for word document
day_results_df <- day_results_df %>%
mutate(across(where(is.numeric), ~ round(., 3)))
# Apply formatting to p-value column
day_results_df <- day_results_df %>%
mutate(p_value = ifelse(p_value < 0.05, paste0("<b>", round(p_value, 3), "</b>"), round(p_value, 3)))
# Create a flextable object from the data frame
ft <- flextable(day_results_df)
# Set properties for the flextable (optional)
ft <- flextable(day_results_df) %>%
set_table_properties(width = 1, layout = "autofit") %>%
align(align = "center", part = "all") %>%
bold(part = "header") %>%
autofit()
# Save the flextable as a Word document
doc <- read_docx()
doc <- body_add_flextable(doc, value = ft)
print(doc, target = "Tables/zoo_PEROMANOVA_table_output.docx")
knitr::opts_chunk$set(echo = FALSE,
include = TRUE,
warning = FALSE,
message = FALSE,
cache = FALSE)
rm(list = ls())
library(tidyverse)
library(readxl)
library(patchwork)
library(vegan)
library(emmeans)
library(lme4)
library(lmerTest)
library(performance)
library(knitr)
library(kableExtra)
library(officer)
library(flextable)
library(broom.mixed)
library(lubridate)
library(RColorBrewer)
library(ggh4x)
# Combine the datasets
combined_data<- read.csv("data/hobo_recordings.csv")
## Plot only data relevant for the experiment
filtered_combined_data <- combined_data %>%
filter(DateTime <= as.POSIXct("2021-06-15 23:59:59"))
# Plot temperature over time with explicit grouping by Treatment
temperature_plot <- ggplot(filtered_combined_data, aes(x = DateTime, y = Temp, color = Treatment, group = Treatment)) +
geom_line(size = 1) +
labs(title = "",
x = "Date",
y = "Temperature (Â°C)",
color = "Treatment") +
theme_bw(base_size = 20) +  # White background theme
scale_color_viridis_d(option = "C", end = 0.8) +
theme(
plot.title = element_text(hjust = 0.5, size = 24, face = "bold"),
axis.title.x = element_text(size = 22, face = "bold"),
axis.title.y = element_text(size = 22, face = "bold"),
axis.text = element_text(size = 20),
legend.position = "top",
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18)
)
# Display the plot
print(temperature_plot)
# Function to calculate standard error
se <- function(x) sqrt(var(x, na.rm = TRUE) / length(na.omit(x)))
ox <- read.csv("data/oxygen.csv")
# Calculate mean abundance and standard error for Control
control_mean <- ox %>% filter(Treatment == "Control") %>%
group_by(Day) %>%
summarize(control_mean_ox = mean(ox, na.rm = TRUE))
# Calculate differences from Control for each treatment
tot.ox_diff <- ox %>%
left_join(control_mean, by = "Day") %>%
mutate(diff_ox = ox - control_mean_ox)
# Summarize the data for plotting
tot_ox_dynamics <- tot.ox_diff %>%
group_by(Treatment, Day) %>%
summarize(mean_diff_ox = mean(diff_ox, na.rm = TRUE), se = se(diff_ox)) %>%
mutate(lower_y = mean_diff_ox - se, upper_y = mean_diff_ox + se)
# Determine the y-axis limits to ensure alignment of zero line
y_limits <- range(tot_ox_dynamics$mean_diff_ox + tot_ox_dynamics$se,
tot_ox_dynamics$mean_diff_ox - tot_ox_dynamics$se)
# Filter out the control treatment for the plot
tot_ox_dynamics_filtered <- tot_ox_dynamics %>% filter(Treatment == "HW")
ox_plot <- ggplot(tot_ox_dynamics_filtered, aes(x = Day, y = mean_diff_ox, color = Treatment, fill = Treatment)) +
geom_line(aes(group = Treatment), size = 1, color = "blue") +
geom_point(size = 2, color = "blue") +
geom_ribbon(aes(ymin = lower_y, ymax = upper_y, group = Treatment), alpha = 0.1, show.legend = FALSE, fill = "blue", color = "blue") +
ylab("Dissolved oxygen \nDifference in mg/L") +
xlab("Day") +
viridis::scale_colour_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
viridis::scale_fill_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
scale_x_continuous(limits = c(-5, 40)) +
theme_bw() +
theme(legend.position = "none",                   # Remove legend
text = element_text(size = 20),             # Increase text size for all text elements
axis.title = element_text(size = 22),       # Increase axis title size
plot.title = element_text(size = 24),       # Increase plot title size
axis.text = element_text(size = 20),        # Increase axis text size
axis.line = element_line(size = 0.5),       # Adjust axis line thickness
panel.grid.major = element_blank(),         # Remove major gridlines
panel.grid.minor = element_blank(),         # Remove minor gridlines
panel.border = element_blank(),            # Remove panel borders
panel.background = element_blank()) +      # Remove panel background
theme_minimal(base_size = 20) +
theme(
panel.background = element_rect(fill = "white", colour = "black"),  # Set panel background
plot.title = element_text(hjust = 0.5, margin = margin(b = 20), size = 20, face = "bold"),  # Set plot title text size and make it bold
axis.text = element_text(size = 30),  # Set axis text size
axis.title = element_text(size = 30),  # Set axis title text size
plot.tag = element_text(size = 30),
legend.position = "none"# Set tag size
) +
geom_hline(yintercept = 0, linetype = "dashed") +
coord_cartesian(ylim = y_limits) +
annotate("rect", xmin = 0, xmax = 6, ymin = -Inf, ymax = Inf, alpha = 0.3, fill = "red") +
annotate("rect", xmin = 14, xmax = 20, ymin = -Inf, ymax = Inf, alpha = 0.3, fill = "red") +
annotate("rect", xmin = 28, xmax = 34, ymin = -Inf, ymax = Inf, alpha = 0.3, fill = "red") + labs(tag = "(a)")
ox_plot
control_mean <- ox %>% filter(Treatment == "Control") %>%
group_by(Day) %>%
summarize(control_mean_ox = mean(ox, na.rm = TRUE))
# Calculate differences from Control for each treatment
tot.ox_diff <- ox %>%
left_join(control_mean, by = "Day") %>%
mutate(diff_ox = abs(control_mean_ox - ox))
resilience_HW1 <- tot.ox_diff %>% filter(Day %in% c(-4, 10),
Treatment == "HW") %>%
group_by(Cosm) %>%
mutate(resilience = abs(diff_ox[Day == -4] / diff_ox[Day == 10])) %>%
filter(Day == -4)
resilience_HW2 <- tot.ox_diff %>% filter(Day %in% c(10, 24),
Treatment == "HW") %>%
group_by(Cosm) %>%
mutate(resilience = abs(diff_ox[Day == 10] / diff_ox[Day == 24])) %>%
filter(Day == 24)
resilience_HW3 <- tot.ox_diff %>% filter(Day %in% c(24, 38),
Treatment == "HW") %>%
group_by(Cosm) %>%
mutate(resilience = abs(diff_ox[Day == 24] / diff_ox[Day == 38])) %>%
filter(Day == 38)
resilience <- rbind(resilience_HW1, resilience_HW2, resilience_HW3)
# Add new column with the number of the hwatwave
resilience <- resilience %>%
mutate(heat = case_when(
Day == -4 ~ 1,
Day == 24 ~ 2,
Day == 38 ~ 3
))
min_y <- min(log10(resilience$resilience))
max_y <- max(log10(resilience$resilience))
p_resilience_ox <- ggplot(resilience, aes(x = heat, y = log10(resilience), group = Day)) +
geom_boxplot() +
geom_point(aes(color = as.factor(Cosm)), position = position_jitterdodge(), size = 3) +
labs(x = "Heatwave", y = "log10(Resilience)", tag = "(b)") +
theme_minimal(base_size = 20) +
theme(
panel.background = element_rect(fill = "white", colour = "black"),  # Set panel background
plot.title = element_text(hjust = 0.5, margin = margin(b = 20), size = 20, face = "bold"),  # Set plot title text size and make it bold
axis.text = element_text(size = 30),  # Set axis text size
axis.title = element_text(size = 30),  # Set axis title text size
plot.tag = element_text(size = 30),
legend.position = "none"
) +
scale_fill_brewer(palette = "Set1") +
scale_y_continuous(breaks = seq(floor(min_y), ceiling(max_y), by = 1)) +
geom_hline(yintercept = 0, linetype = "dashed")  # Add a horizontal line at y = 1
p_resilience_ox
tot.ox_diff %>% filter(Day %in% c(-4, 10),
Treatment == "HW")
tot.ox_diff
# Load the zooplankton data
dd_zoo_long <- read.csv( "data/zoop.csv")
dd_zoo_long <- dd_zoo_long %>%
group_by( Treatment, Day) %>%
mutate(total = sum(biomass)) %>%
mutate(relative_bio = biomass / total * 100) %>%
ungroup()
try2 <- dd_zoo_long[, -c(4,6,7)] %>% group_by(Mesocosm.No, Treatment, Day)  %>% ungroup()
try2 <- try2 %>% mutate(bio_log = log10(biomass+1))
# Calculate mean abundance and standard error for Control
control_mean <- try2 %>% filter(Treatment == "Control") %>%
group_by(Day) %>%
summarize(control_mean_bio = mean(bio_log, na.rm = TRUE))
# Calculate differences from Control for each treatment
tot.bio_diff <- try2 %>%
left_join(control_mean, by = "Day") %>%
mutate(diff_bio = bio_log - control_mean_bio)
# Summarize the data for plotting
tot_bio_dynamics <- tot.bio_diff %>%
group_by(Treatment, Day) %>%
summarize(mean_diff_bio = mean(diff_bio, na.rm = TRUE), se = se(diff_bio)) %>%
mutate(lower_y = mean_diff_bio - se, upper_y = mean_diff_bio + se)
# Determine the y-axis limits to ensure alignment of zero line
y_limits <- range(tot_bio_dynamics$mean_diff_bio + tot_bio_dynamics$se,
tot_bio_dynamics$mean_diff_bio - tot_bio_dynamics$se)
# Filter out the control treatment for the plot
tot_bio_dynamics_filtered <- tot_bio_dynamics
tot_bio_dynamics_filtered <- tot_bio_dynamics_filtered %>% filter(Treatment != "Control")
# Plot the data with faceting and aligned y-axis
bio_plot_zoo <- ggplot(tot_bio_dynamics_filtered, aes(x = Day, y = mean_diff_bio, color = Treatment, fill = Treatment)) +
geom_line(aes(group = Treatment), size = 1, color = "blue") +
geom_point(size = 2, color = "blue") +
geom_ribbon(aes(ymin = lower_y, ymax = upper_y, group = Treatment), alpha = 0.1, show.legend = FALSE, fill = "blue", color = "blue") + labs(tag = "(a)", x = "Day", y = "Zooplankton \nDifference in log10(biomass)") +
viridis::scale_colour_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
viridis::scale_fill_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
theme(legend.position = "top") +
theme_bw() +
guides(fill = guide_legend(override.aes = list(size = 8), ncol = 6)) +
geom_hline(yintercept = 0, linetype = "dashed") +
coord_cartesian(ylim = y_limits) +
annotate("rect", xmin = 0, xmax = 6, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
annotate("rect", xmin = 14, xmax = 20, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
annotate("rect", xmin = 28, xmax = 34, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
theme(legend.position = "none") +
theme_minimal(base_size = 20) +
theme(
panel.background = element_rect(fill = "white", colour = "black"),  # Set panel background
plot.title = element_text(hjust = 0.5, margin = margin(b = 20), size = 20, face = "bold"),  # Set plot title text size and make it bold
axis.text = element_text(size = 30),  # Set axis text size
axis.title = element_text(size = 30),  # Set axis title text size
plot.tag = element_text(size = 30),
legend.position = "none"   # Set tag size
)
dd_zoo_model <- dd_zoo_long %>%
group_by(Mesocosm.No, Treatment, Day) %>%
summarize(total = sum(biomass)) %>%
ungroup()
model_zoo_bio <- lmer(log10(total +1) ~ Treatment * Day + (1 | Mesocosm.No), data = dd_zoo_model)
# Ensure Treatment is a factor
dd_zoo_long$Treatment <- as.factor(dd_zoo_long$Treatment)
dd_zoo_long$Day <- factor(dd_zoo_long$Day, levels = c(-4, 10, 24,  38))  # Specify custom order
# Create zooplankton groups
# Create the new column "group" based on "taxa"
dd_zoo_long <- dd_zoo_long %>%
mutate(group = case_when(
taxa %in% c("Simocephalus", "Chydorus", "Daphnia.longispina", "Alona", "Alonella", "Ceriodaphnia") ~ "Cladocera",
taxa %in% c("Cyclopoida", "Calanoida", "Nauplii") ~ "Copepods",
taxa %in% c("Keratella.quadrata", "Lecanidae", "Mytilina", "Lepadella", "Testudinella", "Euchlanis", "Polyarthra", "Brachionus",
"Squatinella", "Ascomorpha", "Trichocerca", "Cephalodella") ~ "Rotifers",
taxa == "Ostracoda" ~ "Ostracoda"
))
dd_zoo_long <- dd_zoo_long %>%
mutate(group = case_when(
group == "Rotifers" ~ "Ostracoda",
group == "Ostracoda" ~ "Rotifers",
TRUE ~ group  # Leave other values unchanged
))
write.csv(dd_zoo_long, "data/zoop_groups.csv")
#
# # Ensure Treatment is a factor
# dd_zoo_long$Treatment <- as.factor(dd_zoo_long$Treatment)
# dd_zoo_long$Day <- factor(dd_zoo_long$Day, levels = c(-4, 10, 24,  38))  # Specify custom order
#
#
# # Create zooplankton groups
# # Create the new column "group" based on "taxa"
# dd_zoo_long <- dd_zoo_long %>%
#   mutate(group = case_when(
#     taxa %in% c("Simocephalus", "Chydorus", "Daphnia.longispina", "Alona", "Alonella", "Ceriodaphnia") ~ "Cladocera",
#     taxa %in% c("Cyclopoida", "Calanoida", "Nauplii") ~ "Copepods",
#     taxa %in% c("Keratella.quadrata", "Lecanidae", "Mytilina", "Lepadella", "Testudinella", "Euchlanis", "Polyarthra", "Brachionus",
#     "Squatinella", "Ascomorpha", "Trichocerca", "Cephalodella") ~ "Rotifers",
#     taxa == "Ostracoda" ~ "Ostracoda"
#   ))
#
# dd_zoo_long <- dd_zoo_long %>%
#   mutate(group = case_when(
#     group == "Rotifers" ~ "Ostracoda",
#     group == "Ostracoda" ~ "Rotifers",
#     TRUE ~ group  # Leave other values unchanged
#   ))
#
# write.csv(dd_zoo_long, "data/zoop_groups.csv")
dd_zoo_long <- read.csv("data/zoop_groups.csv")
# Calculate relative abundance
dd_zoo_long_per <- dd_zoo_long[,-c(4,6,7)] %>%
group_by( Treatment, Day, group) %>%
summarize(total_group = sum(biomass)) %>%
mutate(total_bio = sum(total_group)) %>%
mutate(relative_bio = total_group / total_bio * 100)
dd_zoo_long
# Ensure Treatment is a factor
dd_zoo_long$Treatment <- as.factor(dd_zoo_long$Treatment)
dd_zoo_long$Day <- factor(dd_zoo_long$Day, levels = c(-4, 10, 24,  38))  # Specify custom order
# Create zooplankton groups
# Create the new column "group" based on "taxa"
dd_zoo_long <- dd_zoo_long %>%
mutate(group = case_when(
taxa %in% c("Simocephalus", "Chydorus", "Daphnia.longispina", "Alona", "Alonella", "Ceriodaphnia") ~ "Cladocera",
taxa %in% c("Cyclopoida", "Calanoida", "Nauplii") ~ "Copepods",
taxa %in% c("Keratella.quadrata", "Lecanidae", "Mytilina", "Lepadella", "Testudinella", "Euchlanis", "Polyarthra", "Brachionus",
"Squatinella", "Ascomorpha", "Trichocerca", "Cephalodella") ~ "Rotifers",
taxa == "Ostracoda" ~ "Ostracoda"
))
dd_zoo_long <- dd_zoo_long %>%
mutate(group = case_when(
group == "Rotifers" ~ "Ostracoda",
group == "Ostracoda" ~ "Rotifers",
TRUE ~ group  # Leave other values unchanged
))
write.csv(dd_zoo_long, "data/zoop_groups.csv")
# Ensure Treatment is a factor
dd_zoo_long$Treatment <- as.factor(dd_zoo_long$Treatment)
dd_zoo_long$Day <- factor(dd_zoo_long$Day, levels = c(-4, 10, 24,  38))  # Specify custom order
# Create zooplankton groups
# Create the new column "group" based on "taxa"
dd_zoo_long <- dd_zoo_long %>%
mutate(group = case_when(
taxa %in% c("Simocephalus", "Chydorus", "Daphnia.longispina", "Alona", "Alonella", "Ceriodaphnia") ~ "Cladocera",
taxa %in% c("Cyclopoida", "Calanoida", "Nauplii") ~ "Copepods",
taxa %in% c("Keratella.quadrata", "Lecanidae", "Mytilina", "Lepadella", "Testudinella", "Euchlanis", "Polyarthra", "Brachionus",
"Squatinella", "Ascomorpha", "Trichocerca", "Cephalodella") ~ "Rotifers",
taxa == "Ostracoda" ~ "Ostracoda"
))
dd_zoo_long <- dd_zoo_long %>%
mutate(group = case_when(
group == "Rotifers" ~ "Ostracoda",
group == "Ostracoda" ~ "Rotifers",
TRUE ~ group  # Leave other values unchanged
))
write.csv(dd_zoo_long, "data/zoop_groups.csv", quote = FALSE, row.names = FALSE)
dd_zoo_long <- read.csv("data/zoop_groups.csv")
dd_zoo_long
# Load the zooplankton data
dd_zoo_long <- read.csv( "data/zoop.csv")
dd_zoo_long <- dd_zoo_long %>%
group_by( Treatment, Day) %>%
mutate(total = sum(biomass)) %>%
mutate(relative_bio = biomass / total * 100) %>%
ungroup()
try2 <- dd_zoo_long[, -c(4,6,7)] %>% group_by(Mesocosm.No, Treatment, Day)  %>% ungroup()
try2 <- try2 %>% mutate(bio_log = log10(biomass+1))
# Calculate mean abundance and standard error for Control
control_mean <- try2 %>% filter(Treatment == "Control") %>%
group_by(Day) %>%
summarize(control_mean_bio = mean(bio_log, na.rm = TRUE))
# Calculate differences from Control for each treatment
tot.bio_diff <- try2 %>%
left_join(control_mean, by = "Day") %>%
mutate(diff_bio = bio_log - control_mean_bio)
# Summarize the data for plotting
tot_bio_dynamics <- tot.bio_diff %>%
group_by(Treatment, Day) %>%
summarize(mean_diff_bio = mean(diff_bio, na.rm = TRUE), se = se(diff_bio)) %>%
mutate(lower_y = mean_diff_bio - se, upper_y = mean_diff_bio + se)
# Determine the y-axis limits to ensure alignment of zero line
y_limits <- range(tot_bio_dynamics$mean_diff_bio + tot_bio_dynamics$se,
tot_bio_dynamics$mean_diff_bio - tot_bio_dynamics$se)
# Filter out the control treatment for the plot
tot_bio_dynamics_filtered <- tot_bio_dynamics
tot_bio_dynamics_filtered <- tot_bio_dynamics_filtered %>% filter(Treatment != "Control")
# Plot the data with faceting and aligned y-axis
bio_plot_zoo <- ggplot(tot_bio_dynamics_filtered, aes(x = Day, y = mean_diff_bio, color = Treatment, fill = Treatment)) +
geom_line(aes(group = Treatment), size = 1, color = "blue") +
geom_point(size = 2, color = "blue") +
geom_ribbon(aes(ymin = lower_y, ymax = upper_y, group = Treatment), alpha = 0.1, show.legend = FALSE, fill = "blue", color = "blue") + labs(tag = "(a)", x = "Day", y = "Zooplankton \nDifference in log10(biomass)") +
viridis::scale_colour_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
viridis::scale_fill_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
theme(legend.position = "top") +
theme_bw() +
guides(fill = guide_legend(override.aes = list(size = 8), ncol = 6)) +
geom_hline(yintercept = 0, linetype = "dashed") +
coord_cartesian(ylim = y_limits) +
annotate("rect", xmin = 0, xmax = 6, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
annotate("rect", xmin = 14, xmax = 20, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
annotate("rect", xmin = 28, xmax = 34, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
theme(legend.position = "none") +
theme_minimal(base_size = 20) +
theme(
panel.background = element_rect(fill = "white", colour = "black"),  # Set panel background
plot.title = element_text(hjust = 0.5, margin = margin(b = 20), size = 20, face = "bold"),  # Set plot title text size and make it bold
axis.text = element_text(size = 30),  # Set axis text size
axis.title = element_text(size = 30),  # Set axis title text size
plot.tag = element_text(size = 30),
legend.position = "none"   # Set tag size
)
dd_zoo_model <- dd_zoo_long %>%
group_by(Mesocosm.No, Treatment, Day) %>%
summarize(total = sum(biomass)) %>%
ungroup()
model_zoo_bio <- lmer(log10(total +1) ~ Treatment * Day + (1 | Mesocosm.No), data = dd_zoo_model)
# Ensure Treatment is a factor
dd_zoo_long$Treatment <- as.factor(dd_zoo_long$Treatment)
dd_zoo_long$Day <- factor(dd_zoo_long$Day, levels = c(-4, 10, 24,  38))  # Specify custom order
# Create zooplankton groups
# Create the new column "group" based on "taxa"
dd_zoo_long <- dd_zoo_long %>%
mutate(group = case_when(
taxa %in% c("Simocephalus", "Chydorus", "Daphnia.longispina", "Alona", "Alonella", "Ceriodaphnia") ~ "Cladocera",
taxa %in% c("Cyclopoida", "Calanoida", "Nauplii") ~ "Copepods",
taxa %in% c("Keratella.quadrata", "Lecanidae", "Mytilina", "Lepadella", "Testudinella", "Euchlanis", "Polyarthra", "Brachionus",
"Squatinella", "Ascomorpha", "Trichocerca", "Cephalodella") ~ "Rotifers",
taxa == "Ostracoda" ~ "Ostracoda"
))
dd_zoo_long <- dd_zoo_long %>%
mutate(group = case_when(
group == "Rotifers" ~ "Ostracoda",
group == "Ostracoda" ~ "Rotifers",
TRUE ~ group  # Leave other values unchanged
))
write.csv(dd_zoo_long, "data/zoop_groups.csv", quote = FALSE, row.names = FALSE)
dd_zoo_long <- read.csv("data/zoop_groups.csv")
dd_zoo_long
