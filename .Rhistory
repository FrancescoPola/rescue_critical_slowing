group_by(range) %>%
do(model = fit_lm(.))
# Extract slopes
slopes <- lm_models %>%
rowwise() %>%
mutate(slope = coef(model)["Day"]) %>%
select(range, slope) %>%
ungroup()
# Create a combined plot
combined_plot <- ggplot(hw_data, aes(x = Day, y = diff)) +
geom_point(aes(color = as.factor(Cosm)), size = 3) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Day", y = "Difference (HW - Control)") +
theme_bw(base_size = 22) +
theme(legend.position = "none") +
facet_wrap(~ range, scales = "free", ncol = 3) +
labs(tag = "(b)")
# Add slope annotations
combined_plot <- combined_plot +
geom_text(data = slopes, aes(x = Inf, y = Inf, label = paste0("Slope: ", round(slope, 3))),
hjust = 1.5, vjust = 1.2, size = 5)
print(combined_plot)
chla_combined <- chla_plot / combined_plot
chla_combined
model_chla <- lmer(log(chla) ~ Treatment * Day + (1 | Cosm), data = chla)
# Create a tidy summary
tidy_summary <- tidy(model_chla)
# Calculate 95% confidence intervals
conf_intervals <- confint(model_chla, level = 0.95)
# Convert conf_intervals to a data frame and set appropriate column names
conf_intervals_df <- as.data.frame(conf_intervals)
conf_intervals_df <- conf_intervals_df[-1, ] # Remove the first row which is the random effect variance
colnames(conf_intervals_df) <- c("2.5%", "97.5%")
# Add the confidence intervals to the tidy summary
tidy_summary <- cbind(tidy_summary[c(1:4), ], conf_intervals_df[ c(2:5), ])
# Print the summary in RMarkdown with kableExtra for formatting
tidy_summary %>%
mutate(across(where(is.numeric), ~ round(., 3))) %>%
kable(format = "html", escape = FALSE) %>%
kable_styling(full_width = FALSE)
# Save the tidy summary to a Word document
tidy_summary <- tidy_summary %>%
mutate(across(where(is.numeric), ~ round(., 3)))
# Create a flextable object
ft <- flextable(tidy_summary)
# Set properties for the flextable (optional)
ft <- ft %>%
set_table_properties(width = 1, layout = "autofit") %>%
align(align = "center", part = "all") %>%
bold(part = "header") %>%
autofit()
# Save the flextable as a Word document
doc <- read_docx()
doc <- body_add_flextable(doc, value = ft)
print(doc, target = "Tables/chla_model_summary.docx")
check_model(model_chla)
# Specify the days you are interested in for post-hoc comparisons
days_of_interest <- unique(chla$Day)  # You can also specify specific days manually, e.g., c(1, 5, 10, 15)
# Perform post-hoc analysis with specified days
emm_chla <- emmeans(model_chla, ~ Treatment | Day, at = list(Day = days_of_interest))
post_hoc_results_chla <- pairs(emm_chla)
# Convert post_hoc_results to a data frame
post_hoc_df_chla <- as.data.frame(post_hoc_results_chla)
# Order the results by the 'Day' column
post_hoc_df_chla <- post_hoc_df_chla %>% arrange(Day)
# Print the results using kable with limited number of decimals and additional formatting
kable(post_hoc_df_chla %>% mutate_if(is.numeric, ~round(., 3)), format = "html") %>%
kable_styling(full_width = FALSE) %>%
column_spec(1, bold = TRUE)  %>%
column_spec(7, bold = ifelse(post_hoc_df_chla$p.value < 0.05, TRUE, FALSE))
# Save table for word document
post_hoc_df_chla <- post_hoc_df_chla %>%
mutate(across(where(is.numeric), ~ round(., 3)))
# Apply formatting to p-value column
post_hoc_df_chla <- post_hoc_df_chla %>%
mutate(p_value = ifelse(p.value < 0.05, paste0("<b>", round(p.value, 3), "</b>"), round(p.value, 3)))
# Create a flextable object from the data frame
ft <- flextable(post_hoc_df_chla)
# Set properties for the flextable (optional)
ft <- flextable(post_hoc_df_chla) %>%
set_table_properties(width = 1, layout = "autofit") %>%
align(align = "center", part = "all") %>%
bold(part = "header") %>%
autofit()
# Save the flextable as a Word document
doc <- read_docx()
doc <- body_add_flextable(doc, value = ft)
print(doc, target = "Tables/Chla_table_output.docx")
# Visualization
emmip(model_chla, Treatment ~ Day, at = list(Day = days_of_interest), CIs = TRUE)
# load group data
group_bio <- read.csv("data/group_bio.csv")
# Calculate relative abundance
group_bio2 <- group_bio %>%
group_by( Treatment, Day) %>%
mutate(total = sum(total_biomass)) %>%
mutate(relative_bio = total_biomass / total * 100) %>%
ungroup()
# Ensure Treatment is a factor
group_bio2$Treatment <- as.factor(group_bio2$Treatment)
# Create the plot
p <- ggplot(group_bio2, aes(x = Treatment, y = relative_bio, fill = group)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ paste("Day", Day), scales = "free_x") +  # Include "Day" before the Day number
labs(x = "", y = "Relative Biomass (%)") +
theme_bw(base_size = 20) +
theme(
panel.background = element_rect(fill = "white", colour = "black"),  # Set panel background
plot.title = element_text(hjust = 0.5, margin = margin(b = 20), size = 20, face = "bold"),  # Set plot title text size and make it bold
axis.text = element_text(size = 30),  # Set axis text size
axis.title = element_text(size = 30),  # Set axis title text size
strip.text = element_text(size = 30),  # Set facet strip text size
legend.text = element_text(size = 30),  # Set legend text size
legend.title = element_text(size = 30),  # Set legend title text size
legend.key.size = unit(1.5, "lines"),  # Increase legend key size
legend.position = "bottom",  # Move legend to the bottom
legend.justification = "center",  # Center justify the legend
legend.direction = "horizontal",  # Arrange legend items horizontally
legend.box = "vertical",  # Align legend items vertically within the box
axis.text.x = element_text(hjust = 1)  # Rotate x-axis text
) +
scale_fill_brewer(palette = "Set1")  # Apply a ColorBrewer palette
# Display the plot
print(p)
wide_data <- group_bio %>%
pivot_wider(
names_from = group,
values_from = total_biomass)  # Fill missing values with 0
group_bio_wide <- as.data.frame(wide_data)
set.seed(258)
# PERMANOVA per day
day_results <- lapply(unique(group_bio_wide$Day), function(day) {
subset_data <- group_bio_wide %>% filter(Day == day)
species_data <- subset_data[, 4:ncol(subset_data)]  # Extract species abundance columns
bray_curtis_dist <- vegdist(species_data, method = "bray", binary = FALSE, na.rm = TRUE)  # Calculate Bray-Curtis dissimilarity
adonis_result <- adonis(bray_curtis_dist ~ Treatment, data = subset_data, permutations = 999)
result <- list(Day = day, PERMANOVA_result = adonis_result)
print(result)
return(result)
})
# Prepare data for nice printing
day_results_df <- lapply(day_results, function(res) {
if (!is.null(res$PERMANOVA_result$aov.tab)) {
data.frame(
Day = res$Day,
F = res$PERMANOVA_result$aov.tab$F.Model[1],
R2 = res$PERMANOVA_result$aov.tab$R2[1],
p_value = res$PERMANOVA_result$aov.tab$`Pr(>F)`[1]
)
} else {
data.frame(
Day = res$Day,
F = NA,
R2 = NA,
p_value = NA
)
}
}) %>%
bind_rows() %>%
arrange(Day)
# Print the results using kable with limited number of decimals and additional formatting
kable(day_results_df, format = "html") %>%
kable_styling(full_width = FALSE) %>%
column_spec(4, bold = ifelse(day_results_df$p_value < 0.05, TRUE, FALSE))  # Make p-value column bold if significant
# Save table for word document
day_results_df <- day_results_df %>%
mutate(across(where(is.numeric), ~ round(., 3)))
# Apply formatting to p-value column
day_results_df <- day_results_df %>%
mutate(p_value = ifelse(p_value < 0.05, paste0("<b>", round(p_value, 3), "</b>"), round(p_value, 3)))
# Create a flextable object from the data frame
ft <- flextable(day_results_df)
# Set properties for the flextable (optional)
ft <- flextable(day_results_df) %>%
set_table_properties(width = 1, layout = "autofit") %>%
align(align = "center", part = "all") %>%
bold(part = "header") %>%
autofit()
# Save the flextable as a Word document
doc <- read_docx()
doc <- body_add_flextable(doc, value = ft)
print(doc, target = "Tables/PEROMANOVA_table_output.docx")
# Transform data to wide format
wide_data <- group_bio %>%
pivot_wider(names_from = group, values_from = total_biomass, values_fill = list(total_biomass = 0))
group_bio_wide <- as.data.frame(wide_data)
# Function to perform SIMPER per day
simper_results <- lapply(unique(group_bio_wide$Day), function(day) {
subset_data <- group_bio_wide %>% filter(Day == day)
species_data <- subset_data[, 4:ncol(subset_data)]  # Extract species abundance columns
# Perform SIMPER analysis
simper_result <- with(subset_data, simper(species_data, Treatment))
# Extract mean abundances per treatment
mean_abundances <- subset_data %>%
group_by(Treatment) %>%
summarise(across(everything(), mean, na.rm = TRUE))
result <- list(Day = day, SIMPER_result = summary(simper_result), Mean_Abundances = mean_abundances)
return(result)
})
# Day -4 SIMPER results
day_m4_simper <- simper_results[[1]]$SIMPER_result
# Extract SIMPER results for a specific comparison (e.g., "HW_Control")
simper_table <- day_m4_simper$HW_Control
# Convert to a data frame for better formatting
simper_df <- as.data.frame(simper_table)
# Round the numeric columns to a maximum of three decimals
simper_df[] <- lapply(simper_df, function(x) if (is.numeric(x)) round(x, 3) else x)
# Add a column for species names
simper_df <- cbind(species = rownames(simper_df), simper_df)
# Print SIMPER results in HTML format using kableExtra (for previewing, optional)
simper_table_html <- simper_df %>%
kable(format = "html", digits = 3, caption = "SIMPER Analysis Results for Day -4: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Prepare species abundance comparison (example data)
species_abundance_comparison <- data.frame(
species = rownames(simper_df),
HW_abundance = runif(nrow(simper_df), min = 1, max = 100),  # Replace with actual data
Control_abundance = runif(nrow(simper_df), min = 1, max = 100)  # Replace with actual data
)
# Round numeric columns in species Biomass comparison
species_abundance_comparison[] <- lapply(species_abundance_comparison, function(x) if (is.numeric(x)) round(x, 3) else x)
# Print species abundance comparison in HTML format using kableExtra (for previewing, optional)
species_abundance_html <- species_abundance_comparison %>%
kable(format = "html", digits = 3, caption = "Species Biomass Comparison for Day -4: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Convert SIMPER results to flextable
ft_simper <- flextable(simper_df)
# Convert species Biomass comparison to flextable
ft_species_abundance <- flextable(species_abundance_comparison)
# Create a new Word document
doc <- read_docx() %>%
body_add_par("SIMPER Analysis Results for Day -4: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_simper) %>%
body_add_par("") %>%
body_add_par("Species Biomass Comparison for Day -4: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_species_abundance)
# Save the document
print(doc, target = "Tables/SIMPER_Results_Day_m4_with_comparison.docx")
simper_table_html
# Day -4 SIMPER results
day_3_simper <- simper_results[[2]]$SIMPER_result
# Extract SIMPER results for a specific comparison (e.g., "HW_Control")
simper_table <- day_3_simper$HW_Control
# Convert to a data frame for better formatting
simper_df <- as.data.frame(simper_table)
# Round the numeric columns to a maximum of three decimals
simper_df[] <- lapply(simper_df, function(x) if (is.numeric(x)) round(x, 3) else x)
# Add a column for species names
simper_df <- cbind(species = rownames(simper_df), simper_df)
# Print SIMPER results in HTML format using kableExtra (for previewing, optional)
simper_table_html <- simper_df %>%
kable(format = "html", digits = 3, caption = "SIMPER Analysis Results for Day 3: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Prepare species abundance comparison (example data)
species_abundance_comparison <- data.frame(
species = rownames(simper_df),
HW_abundance = runif(nrow(simper_df), min = 1, max = 100),  # Replace with actual data
Control_abundance = runif(nrow(simper_df), min = 1, max = 100)  # Replace with actual data
)
# Round numeric columns in species Biomass comparison
species_abundance_comparison[] <- lapply(species_abundance_comparison, function(x) if (is.numeric(x)) round(x, 3) else x)
# Print species abundance comparison in HTML format using kableExtra (for previewing, optional)
species_abundance_html <- species_abundance_comparison %>%
kable(format = "html", digits = 3, caption = "Species Biomass Comparison for Day 3: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Convert SIMPER results to flextable
ft_simper <- flextable(simper_df)
# Convert species Biomass comparison to flextable
ft_species_abundance <- flextable(species_abundance_comparison)
# Create a new Word document
doc <- read_docx() %>%
body_add_par("SIMPER Analysis Results for Day 3: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_simper) %>%
body_add_par("") %>%
body_add_par("Species Biomass Comparison for Day 3: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_species_abundance)
# Save the document
print(doc, target = "Tables/SIMPER_Results_Day_3_with_comparison.docx")
simper_table_html
# Day 10 SIMPER results
day_10_simper <- simper_results[[3]]$SIMPER_result
# Extract SIMPER results for a specific comparison (e.g., "HW_Control")
simper_table <- day_10_simper$HW_Control
# Convert to a data frame for better formatting
simper_df <- as.data.frame(simper_table)
# Round the numeric columns to a maximum of three decimals
simper_df[] <- lapply(simper_df, function(x) if (is.numeric(x)) round(x, 3) else x)
# Add a column for species names
simper_df <- cbind(species = rownames(simper_df), simper_df)
# Print SIMPER results in HTML format using kableExtra (for previewing, optional)
simper_table_html <- simper_df %>%
kable(format = "html", digits = 3, caption = "SIMPER Analysis Results for Day 10: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Prepare species abundance comparison (example data)
species_abundance_comparison <- data.frame(
species = rownames(simper_df),
HW_abundance = runif(nrow(simper_df), min = 1, max = 100),  # Replace with actual data
Control_abundance = runif(nrow(simper_df), min = 1, max = 100)  # Replace with actual data
)
# Round numeric columns in species Biomass comparison
species_abundance_comparison[] <- lapply(species_abundance_comparison, function(x) if (is.numeric(x)) round(x, 3) else x)
# Print species abundance comparison in HTML format using kableExtra (for previewing, optional)
species_abundance_html <- species_abundance_comparison %>%
kable(format = "html", digits = 3, caption = "Species Biomass Comparison for Day 10: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Convert SIMPER results to flextable
ft_simper <- flextable(simper_df)
# Convert species Biomass comparison to flextable
ft_species_abundance <- flextable(species_abundance_comparison)
# Create a new Word document
doc <- read_docx() %>%
body_add_par("SIMPER Analysis Results for Day 10: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_simper) %>%
body_add_par("") %>%
body_add_par("Species Biomass Comparison for Day 10: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_species_abundance)
# Save the document
print(doc, target = "Tables/SIMPER_Results_Day_10_with_comparison.docx")
simper_table_html
# Day 15 SIMPER results
day_15_simper <- simper_results[[4]]$SIMPER_result
# Extract SIMPER results for a specific comparison (e.g., "HW_Control")
simper_table <- day_15_simper$HW_Control
# Convert to a data frame for better formatting
simper_df <- as.data.frame(simper_table)
# Round the numeric columns to a maximum of three decimals
simper_df[] <- lapply(simper_df, function(x) if (is.numeric(x)) round(x, 3) else x)
# Add a column for species names
simper_df <- cbind(species = rownames(simper_df), simper_df)
# Print SIMPER results in HTML format using kableExtra (for previewing, optional)
simper_table_html <- simper_df %>%
kable(format = "html", digits = 3, caption = "SIMPER Analysis Results for Day 15: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Prepare species abundance comparison (example data)
species_abundance_comparison <- data.frame(
species = rownames(simper_df),
HW_abundance = runif(nrow(simper_df), min = 1, max = 100),  # Replace with actual data
Control_abundance = runif(nrow(simper_df), min = 1, max = 100)  # Replace with actual data
)
# Round numeric columns in species Biomass comparison
species_abundance_comparison[] <- lapply(species_abundance_comparison, function(x) if (is.numeric(x)) round(x, 3) else x)
# Print species abundance comparison in HTML format using kableExtra (for previewing, optional)
species_abundance_html <- species_abundance_comparison %>%
kable(format = "html", digits = 3, caption = "Species Biomass Comparison for Day 15: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Convert SIMPER results to flextable
ft_simper <- flextable(simper_df)
# Convert species Biomass comparison to flextable
ft_species_abundance <- flextable(species_abundance_comparison)
# Create a new Word document
doc <- read_docx() %>%
body_add_par("SIMPER Analysis Results for Day 15: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_simper) %>%
body_add_par("") %>%
body_add_par("Species Biomass Comparison for Day 15: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_species_abundance)
# Save the document
print(doc, target = "Tables/SIMPER_Results_Day_15_with_comparison.docx")
simper_table_html
# Day 15 SIMPER results
day_24_simper <- simper_results[[5]]$SIMPER_result
# Extract SIMPER results for a specific comparison (e.g., "HW_Control")
simper_table <- day_24_simper$HW_Control
# Convert to a data frame for better formatting
simper_df <- as.data.frame(simper_table)
# Round the numeric columns to a maximum of three decimals
simper_df[] <- lapply(simper_df, function(x) if (is.numeric(x)) round(x, 3) else x)
# Add a column for species names
simper_df <- cbind(species = rownames(simper_df), simper_df)
# Print SIMPER results in HTML format using kableExtra (for previewing, optional)
simper_table_html <- simper_df %>%
kable(format = "html", digits = 3, caption = "SIMPER Analysis Results for Day 24: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Prepare species abundance comparison (example data)
species_abundance_comparison <- data.frame(
species = rownames(simper_df),
HW_abundance = runif(nrow(simper_df), min = 1, max = 100),  # Replace with actual data
Control_abundance = runif(nrow(simper_df), min = 1, max = 100)  # Replace with actual data
)
# Round numeric columns in species Biomass comparison
species_abundance_comparison[] <- lapply(species_abundance_comparison, function(x) if (is.numeric(x)) round(x, 3) else x)
# Print species abundance comparison in HTML format using kableExtra (for previewing, optional)
species_abundance_html <- species_abundance_comparison %>%
kable(format = "html", digits = 3, caption = "Species Biomass Comparison for Day 24: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Convert SIMPER results to flextable
ft_simper <- flextable(simper_df)
# Convert species Biomass comparison to flextable
ft_species_abundance <- flextable(species_abundance_comparison)
# Create a new Word document
doc <- read_docx() %>%
body_add_par("SIMPER Analysis Results for Day 24: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_simper) %>%
body_add_par("") %>%
body_add_par("Species Biomass Comparison for Day 24: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_species_abundance)
# Save the document
print(doc, target = "Tables/SIMPER_Results_Day_24_with_comparison.docx")
simper_table_html
# Day 15 SIMPER results
day_30_simper <- simper_results[[6]]$SIMPER_result
# Extract SIMPER results for a specific comparison (e.g., "HW_Control")
simper_table <- day_30_simper$HW_Control
# Convert to a data frame for better formatting
simper_df <- as.data.frame(simper_table)
# Round the numeric columns to a maximum of three decimals
simper_df[] <- lapply(simper_df, function(x) if (is.numeric(x)) round(x, 3) else x)
# Add a column for species names
simper_df <- cbind(species = rownames(simper_df), simper_df)
# Print SIMPER results in HTML format using kableExtra (for previewing, optional)
simper_table_html <- simper_df %>%
kable(format = "html", digits = 3, caption = "SIMPER Analysis Results for Day 30: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Prepare species abundance comparison (example data)
species_abundance_comparison <- data.frame(
species = rownames(simper_df),
HW_abundance = runif(nrow(simper_df), min = 1, max = 100),  # Replace with actual data
Control_abundance = runif(nrow(simper_df), min = 1, max = 100)  # Replace with actual data
)
# Round numeric columns in species Biomass comparison
species_abundance_comparison[] <- lapply(species_abundance_comparison, function(x) if (is.numeric(x)) round(x, 3) else x)
# Print species abundance comparison in HTML format using kableExtra (for previewing, optional)
species_abundance_html <- species_abundance_comparison %>%
kable(format = "html", digits = 3, caption = "Species Biomass Comparison for Day 30: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Convert SIMPER results to flextable
ft_simper <- flextable(simper_df)
# Convert species Biomass comparison to flextable
ft_species_abundance <- flextable(species_abundance_comparison)
# Create a new Word document
doc <- read_docx() %>%
body_add_par("SIMPER Analysis Results for Day 30: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_simper) %>%
body_add_par("") %>%
body_add_par("Species Biomass Comparison for Day 30: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_species_abundance)
# Save the document
print(doc, target = "Tables/SIMPER_Results_Day_30_with_comparison.docx")
simper_table_html
# Day 15 SIMPER results
day_38_simper <- simper_results[[7]]$SIMPER_result
# Extract SIMPER results for a specific comparison (e.g., "HW_Control")
simper_table <- day_38_simper$HW_Control
# Convert to a data frame for better formatting
simper_df <- as.data.frame(simper_table)
# Round the numeric columns to a maximum of three decimals
simper_df[] <- lapply(simper_df, function(x) if (is.numeric(x)) round(x, 3) else x)
# Add a column for species names
simper_df <- cbind(species = rownames(simper_df), simper_df)
# Print SIMPER results in HTML format using kableExtra (for previewing, optional)
simper_table_html <- simper_df %>%
kable(format = "html", digits = 3, caption = "SIMPER Analysis Results for Day 38: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Prepare species abundance comparison (example data)
species_abundance_comparison <- data.frame(
species = rownames(simper_df),
HW_abundance = runif(nrow(simper_df), min = 1, max = 100),  # Replace with actual data
Control_abundance = runif(nrow(simper_df), min = 1, max = 100)  # Replace with actual data
)
# Round numeric columns in species Biomass comparison
species_abundance_comparison[] <- lapply(species_abundance_comparison, function(x) if (is.numeric(x)) round(x, 3) else x)
# Print species abundance comparison in HTML format using kableExtra (for previewing, optional)
species_abundance_html <- species_abundance_comparison %>%
kable(format = "html", digits = 3, caption = "Species Biomass Comparison for Day 38: HW vs Control") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Convert SIMPER results to flextable
ft_simper <- flextable(simper_df)
# Convert species Biomass comparison to flextable
ft_species_abundance <- flextable(species_abundance_comparison)
# Create a new Word document
doc <- read_docx() %>%
body_add_par("SIMPER Analysis Results for Day 38: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_simper) %>%
body_add_par("") %>%
body_add_par("Species Biomass Comparison for Day 38: HW vs Control", style = "heading 1") %>%
body_add_flextable(ft_species_abundance)
# Save the document
print(doc, target = "Tables/SIMPER_Results_Day_38_with_comparison.docx")
simper_table_html
group_bio_wide <- group_bio_wide[,-c(1)]
species_data <- group_bio_wide[, -(1:2)]  # Assuming the first two columns are Day and Treatment
bray_curtis_dist <- vegdist(species_data, method = "bray")
# Function to calculate NMDS and prepare data for plotting
prepare_nmds_data <- function(day_data) {
species_data <- day_data[, -(1:2)]  # Assuming the first two columns are Day and Treatment
bray_curtis_dist <- vegdist(species_data, method = "bray")
nmds_result <- metaMDS(bray_curtis_dist, k = 2, trymax = 100)
ordination_df <- as.data.frame(nmds_result$points)
ordination_df$Treatment <- day_data$Treatment
return(ordination_df)
}
# List to store ordination data frames for each day
ordination_list <- lapply(unique(group_bio_wide$Day), function(day) {
day_data <- group_bio_wide %>% filter(Day == day)
ordination_df <- prepare_nmds_data(day_data)
ordination_df$Day <- day
return(ordination_df)
})
# Combine all ordination data frames into one
combined_ordination_df <- do.call(rbind, ordination_list)
# Define the layout for 3 rows and 5 columns
num_rows <- 3
num_cols <- 5
# Plot with polygons for each treatment
ggplot(combined_ordination_df, aes(x = MDS1, y = MDS2, fill = Treatment, group = interaction(Treatment, Day))) +
geom_polygon(alpha = 0.5, color = "black") +
geom_point(size = 3, aes(color = Treatment)) +
labs(x = "NMDS Axis 1", y = "NMDS Axis 2", color = "Treatment", fill = "Treatment") +
theme_bw(base_size = 25) +
ggtitle("Compositional Change of Phytoplankton Community Over Time") +
facet_wrap(~ Day, nrow = num_rows, ncol = num_cols, scales = "free")
group_bio_wide
