
#### Chlorophyll a ####
dd <- read_excel("data/DataMesocosms2021.xlsx", 
                 sheet = "Metabolism Evening")

dd_add <- read_excel("data/Additional_metabolism_phyto.xlsx")
names(dd_add)

# get only ox and rename

ox_add <- dd_add[, c(1:4,8)]
ox_add <- ox_add %>% rename(ox = "DO (mg/L)" )


ox <- dd[, c(1:4,8)]
ox <- ox %>% rename(ox = "DO (mg/L)" )

ox <- rbind(ox, ox_add)
# remove unwanted treatments
unique(dd$Treatment)
target <- c("CO/A", "CO/HW", "A/C1", "HW/C1")
ox <- ox %>% filter(Treatment %in% target)
unique(ox$Day)
# Calculate mean abundance and standard error for Control
control_mean <- ox %>% filter(Treatment == "CO/A") %>%
  group_by(Day) %>%
  summarize(control_mean_ox = mean(ox, na.rm = TRUE))

# Calculate differences from Control for each treatment
tot.ox_diff <- ox %>%
  left_join(control_mean, by = "Day") %>%
  mutate(diff_ox = ox - control_mean_ox)

# Summarize the data for plotting
tot_ox_dynamics <- tot.ox_diff %>%
  group_by(Treatment, Day) %>%
  summarize(mean_diff_ox = mean(diff_ox, na.rm = TRUE), se = se(diff_ox)) %>%
  mutate(lower_y = mean_diff_ox - se, upper_y = mean_diff_ox + se)

# Determine the y-axis limits to ensure alignment of zero line
y_limits <- range(tot_ox_dynamics$mean_diff_ox + tot_ox_dynamics$se, 
                  tot_ox_dynamics$mean_diff_ox - tot_ox_dynamics$se)

# Filter out the control treatment for the plot
tot_ox_dynamics_filtered <- tot_ox_dynamics %>% filter(Treatment == c("CO/HW")
data_ox_plot <- tot_ox_dynamics_filtered %>% filter(Day <= 60)
# Plot the data with faceting and aligned y-axis
ox_plot <- ggplot(tot_ox_dynamics_filtered, aes(x = Day, y = mean_diff_ox, color = Treatment, fill = Treatment)) +
  geom_line(aes(group = Treatment), size = 1) +
  geom_ribbon(aes(ymin = lower_y, ymax = upper_y, group = Treatment), alpha = 0.1, show.legend = FALSE) +
  ylab("Dissolved oxigen \nDifference in mg/L") +
  xlab("Day") +
  viridis::scale_colour_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
  viridis::scale_fill_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
  scale_x_continuous(limits = c(-5, 52)) +
  theme(legend.position = "top") +
  theme_bw() +
  guides(fill = guide_legend(override.aes = list(size = 8), ncol = 6)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  coord_cartesian(ylim = y_limits) + 
  annotate("rect", xmin = 0, xmax = 6, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  annotate("rect", xmin = 14, xmax = 20, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  annotate("rect", xmin = 28, xmax = 34, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  theme(legend.position = "none")

ox_plot

ggsave("oxigen_dynamics.png", ox_plot, width = 12, height = 8)
ggsave("oxigen_dynamics.pdf", ox_plot, width = 12, height = 8)

str(tot_ox_dynamics)
unique(tot_ox_dynamics_filtered$Day)

#### Calculating slopes of recovery ####


# First HW
# Filter the data for days between 1 and 10
filtered_data <- ox %>%
  filter(Day >= 1 & Day <= 10)

# Extract control data for the relevant days
control_data <- filtered_data %>%
  filter(Treatment == "CO/A") %>%
  select(Day, Cosm, ox) %>%
  rename(control_ox = ox)

# Calculate the LRR by dividing the ox values of each treatment by the control ox values and taking the log
lrr_data <- filtered_data %>%
  filter(Treatment != "CO/A") %>%
  left_join(control_data, by = c("Day")) %>%
  mutate(lrr = log(ox  / control_ox ))

# Calculate the slope of the linear regression of LRR for each treatment
slopes_1 <- lrr_data %>%
  group_by(Treatment) %>%
  do(broom::tidy(lm(lrr ~ Day, data = .))) %>%
  filter(term == "Day") %>%
  select(Treatment, estimate) %>%
  rename(slope = estimate)

print(slopes)



# Second HW
# Filter the data for days between 1 and 10
filtered_data <- ox %>%
  filter(Day >= 16 & Day <= 24)

# Extract control data for the relevant days
control_data <- filtered_data %>%
  filter(Treatment == "CO/A") %>%
  select(Day, Cosm, ox) %>%
  rename(control_ox = ox)

# Calculate the LRR by dividing the ox values of each treatment by the control ox values and taking the log
lrr_data <- filtered_data %>%
  filter(Treatment != "CO/A") %>%
  left_join(control_data, by = c("Day")) %>%
  mutate(lrr = log(ox  / control_ox ))

# Calculate the slope of the linear regression of LRR for each treatment
slopes_2 <- lrr_data %>%
  group_by(Treatment) %>%
  do(broom::tidy(lm(lrr ~ Day, data = .))) %>%
  filter(term == "Day") %>%
  select(Treatment, estimate) %>%
  rename(slope = estimate)

print(slopes_2)



# Third HW
# Filter the data for days between 1 and 10
filtered_data <- ox %>%
  filter(Day >= 29 & Day <= 38)

# Extract control data for the relevant days
control_data <- filtered_data %>%
  filter(Treatment == "CO/A") %>%
  select(Day, Cosm, ox) %>%
  rename(control_ox = ox)

# Calculate the LRR by dividing the ox values of each treatment by the control ox values and taking the log
lrr_data <- filtered_data %>%
  filter(Treatment != "CO/A") %>%
  left_join(control_data, by = c("Day")) %>%
  mutate(lrr = log(ox  / control_ox ))

# Calculate the slope of the linear regression of LRR for each treatment
slopes_3 <- lrr_data %>%
  group_by(Treatment) %>%
  do(broom::tidy(lm(lrr ~ Day, data = .))) %>%
  filter(term == "Day") %>%
  select(Treatment, estimate) %>%
  rename(slope = estimate)

print(slopes_3)





library(vegan)




day_results <- lapply(unique(dd_bray$Day), function(day) {
  subset_data <- dd_bray %>% filter(Day == day)
  species_data <- subset_data[, 4:ncol(subset_data)]  # Extract species abundance columns
  bray_curtis_dist <- vegdist(species_data, method = "bray", binary = FALSE, na.rm = TRUE)  # Calculate Bray-Curtis dissimilarity
  adonis_result <- adonis2(bray_curtis_dist ~ Treatment, data = subset_data, permutations = 999)
  result <- list(Day = day, PERMANOVA_result = adonis_result)
  print(result)
  return(result)
})


install.packages("pander")
library(pander)
library(pairwiseAdonis)
bray_curtis_dist <- vegdist(dd_bray[, -(1:3)], method = "bray")
permanova_result <- adonis2(bray_curtis_dist ~ Treatment * Day, data = df.sites_phyto, permutations = 999)
print(permanova_result)


# Perform post-hoc pairwise PERMANOVA tests
pairwise_permanova <- pairwise.adonis2(bray_curtis_dist ~ Treatment * Day, data = df.sites_phyto, permutations = 999)
print(pairwise_permanova)


# Post-hoc pairwise t-tests for significant terms
pairwise_t_tests <- function(data, formula) {
  pairwise_results <- list()
  
  for (term in all.vars(as.formula(formula))[-1]) { # Skip the response variable
    levels <- unique(data[[term]])
    for (i in 1:(length(levels) - 1)) {
      for (j in (i + 1):length(levels)) {
        subset_data <- data[data[[term]] %in% c(levels[i], levels[j]), ]
        dist_matrix <- vegdist(subset_data[, -(1:3)], method = "bray")
        pairwise_result <- adonis2(dist_matrix ~ Treatment, data = subset_data, permutations = 999)
        pairwise_results <- append(pairwise_results, list(list(term = term, levels = c(levels[i], levels[j]), result = pairwise_result)))
      }
    }
  }
  
  return(pairwise_results)
}

pairwise_t_tests_results <- pairwise_t_tests(df.sites_phyto, bray_curtis_dist ~ Treatment * Day)


# Helper function to extract relevant information from pairwise results
extract_results <- function(pairwise_results) {
  result_df <- data.frame(
    Term = character(),
    Levels = character(),
    Df = numeric(),
    SumOfSqs = numeric(),
    R2 = numeric(),
    F = numeric(),
    PrF = numeric(),
    stringsAsFactors = FALSE
  )
  
  for (res in pairwise_results) {
    term <- res$term
    levels <- paste(res$levels, collapse = " vs ")
    result <- res$result$aov.tab[1, ]
    result_df <- rbind(result_df, data.frame(
      Term = term,
      Levels = levels,
      Df = result["Df"],
      SumOfSqs = result["SumOfSqs"],
      R2 = result["R2"],
      F = result["F"],
      PrF = result["Pr(>F)"]
    ))
  }
  
  return(result_df)
}

# Extract and display pairwise t-tests results
pairwise_t_tests_df <- extract_results(pairwise_t_tests_results)
print(pairwise_t_tests_df)

unique(dd_bray$Day)





dd_bray <- dd_bray[,-c(1,4:6)]

species_data <- dd_bray[, -(1:2)]  # Assuming the first two columns are Day and Treatment
bray_curtis_dist <- vegdist(species_data, method = "bray")

# Function to calculate PCoA and prepare data for plotting
prepare_pcoa_data <- function(day_data) {
  species_data <- day_data[, -(1:2)]  # Assuming the first two columns are Day and Treatment
  bray_curtis_dist <- vegdist(species_data, method = "bray")
  pcoa_result <- cmdscale(bray_curtis_dist, eig = TRUE, k = 2)
  ordination_df <- as.data.frame(pcoa_result$points)
  ordination_df$Treatment <- day_data$Treatment
  return(ordination_df)
}

# List to store ordination data frames for each day
ordination_list <- lapply(unique(dd_bray$Day), function(day) {
  day_data <- dd_bray %>% filter(Day == day)
  ordination_df <- prepare_pcoa_data(day_data)
  ordination_df$Day <- day
  return(ordination_df)
})

# Combine all ordination data frames into one
combined_ordination_df <- do.call(rbind, ordination_list)

# Plot for each day separately
ggplot(combined_ordination_df, aes(x = V1, y = V2, color = Treatment)) +
  geom_point(size = 3) +
  labs(x = "PCoA Axis 1", y = "PCoA Axis 2", color = "Treatment") +
  theme_minimal() +
  ggtitle("Compositional Change of Phytoplankton Community") +
  facet_wrap(~ Day, scales = "free")  # Facet wrap by Day



### NMDS


# Function to calculate NMDS and prepare data for plotting
prepare_nmds_data <- function(day_data) {
  species_data <- day_data[, -(1:2)]  # Assuming the first two columns are Day and Treatment
  bray_curtis_dist <- vegdist(species_data, method = "bray")
  nmds_result <- metaMDS(bray_curtis_dist, k = 2, trymax = 100)
  ordination_df <- as.data.frame(nmds_result$points)
  ordination_df$Treatment <- day_data$Treatment
  return(ordination_df)
}

# List to store ordination data frames for each day
ordination_list <- lapply(unique(dd_bray$Day), function(day) {
  day_data <- dd_bray %>% filter(Day == day)
  ordination_df <- prepare_nmds_data(day_data)
  ordination_df$Day <- day
  return(ordination_df)
})

# Combine all ordination data frames into one
combined_ordination_df <- do.call(rbind, ordination_list)



# Define the layout for 3 rows and 5 columns
num_rows <- 3
num_cols <- 5

# Plot with polygons for each treatment
ggplot(combined_ordination_df, aes(x = MDS1, y = MDS2, fill = Treatment, group = interaction(Treatment, Day))) +
  geom_polygon(alpha = 0.5, color = "black") +
  geom_point(size = 3, aes(color = Treatment)) +
  labs(x = "NMDS Axis 1", y = "NMDS Axis 2", color = "Treatment", fill = "Treatment") +
  theme_bw() +
  ggtitle("Compositional Change of Phytoplankton Community Over Time") +
  facet_wrap(~ Day, nrow = num_rows, ncol = num_cols, scales = "free")
