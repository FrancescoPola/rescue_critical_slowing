### Francesco Polazzo
# 04/03/2022
# Mesocosm experiment Spring-Summer 2021


rm(list = ls())

DIR = "F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/"
setwd(DIR)

### load packages ###
require(tidyverse)
require(patcRecurrentork)
require(vegan)
require(orddom)
require(MuMIn)
require(scales)
require(readxl)
require(Rmisc)
require(nlme)
require(performance)
require(lmodel2)
require(grid)
require(gtable)
require(scales)
require(ggbeeswarm)
require(rr2)
require(codyn)
require(patchwork)
require(PupillometryR)
library(ggpubr)


options(scipen = 999)


#------------#### FUNCTIONAL STABILIY ####---------------------#
# We first check total biomass dynamics over time###

### load biomass data ###
biomass <- read_xlsx(paste0(DIR, "/Data/TrophicNetworkCosm2021_reduced.xlsx"), sheet = "biomass")
names(biomass)


tot.biomass <- biomass[, c(1:6)]
tot.biomass<-as.data.frame(tot.biomass) 
tot.biomass$total.biomass<- rowSums(biomass[, c(7:144)])

### Log10 biomass
tot.biomass$total.bm_log <- log10(tot.biomass$total.biomass+1)
### Biomass dynamics ###

# Plot summary total biomass dynamics 

tot.biomass$Treatment <- factor(tot.biomass$Treatment, levels = c("Control", "Long", "Recurrent"))

se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_bm_dynamics <- tot.biomass %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_biomass = mean((total.biomass/850), na.rm=T), se= se(total.biomass/850)) %>%
  mutate(lower_y = mean_biomass-se, upper_y = mean_biomass+se) %>% 
  ggplot(aes(y=mean_biomass, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.4, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("Biomass (g/L)") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  scale_x_continuous(limits = c(-5,80), breaks = c(-4,10,24,38,52,66,80)) +
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))
tot_bm_dynamics

ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/tot_biomass_dynamics.pdf", tot_bm_dynamics, pagecentre = F, 
       width=16, height=8, pointsize=8)



## Model 2: total biomass, split by day

# We now examine if variation in the estimated effects of the treatments
# differed over the course of the experiment. 
# To do so, we fit mixed models for each day. 


## split the data by day
dd3_bm <- tot.biomass %>% 
  dplyr::select(Day, total.biomass, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>%  
  group_by(Day) %>% 
  nest()



ctrl <- lmeControl(opt='optim');
dd3_bm <- dd3_bm %>% filter(Day  > 0) %>%
  mutate(mod_per_day_bm_trend = map(data, ~ lme(log(total.biomass) ~ Recurrent.treatment  + Long.treatment,
                                                random = ~ 1 | Mesocosm.No,
                                                control = ctrl,
                                                data=.,
                                                na.action=na.omit)))



dd3_bm <- dd3_bm[,1:3]

# extract model coefficients
fixed_per_day <-  plyr::ldply(map(dd3_bm$mod_per_day_bm_trend, ~ fixed.effects(.)))
confid_per_day <-  bind_rows(lapply(1:nrow(dd3_bm),
                                    function(x) tibble::rownames_to_column(
                                      as.data.frame(intervals(dd3_bm$mod_per_day_bm_trend[[x]], which="fixed")$fixed))))

confid_per_day_t <- confid_per_day %>% 
  mutate(day = rep(1:6, each=3)) %>%
  dplyr::select(rowname, lower, upper, day) %>%
  gather(var, value, -rowname, -day) %>% 
  mutate(rowname2 = paste0(rowname, "_", var),
         rowname3 = paste0(rowname, "_", var, "_", day)) %>%
  dplyr::select(day, rowname2, value) %>%
  spread(rowname2, value) 

dd3_bm <- cbind(dd3_bm, fixed_per_day, confid_per_day_t)



plot_dd3 <- dd3_bm[, c(-2,-3)]
gg_Recurrent <-  ggplot(data=plot_dd3, aes(y=Recurrent.treatmentPresent, x=Day))  +
  geom_ribbon(aes(ymin = Recurrent.treatmentPresent_lower, ymax = Recurrent.treatmentPresent_upper), fill="lightgrey") +
  geom_line() + xlab("")+ geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 30, unit = "pt")) +
  theme_classic()+
  ylab("Recurrent\nmain effect")

gg_Warm <- ggplot(data=plot_dd3, aes(y= Long.treatmentPresent, x=Day)) +
  geom_ribbon(aes(ymin = Long.treatmentPresent_lower, ymax = `Long.treatmentPresent_upper`), fill="lightgrey") +
  geom_line()  + xlab("") + geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme_classic()+
  ylab("Long\nmain effect")




p_effect_size <- (tot_bm_dynamics)/(gg_Recurrent + gg_Warm)

ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/p_effect_size_biomass.pdf", p_effect_size, pagecentre = F, 
       width=18, height=12, pointsize=8) #saves g



ctrl <- lmeControl(opt='optim', msMaxIter=1000, msVerbose = F);
mod.tot.bio <- lme(total.bm_log ~ Recurrent.treatment  + Long.treatment,
                 random =  ~ 1|Mesocosm.No,
                 control = ctrl,
                 method = 'REML',
                 data= tot.biomass,
                 na.action=na.omit)



## get summary table
summary.tot.bio <- papeR::prettify(summary(mod.tot.bio))
summary.tot.bio$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.tot.bio)[2] <- c("Estimate")
summary.tot.bio

## Model validation:  
#Residuals

check_model(mod.resis)


## Estimates for the random effects:  


ranef(mod.resis)


#### Visualise model predictions 

df_new <- expand.grid(tot.biomass$Treatment)
df_new$Treatment <- tot.biomass$Treatment
df_new$resistance <- as.numeric(predict(mod.resis))


ggplot() + geom_boxplot(data=df_new, aes(y=resistance, x = Treatment)) +
  geom_point(data=tot.biomass, aes(y=total.bm_log, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Resistance") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 

## Asynchrony
names(biomass)
biomass <- as.data.frame(biomass)
phyto <- biomass[, c(1:95)]
zoo <- biomass[, c(1:6,96:118)]
macro <- biomass[, c(1:6,119:144)]


## Synchrony phyto
long_phyto <- phyto %>% gather(species, biomass, -c(Day, Treatment, Mesocosm.No,  Recurrent.treatment, Long.treatment, Phase)) 
long_phyto[is.na(long_phyto)] <- 0

async_phyto <- long_phyto %>% 
  group_by(Mesocosm.No, Treatment,  Recurrent.treatment, Long.treatment) %>%  
  do(asynchrony_G = synchrony(., "Day", "species", 
                              "biomass", metric = "Gross", replicate.var = NA))

async_phyto$asynchrony <- as.numeric(unlist(async_phyto$asynchrony_G))
async_phyto$organism <- "phyto"

## Synchrony zoo
long_zoo <- zoo %>% gather(species, biomass, -c(Day, Treatment, Mesocosm.No,  Recurrent.treatment, Long.treatment, Phase)) 
long_zoo[is.na(long_zoo)] <- 0

async_zoo <- long_zoo %>% 
  group_by(Mesocosm.No, Treatment,  Recurrent.treatment, Long.treatment) %>%  
  do(asynchrony_G = synchrony(., "Day", "species", 
                              "biomass", metric = "Gross", replicate.var = NA))

async_zoo$asynchrony <- as.numeric(unlist(async_zoo$asynchrony_G))
async_zoo$organism <- "zoo"
# Synchrony macro
long_macro <- macro %>% gather(species, biomass, -c(Day, Treatment, Mesocosm.No,  Recurrent.treatment, Long.treatment, Phase)) 
long_macro[is.na(long_macro)] <- 0

async_macro <- long_macro %>% 
  group_by(Mesocosm.No, Treatment,  Recurrent.treatment, Long.treatment) %>%  
  do(asynchrony_G = synchrony(., "Day", "species", 
                              "biomass", metric = "Gross", replicate.var = NA))

async_macro$asynchrony <- as.numeric(unlist(async_macro$asynchrony_G))
async_macro$organism <- "macro" 
#Merge results
tot_asyn <- full_join(async_phyto, async_zoo)
tot_asyn <- full_join(tot_asyn, async_macro)
tot_asyn <- as.data.frame(tot_asyn)
#### Model results:
summary(aov(asynchrony ~ Recurrent.treatment  + Long.treatment, data = tot_asyn))


functional <- functional %>% dplyr::select(-resistance, -resilience, -recovery, -temp.var,
                                           - q_resistance, -q_resilience, - q_recovery, - q_temp.var) %>%
  dplyr::rename(func.resistance = "converted_resistance", func.recovery = "converted_recovery",
                func.resilience = "converted_resilience", func.temp.var = "converted_temp_var",
                threshold_func = "oes_converted") 
func_asynchrny <- merge(functional, tot_asyn, by = c("Mesocosm.No", "Treatment",
                                                    "Recurrent.treatment", "Long.treatment", 
                                                    "organism"), all = TRUE )

### Plot
ggplot(tot_asyn, aes(Treatment, asynchrony , fill = Treatment)) + geom_point(aes(shape = organism))
p1<-ggplot(func_asynchrny,aes(func.temp.var, asynchrony, colour=Treatment))+
  geom_point( aes(color=Treatment, shape=organism)) +
  theme_bw()+theme(panel.grid = element_blank())+scale_color_viridis_d(option = "magma", end = 0.8, begin = 0.2)+
  # geom_smooth(se=FALSE, method="lm")+
  geom_smooth(color=1, se=TRUE, method="lm")+
  stat_cor(color=1,method = "spearman")+
  theme(axis.title.x = element_text(size=15, family ="sans"),
        axis.title.y = element_text(size=15, family ="sans"),
        axis.text.x = element_text(size=15, face = "bold"),
        axis.text.y = element_text(size=15, face = "bold"))+ylab("Functional")+xlab("Compositional")+
  ggtitle("Resistance")+theme(legend.position = "none")
p1


### Phytoplankton####
### Calculate total biomass per mesoMesocosm.No ###
names(biomass)
tot.biomass.phyto <- biomass[, c(1:6)]
tot.biomass.phyto<-as.data.frame(tot.biomass.phyto) 
tot.biomass.phyto$total.biomass<- rowSums(biomass[, c(7:95)])
tot.biomass.phyto$total.bm_log <- log10(tot.biomass.phyto$total.biomass)




### Resistance ###

# dplyr::select control as reference 
control_bm <- tot.biomass.phyto %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_bm_control = mean(total.bm_log, na.rm = T))
# dplyr::select all other treatments
bm_all_treat <- tot.biomass.phyto %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bm = mean(total.bm_log, na.rm = T))

bm_resist <- merge(bm_all_treat, control_bm, by = "Day")



# resistance defined as the difference between stressed and control divided by the control 
# after the stressors application (i.e. Pennekamp et al 2018)

bm_resist <-  bm_resist %>% 
  mutate(resist= ((bm_resist$mean_bm-bm_resist$mean_bm_control)/bm_resist$mean_bm_control))

# dplyr::select only the days we want to test (10, 24, 38)
target <- c(10, 24, 38)
bm_resist <- bm_resist %>% 
  filter(Day %in% target)


# Here, we take resistance as the first sampling day after the 3 recurrent heat waves.
# So, only values for day 38
bm_resist_38 <-  bm_resist %>% 
  filter(Day == 38)
#remome column "Day"
bm_resist_38 <- bm_resist_38[,-1]
# plot resistance
Y_min<-min(c(bm_resist_38$resist),na.rm = T)-0.001
Y_max<-max(c(bm_resist_38$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to 
# put a line with y = 0 which is the benchmark for control values
plot_resistance_dd <- bm_resist_38 

plot_resistance <-  ggplot(data = plot_resistance_dd,
                           mapping = aes(x = Treatment,
                                         y = resist),
                           group=Treatment,
                           fill = Treatment) +
  ylab("Functional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



### RESILIENCE ###

control_bm <- tot.biomass.phyto %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_bm_control = mean(total.bm_log, na.rm = T))
# dplyr::select all other treatments
bm_all_treat <- tot.biomass.phyto %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bm = mean(total.bm_log, na.rm = T))

bm_resilience <- merge(bm_all_treat, control_bm, by = "Day")

# remove Day -4 
bm_resilience <- bm_resilience%>% 
  filter(Day != -4)


# functional resilience defined as the slope of the log-transformed difference (LRR) between 
# perturbed and control biomass (e.g., Hillebrand et al 2018)

bm_resilience <-  bm_resilience %>% 
  mutate(LRR = log(bm_resilience$mean_bm/bm_resilience$mean_bm_control))

resilience_model <- lmList(LRR ~ Day | Mesocosm.No, data=bm_resilience)
df.coef <- as.data.frame( coef(summary(resilience_model)) )
# visualize resilience

ggplot(data = bm_resilience, aes(Day, LRR, color = Treatment))+
  geom_quasirandom()+
  theme_bw()+
  geom_smooth(method=lm)+
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma")

# now we want to merge the resilience values (n = 12) with the relative treatments' info
# to do that we take only the info need from bm_resilience
# we need: Mesocosm.No ID, Treatment, Recurrent.treatment, Long.treatment 

bm_resilience <- bm_resilience %>% 
  filter(Day == 10) %>% 
  dplyr::select(Day,Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) 


bm_resilience <-  bm_resilience %>% 
  mutate(resilience = df.coef$Estimate.Day)
names(bm_resilience)

plot_resistance_dd <- bm_resilience 

Y_min<-min(c(bm_resilience$resilience),na.rm = T)-0.001
Y_max<-max(c(bm_resilience$resilience),na.rm = T)+0.001
plot_resilience <- ggplot(data = plot_resistance_dd,
                          mapping = aes(x = Treatment,
                                        y = resilience),
                          group=Treatment,
                          fill = Treatment) +
  ylab("Functional Resilience") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

### RECOVERY ###

# Recovery is here defined as the difference between stressed and control divided 
# by the control at the end of the experiment.
# Same as Resistance, but at the end of the experiment

# we need to take only the last day of the experiment ( Day == 80)


recovery_bm <- tot.biomass.phyto%>% 
  filter(Day == 80)

# dplyr::select control as reference temperature
control_bm_rec <- recovery_bm %>% 
  filter(Treatment == "Control") %>%
  dplyr::summarize(mean_bm_control = mean(total.bm_log, na.rm = T))
# dplyr::select all other treatments
bm_all_treat_rec <- recovery_bm %>% 
  group_by( Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bm = mean(total.bm_log, na.rm = T))

bm_recovery <- cbind(bm_all_treat_rec, control_bm_rec)


bm_recovery$recovery <- (bm_recovery$mean_bm-bm_recovery$mean_bm_control)/bm_recovery$mean_bm_control


### Plot recovery
plot_recovery_dd <- bm_recovery 

((12-8.5)/8.5)
Y_min<-min(c(bm_recovery$recovery),na.rm = T)-0.001
Y_max<-max(c(bm_recovery$recovery),na.rm = T)+0.001

plot_recovery <- ggplot(data = plot_recovery_dd,
                        mapping = aes(x = Treatment,
                                      y = recovery),
                        group=Treatment,
                        fill = Treatment) +
  ylab("Functional Recovery") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# temporal variability is calculated by hard coding the coefficient of variation
# |sd/abs(mean)| for each mesoMesocosm.No across all periods

# analysis of temporal stability
temp_stab <- tot.biomass.phyto %>% 
  group_by(Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(inv_community_CV = mean(total.biomass, na.rm=T)/sd(total.biomass, na.rm = T))

# Plot temporal stability 
plot_temp_stab_dd <- temp_stab 


Y_min<-min(c(log10(temp_stab$inv_community_CV)),na.rm = T)-0.001
Y_max<-max(c(log10(temp_stab$inv_community_CV)),na.rm = T)+0.001

plot_temporal_stability <- ggplot(data = plot_temp_stab_dd,
                                  mapping = aes(x = Treatment,
                                                y = log10(inv_community_CV)),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Temporal Stability log(mean/STD)") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

## join resistance and temporal stability data
functional_stab_phyto <- cbind(bm_resist_38[,c(1:4,7)], bm_resilience$resilience, bm_recovery$recovery, temp_stab$inv_community_CV)


functional_stab_phyto <- functional_stab_phyto %>% 
  dplyr::rename(resistance = "resist", resilience = "bm_resilience$resilience",
                recovery = "bm_recovery$recovery", temp.var = "temp_stab$inv_community_CV")

functional_stab_phyto$organism <- "phyto"


plot1_phyto <- cowplot::plot_grid(plot_resistance, plot_recovery, plot_resilience, plot_temporal_stability,
                            nrow = 2, ncol = 2, label = c("a", "b", "c", "d"))



# Resistance was calculated only for Day 10. Let's check also what happened in the other dates in the 
# treatments phase
### Resistance D10, 24, 38 ###

# dplyr::select only the days we want to test (10, 24, 38)
target <- c(10, 24, 38)
bm_resist <- bm_resist %>% 
  filter(Day %in% target)


#  now let's check resistence values for day 24
bm_resist_24 <-  bm_resist %>% 
  filter(Day == 24)
#remome column "Day"
bm_resist_24 <- bm_resist_24[,-1]
# plot resistance
Y_min<-min(c(bm_resist_24$resist),na.rm = T)-0.001
Y_max<-max(c(bm_resist_24$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to 
# put a line with y = 0 which is the benchmark for control values
plot_resistance_dd_24 <- bm_resist_24 %>% 
  filter(!(Treatment %in% c("Control")))

plot_resistance_24 <-  ggplot(data = plot_resistance_dd_24,
                              mapping = aes(x = Treatment,
                                            y = resist),
                              group=Treatment,
                              fill = Treatment) +
  ylab("Functional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

#  now let's check resistence values for day 10
bm_resist_10 <-  bm_resist %>% 
  filter(Day == 10)
#remome column "Day"
bm_resist_10 <- bm_resist_38[,-1]
# plot resistance
Y_min<-min(c(bm_resist_10$resist),na.rm = T)-0.001
Y_max<-max(c(bm_resist_10$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to 
# put a line with y = 0 which is the benchmark for control values
plot_resistance_dd_38 <- bm_resist_10 %>% 
  filter(!(Treatment %in% c("Control")))

plot_resistance_10 <-  ggplot(data = plot_resistance_dd_38,
                              mapping = aes(x = Treatment,
                                            y = resist),
                              group=Treatment,
                              fill = Treatment) +
  ylab("Functional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

plot2 <- cowplot::plot_grid(plot_resistance, plot_resistance_24, plot_resistance_38, 
                            nrow = 1, ncol = 3, labels=c("a", "b", "c"))





### Biomass dynamics phyto ###

# Plot summary total biomass dynamics 
tot.biomass.phyto$Treatment <- factor(tot.biomass.phyto$Treatment, levels = c("Control", "Long", "Recurrent"))


se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_bm_dynamics_phyto <- tot.biomass.phyto %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_biomass = mean((total.biomass/850), na.rm=T), se= se(total.biomass/850)) %>%
  mutate(lower_y = mean_biomass-se, upper_y = mean_biomass+se) %>% 
  ggplot(aes(y=mean_biomass, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.1, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("Biomass (g/L)") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma", guide = FALSE) +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma", guide = FALSE) +
  scale_x_continuous(limits = c(-5,80), breaks = c(-4,10,24,38,52,66,80)) +
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))

ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/tot_bm_dynamics_phyto.pdf", tot_bm_dynamics_phyto, pagecentre = F, 
       width=18, height=11, pointsize=8) #saves g


tot_bm_dynamics_phyto

## Model 2: total biomass, split by day

# We also examined variation in the estimated effects of the treatments
# differed over the course of the experiment. 
# To do so, we fitted mixed models for each day. 


## split the data by day
dd3_bm <- tot.biomass.phyto %>% 
  dplyr::select(Day, total.biomass, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>%  
  group_by(Day) %>% 
  nest()



ctrl <- lmeControl(opt='optim');
dd3_bm <- dd3_bm %>% filter(Day  > 0) %>%
  mutate(mod_per_day_bm_trend = map(data, ~ lme(log(total.biomass) ~ Recurrent.treatment + Long.treatment,
                                                random = ~ 1 | Mesocosm.No,
                                                control = ctrl,
                                                data=.,
                                                na.action=na.omit)))



dd3_bm <- dd3_bm[,1:3]

# extract model coefficients
fixed_per_day <-  plyr::ldply(map(dd3_bm$mod_per_day_bm_trend, ~ fixed.effects(.)))
confid_per_day <-  bind_rows(lapply(1:nrow(dd3_bm),
                                    function(x) tibble::rownames_to_column(
                                      as.data.frame(intervals(dd3_bm$mod_per_day_bm_trend[[x]], which="fixed")$fixed))))

confid_per_day_t <- confid_per_day %>% 
  mutate(day = rep(1:6, each=3)) %>%
  dplyr::select(rowname, lower, upper, day) %>%
  gather(var, value, -rowname, -day) %>% 
  mutate(rowname2 = paste0(rowname, "_", var),
         rowname3 = paste0(rowname, "_", var, "_", day)) %>%
  dplyr::select(day, rowname2, value) %>%
  spread(rowname2, value) 

dd3_bm <- cbind(dd3_bm, fixed_per_day, confid_per_day_t)
names(plot_dd3)



plot_dd3 <- dd3_bm[, c(-2,-3)]
gg_Recurrent <-  ggplot(data=plot_dd3, aes(y=Recurrent.treatmentPresent, x=Day))  +
  geom_ribbon(aes(ymin = Recurrent.treatmentPresent_lower, ymax = Recurrent.treatmentPresent_upper), fill="lightgrey") +
  geom_line() + xlab("")+ geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 30, unit = "pt")) +
  theme_classic()+
  ylab("Recurrent\nmain effect")

gg_Warm <- ggplot(data=plot_dd3, aes(y= Long.treatmentPresent, x=Day)) +
  geom_ribbon(aes(ymin = Long.treatmentPresent_lower, ymax = `Long.treatmentPresent_upper`), fill="lightgrey") +
  geom_line()  + xlab("") + geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme_classic()+
  ylab("Long\nmain effect")




p_effect_size <- tot_bm_dynamics_phyto/(gg_Recurrent+gg_Warm)

ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/p_effect_size_biomass_phyto.pdf", p_effect_size, pagecentre = F, 
       width=15, height=18, pointsize=8) #saves g




#### Zooplankton ####

names(biomass)

tot.biomass.zoo <- biomass[, c(1:6)]
tot.biomass.zoo<-as.data.frame(tot.biomass.zoo) 
tot.biomass.zoo$total.biomass<- rowSums(biomass[, c(96:118)])
tot.biomass.zoo$total.bm_log <- log10(tot.biomass.zoo$total.biomass)




### Resistance ###

# dplyr::select control as reference temperature
control_bm <- tot.biomass.zoo %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_bm_control = mean(total.bm_log, na.rm = T))
# dplyr::select all other treatments
bm_all_treat <- tot.biomass.zoo %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bm = mean(total.bm_log, na.rm = T))

bm_resist <- merge(bm_all_treat, control_bm, by = "Day")



# resistance defined as the difference between stressed and control divided by the control (i.e. Pennekamp et al 2018)

bm_resist <-  bm_resist %>% 
  mutate(resist= ((bm_resist$mean_bm-bm_resist$mean_bm_control)/bm_resist$mean_bm_control))

# dplyr::select only the days we want to test (10, 24, 38)
target <- c(10, 24, 38)
bm_resist <- bm_resist %>% 
  filter(Day %in% target)


# As before, we keep only resistence values for day 38
bm_resist_38 <-  bm_resist %>% 
  filter(Day == 38)
#remome column "Day"
bm_resist_38 <- bm_resist_38[,-1]
# plot resistance
Y_min<-min(c(bm_resist_38$resist),na.rm = T)-0.001
Y_max<-max(c(bm_resist_38$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to 
# put a line with y = 0 which is the benchmark for control values
plot_resistance_dd <- bm_resist_38 

plot_resistance <-  ggplot(data = plot_resistance_dd,
                           mapping = aes(x = Treatment,
                                         y = resist),
                           group=Treatment,
                           fill = Treatment) +
  ylab("Functional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



### RESILIENCE ###

control_bm <- tot.biomass.zoo %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_bm_control = mean(total.bm_log, na.rm = T))
# dplyr::select all other treatments
bm_all_treat <- tot.biomass.zoo %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bm = mean(total.bm_log, na.rm = T))

bm_resilience <- merge(bm_all_treat, control_bm, by = "Day")

# remove Day -4 
bm_resilience <- bm_resilience%>% 
  filter(Day != -4)


# functional resilience defined as the slope of the log-transformed difference (LRR) between 
# perturbed and control biomass (e.g., Hillebrand et al 2018)

bm_resilience <-  bm_resilience %>% 
  mutate(LRR = log(bm_resilience$mean_bm/bm_resilience$mean_bm_control))

resilience_model <- lmList(LRR ~ Day | Mesocosm.No, data=bm_resilience)
df.coef <- as.data.frame( coef(summary(resilience_model)) )
# visualize resilience

ggplot(data = bm_resilience, aes(Day, LRR, color = Treatment))+
  geom_quasirandom()+
  theme_bw()+
  geom_smooth(method=lm)+
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma")

# now we want to merge the resilience values (n = 12) with the relative treatments' info
# to do that we take only the info need from bm_resilience
# we need: Mesocosm.No ID, Treatment, Recurrent.treatment, Long.treatment 

bm_resilience <- bm_resilience %>% 
  filter(Day == 10) %>% 
  dplyr::select(Day,Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) 


bm_resilience <-  bm_resilience %>% 
  mutate(resilience = df.coef$Estimate.Day)
names(bm_resilience)

plot_resistance_dd <- bm_resilience 

Y_min<-min(c(bm_resilience$resilience),na.rm = T)-0.001
Y_max<-max(c(bm_resilience$resilience),na.rm = T)+0.001
plot_resilience <- ggplot(data = plot_resistance_dd,
                          mapping = aes(x = Treatment,
                                        y = resilience),
                          group=Treatment,
                          fill = Treatment) +
  ylab("Functional Resilience") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

### RECOVERY ###

# Recovery is here defined as the difference between stressed and control divided 
# by the control at the end of the experiment.
# Same as Resistance, but at the end of the experiment

# we need to take only the last day of the experiment ( Day == 80)


recovery_bm <- tot.biomass.zoo%>% 
  filter(Day == 80)

# dplyr::select control as reference temperature
control_bm_rec <- recovery_bm %>% 
  filter(Treatment == "Control") %>%
  dplyr::summarize(mean_bm_control = mean(total.bm_log, na.rm = T))
# dplyr::select all other treatments
bm_all_treat_rec <- recovery_bm %>% 
  group_by( Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bm = mean(total.bm_log, na.rm = T))

bm_recovery <- cbind(bm_all_treat_rec, control_bm_rec)


bm_recovery$recovery <- (bm_recovery$mean_bm-bm_recovery$mean_bm_control)/bm_recovery$mean_bm_control


### Plot recovery
plot_recovery_dd <- bm_recovery


Y_min<-min(c(bm_recovery$recovery),na.rm = T)-0.001
Y_max<-max(c(bm_recovery$recovery),na.rm = T)+0.001

plot_recovery <- ggplot(data = plot_recovery_dd,
                        mapping = aes(x = Treatment,
                                      y = recovery),
                        group=Treatment,
                        fill = Treatment) +
  ylab("Functional Recovery") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# temporal variability is calculated by hard coding the coefficient of variation
# |sd/abs(mean)| for each mesoMesocosm.No across all periods

# analysis of temporal stability
temp_stab <- tot.biomass.zoo %>% 
  group_by(Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(inv_community_CV = mean(total.biomass, na.rm=T)/sd(total.biomass, na.rm = T))

# Plot temporal stability 
plot_temp_stab_dd <- temp_stab 


Y_min<-min(c(log10(temp_stab$inv_community_CV)),na.rm = T)-0.001
Y_max<-max(c(log10(temp_stab$inv_community_CV)),na.rm = T)+0.001

plot_temporal_stability <- ggplot(data = plot_temp_stab_dd,
                                  mapping = aes(x = Treatment,
                                                y = log10(inv_community_CV)),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Temporal Stability log(mean/STD)") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

## join resistance and temporal stability data
functional_stab_zoo <- cbind(bm_resist_38[,c(1:4,7)], bm_resilience$resilience, bm_recovery$recovery, temp_stab$inv_community_CV)


functional_stab_zoo <- functional_stab_zoo %>% 
  dplyr::rename(resistance = "resist", resilience = "bm_resilience$resilience",
                recovery = "bm_recovery$recovery", temp.var = "temp_stab$inv_community_CV")

functional_stab_zoo$organism <- "zoo"


plot1_zoo <- cowplot::plot_grid(plot_resistance, plot_recovery, plot_resilience, plot_temporal_stability,
                                  nrow = 2, ncol = 2, label = c("a", "b", "c", "d"))



# Resistance was calculated only for Day 10. Let's check also what happened in the other dates in the 
# treatments phase
### Resistance D10, 24, 38 ###

# dplyr::select only the days we want to test (10, 24, 38)
target <- c(10, 24, 38)
bm_resist <- bm_resist %>% 
  filter(Day %in% target)


#  now let's check resistence values for day 24
bm_resist_24 <-  bm_resist %>% 
  filter(Day == 24)
#remome column "Day"
bm_resist_24 <- bm_resist_24[,-1]
# plot resistance
Y_min<-min(c(bm_resist_24$resist),na.rm = T)-0.001
Y_max<-max(c(bm_resist_24$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to
# put a line with y = 0 which is the benchmark for control values
plot_resistance_dd_24 <- bm_resist_24 %>% 
  filter(!(Treatment %in% c("Control")))

plot_resistance_24 <-  ggplot(data = plot_resistance_dd_24,
                              mapping = aes(x = Treatment,
                                            y = resist),
                              group=Treatment,
                              fill = Treatment) +
  ylab("Functional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

#  now let's check resistence values for day 10
bm_resist_10 <-  bm_resist %>% 
  filter(Day == 10)
#remome column "Day"
bm_resist_10 <- bm_resist_10[,-1]
# plot resistance
Y_min<-min(c(bm_resist_10$resist),na.rm = T)-0.001
Y_max<-max(c(bm_resist_10$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to
# put a line with y = 0 which is the benchmark for control values
plot_resistance_dd_10 <- bm_resist_10 %>% 
  filter(!(Treatment %in% c("Control")))

plot_resistance_10 <-  ggplot(data = plot_resistance_dd_10,
                              mapping = aes(x = Treatment,
                                            y = resist),
                              group=Treatment,
                              fill = Treatment) +
  ylab("Functional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

plot2 <- cowplot::plot_grid(plot_resistance_10, plot_resistance_24, plot_resistance, 
                            nrow = 1, ncol = 3, labels=c("a", "b", "c"))





### Biomass dynamics zoo ###

# Plot summary total biomass dynamics 
tot.biomass.zoo$Treatment <- factor(tot.biomass.zoo$Treatment, levels = c("Control", "Long", "Recurrent"))


se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_bm_dynamics_zoo <- tot.biomass.zoo %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_biomass = mean((total.biomass/850), na.rm=T), se= se(total.biomass/850)) %>%
  mutate(lower_y = mean_biomass-se, upper_y = mean_biomass+se) %>% 
  ggplot(aes(y=mean_biomass, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.1, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("Biomass (g/L)") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma", guide = FALSE) +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma", guide = FALSE) +
  scale_x_continuous(limits = c(-5,80), breaks = c(-4,10,24,38,52,66,80)) +
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))

ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/tot_bm_dynamics_zoo.pdf", tot_bm_dynamics_zoo, pagecentre = F, 
       width=18, height=11, pointsize=8) #saves g


## Model 2: total biomass, split by day

# We also examined variation in the estimated effects of the treatments
# differed over the course of the experiment. 
# To do so, we fitted mixed models for each day. 


## split the data by day
dd3_bm <- tot.biomass.zoo %>% 
  dplyr::select(Day, total.biomass, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>%  
  group_by(Day) %>% 
  nest()



ctrl <- lmeControl(opt='optim');
dd3_bm <- dd3_bm %>% filter(Day  > 0) %>%
  mutate(mod_per_day_bm_trend = map(data, ~ lme(log(total.biomass) ~ Recurrent.treatment + Long.treatment,
                                                random = ~ 1 | Mesocosm.No,
                                                control = ctrl,
                                                data=.,
                                                na.action=na.omit)))



dd3_bm <- dd3_bm[,1:3]

# extract model coefficients
fixed_per_day <-  plyr::ldply(map(dd3_bm$mod_per_day_bm_trend, ~ fixed.effects(.)))
confid_per_day <-  bind_rows(lapply(1:nrow(dd3_bm),
                                    function(x) tibble::rownames_to_column(
                                      as.data.frame(intervals(dd3_bm$mod_per_day_bm_trend[[x]], which="fixed")$fixed))))

confid_per_day_t <- confid_per_day %>% 
  mutate(day = rep(1:6, each=3)) %>%
  dplyr::select(rowname, lower, upper, day) %>%
  gather(var, value, -rowname, -day) %>% 
  mutate(rowname2 = paste0(rowname, "_", var),
         rowname3 = paste0(rowname, "_", var, "_", day)) %>%
  dplyr::select(day, rowname2, value) %>%
  spread(rowname2, value) 

dd3_bm <- cbind(dd3_bm, fixed_per_day, confid_per_day_t)
names(plot_dd3)



plot_dd3 <- dd3_bm[, c(-2,-3)]
gg_Recurrent <-  ggplot(data=plot_dd3, aes(y=Recurrent.treatmentPresent, x=Day))  +
  geom_ribbon(aes(ymin = Recurrent.treatmentPresent_lower, ymax = Recurrent.treatmentPresent_upper), fill="lightgrey") +
  geom_line() + xlab("")+ geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 30, unit = "pt")) +
  theme_classic()+
  ylab("Recurrent\nmain effect")

gg_Warm <- ggplot(data=plot_dd3, aes(y= Long.treatmentPresent, x=Day)) +
  geom_ribbon(aes(ymin = Long.treatmentPresent_lower, ymax = `Long.treatmentPresent_upper`), fill="lightgrey") +
  geom_line()  + xlab("") + geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme_classic()+
  ylab("Long\nmain effect")




p_effect_size <- tot_bm_dynamics_zoo/(gg_Recurrent + gg_Warm)

ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/p_effect_size_biomass_zoo.pdf", p_effect_size, pagecentre = F, 
       width=15, height=18, pointsize=8) #saves g







#### macroinvertebrate ####

names(biomass)

tot.biomass.macro <- biomass[, c(1:6)]
tot.biomass.macro<-as.data.frame(tot.biomass.macro) 
tot.biomass.macro$total.biomass<- rowSums(biomass[, c(119:144)])
tot.biomass.macro$total.bm_log <- log10(tot.biomass.macro$total.biomass)


### Resistance ###

# dplyr::select control as reference temperature
control_bm <- tot.biomass.macro %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_bm_control = mean(total.bm_log, na.rm = T))
# dplyr::select all other treatments
bm_all_treat <- tot.biomass.macro %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bm = mean(total.bm_log, na.rm = T))

bm_resist <- merge(bm_all_treat, control_bm, by = "Day")



# resistance defined as the difference between stressed and control divided by the control
# for day 38 (end of treatment phase) (i.e. Pennekamp et al 2018)

bm_resist <-  bm_resist %>% 
  mutate(resist= ((bm_resist$mean_bm-bm_resist$mean_bm_control)/bm_resist$mean_bm_control))

# dplyr::select only the days we want to test (10, 24, 38)
target <- c(10, 24, 38)
bm_resist <- bm_resist %>% 
  filter(Day %in% target)


# As before, we only keep only resistence values for day 38
bm_resist_38 <-  bm_resist %>% 
  filter(Day == 38)
#remome column "Day"
bm_resist_38 <- bm_resist_38[,-1]
# plot resistance
Y_min<-min(c(bm_resist_38$resist),na.rm = T)-0.001
Y_max<-max(c(bm_resist_38$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to 
# put a line with y = 0 which is the benchmark for control values
plot_resistance_dd <- bm_resist_38 

plot_resistance <-  ggplot(data = plot_resistance_dd,
                           mapping = aes(x = Treatment,
                                         y = resist),
                           group=Treatment,
                           fill = Treatment) +
  ylab("Functional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



### RESILIENCE ###

control_bm <- tot.biomass.macro %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_bm_control = mean(total.bm_log, na.rm = T))
# dplyr::select all other treatments
bm_all_treat <- tot.biomass.macro %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bm = mean(total.bm_log, na.rm = T))

bm_resilience <- merge(bm_all_treat, control_bm, by = "Day")

# remove Day -4 
bm_resilience <- bm_resilience%>% 
  filter(Day != -4)


# functional resilience defined as the slope of the log-transformed difference (LRR) between 
# perturbed and control biomass (e.g., Hillebrand et al 2018)

bm_resilience <-  bm_resilience %>% 
  mutate(LRR = log((bm_resilience$mean_bm/bm_resilience$mean_bm_control)+1))

resilience_model <- lmList(LRR ~ Day | Mesocosm.No, data=bm_resilience)
df.coef <- as.data.frame( coef(summary(resilience_model)) )
# visualize resilience

ggplot(data = bm_resilience, aes(Day, LRR, color = Treatment))+
  geom_quasirandom()+
  theme_bw()+
  geom_smooth(method=lm)+
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma")

# now we want to merge the resilience values (n = 12) with the relative treatments' info
# to do that we take only the info need from bm_resilience
# we need: Mesocosm.No ID, Treatment, Recurrent.treatment, Long.treatment 

bm_resilience <- bm_resilience %>% 
  filter(Day == 10) %>% 
  dplyr::select(Day,Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) 


bm_resilience <-  bm_resilience %>% 
  mutate(resilience = df.coef$Estimate.Day)
names(bm_resilience)

plot_resistance_dd <- bm_resilience 

Y_min<-min(c(bm_resilience$resilience),na.rm = T)-0.001
Y_max<-max(c(bm_resilience$resilience),na.rm = T)+0.001
plot_resilience <- ggplot(data = plot_resistance_dd,
                          mapping = aes(x = Treatment,
                                        y = resilience),
                          group=Treatment,
                          fill = Treatment) +
  ylab("Functional Resilience") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

### RECOVERY ###

# Recovery is here defined as the difference between stressed and control divided 
# by the control at the end of the experiment.
# Same as Resistance, but at the end of the experiment

# we need to take only the last day of the experiment ( Day == 80)

recovery_bm <- tot.biomass.macro%>% 
  filter(Day == 80)

# dplyr::select control as reference temperature
control_bm_rec <- recovery_bm %>% 
  filter(Treatment == "Control") %>%
  dplyr::summarize(mean_bm_control = mean(total.bm_log, na.rm = T))
# dplyr::select all other treatments
bm_all_treat_rec <- recovery_bm %>% 
  group_by( Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bm = mean(total.bm_log, na.rm = T))

bm_recovery <- cbind(bm_all_treat_rec, control_bm_rec)


bm_recovery$recovery <- (bm_recovery$mean_bm-bm_recovery$mean_bm_control)/bm_recovery$mean_bm_control


### Plot recovery
plot_recovery_dd <- bm_recovery 


Y_min<-min(c(bm_recovery$recovery),na.rm = T)-0.001
Y_max<-max(c(bm_recovery$recovery),na.rm = T)+0.001

plot_recovery <- ggplot(data = plot_recovery_dd,
                        mapping = aes(x = Treatment,
                                      y = recovery),
                        group=Treatment,
                        fill = Treatment) +
  ylab("Functional Recovery") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# temporal variability is calculated by hard coding the coefficient of variation
# |sd/abs(mean)| for each mesoMesocosm.No across all periods

# analysis of temporal stability
temp_stab <- tot.biomass.macro %>% 
  group_by(Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(inv_community_CV = mean(total.biomass, na.rm=T)/sd(total.biomass, na.rm = T))

# Plot temporal stability 
plot_temp_stab_dd <- temp_stab 

Y_min<-min(c(log10(temp_stab$inv_community_CV)),na.rm = T)-0.001
Y_max<-max(c(log10(temp_stab$inv_community_CV)),na.rm = T)+0.001

plot_temporal_stability <- ggplot(data = plot_temp_stab_dd,
                                  mapping = aes(x = Treatment,
                                                y = log10(inv_community_CV)),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Temporal Stability log(mean/STD)") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

## join resistance and temporal stability data
functional_stab_macro <- cbind(bm_resist_38[,c(1:4,7)], bm_resilience$resilience, bm_recovery$recovery, temp_stab$inv_community_CV)


functional_stab_macro <- functional_stab_macro %>% 
  dplyr::rename(resistance = "resist", resilience = "bm_resilience$resilience",
                recovery = "bm_recovery$recovery", temp.var = "temp_stab$inv_community_CV")

functional_stab_macro$organism <- "macro"


plot1_macro <- cowplot::plot_grid(plot_resistance, plot_recovery, plot_resilience, plot_temporal_stability,
                                nrow = 2, ncol = 2, label = c("a", "b", "c", "d"))



# Resistance was calculated only for Day 10. Let's check also what happened in the other dates in the 
# treatments phase
### Resistance D10, 24, 38 ###

# dplyr::select only the days we want to test (10, 24, 38)
target <- c(10, 24, 38)
bm_resist <- bm_resist %>% 
  filter(Day %in% target)


#  now let's check resistence values for day 24
bm_resist_24 <-  bm_resist %>% 
  filter(Day == 24)
#remome column "Day"
bm_resist_24 <- bm_resist_24[,-1]
# plot resistance
Y_min<-min(c(bm_resist_24$resist),na.rm = T)-0.001
Y_max<-max(c(bm_resist_24$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to 
# put a line with y = 0 which is the benchmark for control values
plot_resistance_dd_24 <- bm_resist_24 %>% 
  filter(!(Treatment %in% c("Control")))

plot_resistance_24 <-  ggplot(data = plot_resistance_dd_24,
                              mapping = aes(x = Treatment,
                                            y = resist),
                              group=Treatment,
                              fill = Treatment) +
  ylab("Functional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

#  now let's check resistence values for day 10
bm_resist_10 <-  bm_resist %>% 
  filter(Day == 10)
#remome column "Day"
bm_resist_10 <- bm_resist_10[,-1]
# plot resistance
Y_min<-min(c(bm_resist_10$resist),na.rm = T)-0.001
Y_max<-max(c(bm_resist_10$resist),na.rm = T)+0.001

# Same for day 10
plot_resistance_dd_10 <- bm_resist_10 %>% 
  filter(!(Treatment %in% c("Control")))

plot_resistance_10 <-  ggplot(data = plot_resistance_dd_10,
                              mapping = aes(x = Treatment,
                                            y = resist),
                              group=Treatment,
                              fill = Treatment) +
  ylab("Functional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

plot2 <- cowplot::plot_grid(plot_resistance_10, plot_resistance_24, plot_resistance, 
                            nrow = 1, ncol = 3, labels=c("a", "b", "c"))





### Biomass dynamics macro ###

# Plot summary total biomass dynamics 
tot.biomass.macro$Treatment <- factor(tot.biomass.macro$Treatment, levels = c("Control", "Long", "Recurrent"))


se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_bm_dynamics_macro <- tot.biomass.macro %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_biomass = mean((total.biomass/850), na.rm=T), se= se(total.biomass/850)) %>%
  mutate(lower_y = mean_biomass-se, upper_y = mean_biomass+se) %>% 
  ggplot(aes(y=mean_biomass, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.1, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("Biomass (g/L)") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma", guide = FALSE) +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma", guide = FALSE) +
  scale_x_continuous(limits = c(-5,80), breaks = c(-4,10,24,38,52,66,80)) +
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))

ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/tot_bm_dynamics_macro.pdf", tot_bm_dynamics_macro, pagecentre = F, 
       width=18, height=11, pointsize=8) #saves g




## Model 2: total biomass, split by day

# We also examined variation in the estimated effects of the treatments
# and insecticide differed over the course of the experiment. 
# To do so, we fitted mixed models for each day. 


## split the data by day
dd3_bm <- tot.biomass.macro %>% 
  dplyr::select(Day, total.biomass, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>%  
  group_by(Day) %>% 
  nest()



ctrl <- lmeControl(opt='optim');
dd3_bm <- dd3_bm %>% filter(Day  > 0) %>%
  mutate(mod_per_day_bm_trend = map(data, ~ lme(log(total.biomass) ~ Recurrent.treatment  + Long.treatment,
                                                random = ~ 1 | Mesocosm.No,
                                                control = ctrl,
                                                data=.,
                                                na.action=na.omit)))



dd3_bm <- dd3_bm[,1:3]
# extract model coefficients
fixed_per_day <-  plyr::ldply(map(dd3_bm$mod_per_day_bm_trend, ~ fixed.effects(.)))
confid_per_day <-  bind_rows(lapply(1:nrow(dd3_bm),
                                    function(x) tibble::rownames_to_column(
                                      as.data.frame(intervals(dd3_bm$mod_per_day_bm_trend[[x]], which="fixed")$fixed))))

confid_per_day_t <- confid_per_day %>% 
  mutate(day = rep(1:6, each=3)) %>%
  dplyr::select(rowname, lower, upper, day) %>%
  gather(var, value, -rowname, -day) %>% 
  mutate(rowname2 = paste0(rowname, "_", var),
         rowname3 = paste0(rowname, "_", var, "_", day)) %>%
  dplyr::select(day, rowname2, value) %>%
  spread(rowname2, value) 

dd3_bm <- cbind(dd3_bm, fixed_per_day, confid_per_day_t)
names(plot_dd3)



plot_dd3 <- dd3_bm[, c(-2,-3)]
gg_Recurrent <-  ggplot(data=plot_dd3, aes(y=Recurrent.treatmentPresent, x=Day))  +
  geom_ribbon(aes(ymin = Recurrent.treatmentPresent_lower, ymax = Recurrent.treatmentPresent_upper), fill="lightgrey") +
  geom_line() + xlab("")+ geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 30, unit = "pt")) +
  theme_classic()+
  ylab("Recurrent\nmain effect")

gg_Warm <- ggplot(data=plot_dd3, aes(y= Long.treatmentPresent, x=Day)) +
  geom_ribbon(aes(ymin = Long.treatmentPresent_lower, ymax = `Long.treatmentPresent_upper`), fill="lightgrey") +
  geom_line()  + xlab("") + geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme_classic()+
  ylab("Long\nmain effect")



p_effect_size <- tot_bm_dynamics_macro/(gg_Recurrent + gg_Warm)

ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/p_effect_size_biomass_macro.pdf", p_effect_size, pagecentre = F, 
       width=15, height=18, pointsize=8) #saves g




tot_bm_dynamics/(tot_bm_dynamics_phyto+tot_bm_dynamics_zoo+tot_bm_dynamics_macro)


### multistability calculation Scaling and ###
# First, we scale single stability components to homogenize the data between the different organism groups
# (not doing so does not change the results of the analysis though). We use these scaled values to assess the effects of the 
# the experimental Heat Waves on the different stability components. We do that through LMM with Long HW and Recurrent HWs 
# as fixed effects and mesocosm number and organism group as random effects.

### Phyto


functional_stab_phyto <- functional_stab_phyto %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience =scale(resilience),
         converted_temp_var = scale(temp.var))



### ZOo


functional_stab_zoo <- functional_stab_zoo %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience =scale(resilience),
         converted_temp_var = scale(temp.var))



### Macro

functional_stab_macro <- functional_stab_macro %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience = scale(resilience),
         converted_temp_var = scale(temp.var))

### Merge different stability df #
functional_stab_phyto$organism <- "phyto"
functional_stab_zoo$organism <- "zoo"
functional_stab_macro$organism <- "macro"


tot_stab_df <- full_join(functional_stab_phyto, functional_stab_zoo)
tot_stab_df <- full_join(tot_stab_df, functional_stab_macro)

tot_stab_df <- tot_stab_df%>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience = scale(resilience),
         converted_temp_var = scale(temp.var))



### Resistance
Y_min<-min(c(tot_stab_df$resistance),na.rm = T)-0.001
Y_max<-max(c(tot_stab_df$resistance),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to 
# put a line with y = 0 which is the benchmark for control values

plot_resistance <-  ggplot(data = tot_stab_df,
                           mapping = aes(x = Treatment,
                                         y = resistance),
                           group=Treatment,
                           fill = Treatment) +
  ylab("Functional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism),position = position_jitter(width = 0.1),
             size = 2) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

plot_resistance
ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/Legend_organism_boxplots.pdf", plot_resistance, pagecentre = F, 
       width=15, height=18, pointsize=8)
### RESILIENCE ###


Y_min<-min(c(tot_stab_df$resilience),na.rm = T)-0.001
Y_max<-max(c(tot_stab_df$resilience),na.rm = T)+0.001
plot_resilience <- ggplot(data = tot_stab_df,
                          mapping = aes(x = Treatment,
                                        y = resilience),
                          group=Treatment,
                          fill = Treatment) +
  ylab("Functional Resilience") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism),position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

### RECOVERY ###

Y_min<-min(c(tot_stab_df$recovery),na.rm = T)-0.001
Y_max<-max(c(tot_stab_df$recovery),na.rm = T)+0.001

plot_recovery <- ggplot(data = tot_stab_df,
                        mapping = aes(x = Treatment,
                                      y = recovery),
                        group=Treatment,
                        fill = Treatment) +
  ylab("Functional Recovery") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism),position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) +
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# temporal variability is calculated by hard coding the coefficient of variation
# |sd/abs(mean)| for each mesoMesocosm.No across all periods

Y_min<-min((tot_stab_df$temp.var),na.rm = T)-0.001
Y_max<-max((tot_stab_df$temp.var),na.rm = T)+0.001

plot_temporal_stability <- ggplot(data = tot_stab_df,
                                  mapping = aes(x = Treatment,
                                                y = temp.var),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Temporal Stability log(mean/STD)") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes( shape = organism),position = position_jitter(width = 0.1), alpha = 0.8,
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) +
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



plot1_tot_function <- cowplot::plot_grid(plot_resistance, plot_recovery, plot_resilience, plot_temporal_stability,
                                  nrow = 2, ncol = 2, label = c("a", "b", "c", "d"))

plot1_tot_function
ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/Functional_Stability_response.pdf", plot1_tot_function, pagecentre = F, 
       width=15, height=18, pointsize=8) #saves g

##-- Resistance--##


ctrl <- lmeControl(opt='optim', msMaxIter=1000, msVerbose = F);
mod.resis <- lme(resistance ~ Recurrent.treatment  + Long.treatment,
                 random = list(organism = ~ 1, Mesocosm.No = ~ 1),
                 weights = varIdent(form = ~ 1 | organism),
                 control = ctrl,
                 method = 'REML',
                 data= tot_stab_df,
                 na.action=na.omit)



## get summary table
summary.resis <- papeR::prettify(summary(mod.resis))
summary.resis$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.resis)[2] <- c("Estimate")
summary.resis

## Model validation:  
#Residuals

check_model(mod.resis)


## Estimates for the random effects:  


ranef(mod.resis)


#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$resistance <- as.numeric(predict(mod.resis))


ggplot() + geom_boxplot(data=df_new, aes(y=resistance, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=resistance, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Resistance") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 
## Black boxplot are predicted, colored dots are measured

##-- Recovery--##
#hist(stab_df$resist) # assess normality (not run)

mod.recovery <- lme(recovery ~ Recurrent.treatment  + Long.treatment,
                    random = list(organism = ~ 1, Mesocosm.No = ~ 1),
                    weights = varIdent(form = ~ 1 | organism),
                    control = ctrl,
                    method = 'REML',
                    data= tot_stab_df,
                    na.action=na.omit)

summary.recovery <- papeR::prettify(summary(mod.recovery))
summary.recovery$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.recovery)[2] <- c("Estimate")
summary.recovery

## Model validation:  
#Residuals

check_model(mod.recovery)


## Estimates for the random effects:  


ranef(mod.recovery)

#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$recovery <- as.numeric(predict(mod.recovery))


ggplot() + geom_boxplot(data=df_new, aes(y=recovery, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=converted_recovery, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Recovery") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 

##-- Resilience--##

mod.resilience <- lme(resilience ~ Recurrent.treatment + Long.treatment,
                      random = list(organism = ~ 1, Mesocosm.No = ~ 1),
                      weights = varIdent(form = ~ 1 | organism),
                      control = ctrl,
                      method = 'REML',
                      data= tot_stab_df,
                      na.action=na.omit)

summary.resilience <- papeR::prettify(summary(mod.resilience))
summary.resilience$` ` <- c("Intercept", "Recurrent",  "Long")
colnames(summary.resilience)[2] <- c("Estimate")
summary.resilience

## Model validation:  
#Residuals

check_model(mod.resilience)


## Estimates for the random effects:  


ranef(mod.resilience)

#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$resilience<- as.numeric(predict(mod.resilience))


ggplot() + geom_boxplot(data=df_new, aes(y=resilience, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=converted_resilience, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Resilience") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 

##-- Temporal Variability --##
#hist(stab_df$resist) # assess normality (not run)

mod.temp.var <- lme(temp.var ~ Recurrent.treatment  + Long.treatment,
                    random = list(organism = ~ 1, Mesocosm.No = ~ 1),
                    weights = varIdent(form = ~ 1 | organism),
                    control = ctrl,
                    method = 'REML',
                    data= tot_stab_df,
                    na.action=na.omit)

summary.temp.var <- papeR::prettify(summary(mod.temp.var))
summary.temp.var$` ` <- c("Intercept", "Recurrent","Long")
colnames(summary.temp.var)[2] <- c("Estimate")
summary.temp.var
## Model validation:  
#Residuals

check_model(mod.temp.var)


## Estimates for the random effects:  


ranef(mod.temp.var)

#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$temp.var<- as.numeric(predict(mod.temp.var))


ggplot() + geom_boxplot(data=df_new, aes(y=temp.var, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=converted_temp_var, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Temporal Variability") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 




# Next, we follow Pennekamp et al 2018, who calculated overall ecosystem stability as follows (here we apply the same concept for functional, compositional and fluxes stability):
# overall ecosystem stability requires that values of an ecosystem function (e.g. biomass production) 
# or of a stability component (e.g. resistance to temperature) be converted into a common currency. 
# Mathematical functions used for these conversions include linear and threshold (step) functions. 
# The generalised logistic function (also known as the Richard's function) 
# is flexible enough to give a wide range of conversion functions. 
# If $x$ is the measured variable, and $y$ is the converted variable, the generalised logistic function is:

$Y = A + \frac{K-A}{(C + Qe^{-Bx})^{1/v}}$

* $A$ is the lower asymptote.
* $K$ is the upper asymptote.
* $B$ is the gradient.
* $v$ affects the symmetry, and also the value of $y(0)$.
* $Q$ affects the value of $y(0)$.
* $C$ is typically set to 1.
* $x$ is a variable, here the value of the measured ecosystem function or stability component.

# Overall ecosystem stability is then the sum of the standardised and converted stability components 
# $OES = c(z(res)) + z(rec)) + z(resil)) + c(z(t))$, where $rec$ is the measured resistance, 
# $rec$ is the measured recovery, $resil$ is the measured resilience,$t$ is the measured temporal stability, 
# the function $z()$ subtracts the mean and divides by the standard deviation, and $c()$ is the generalised 
# logistic function. The parameters of $c()$ were $A=$ `r A`,  $K=$ `r K`, $B=$ `r B`, $v=$ `r v`, $C=$ `r C`;
# these parameter values were 
# chosen to produce converted stability measures that span the range $A$ to $K$ and to have a relatively 
# threshold-like change from $A$ to $K$. Standardisation prior to summation emphasises that the units of 
# converted stability measures here are arbitrary (though generally need not be). Standardisation also implies 
# equal weights for different stability compononents, while [Gamfeldt et al (2008)]
# (http://onlinelibrary.wiley.com/doi/10.1890/06-2091.1/full) point out that weighting of functions 
# needs to be considered. Differential weightings, if desired and justified, can be incorporated by varying the
# parameters of the generalised logistic (or some other) conversion function. 
# How we calculated the values of Q deserves particular attention. Q is the value of the intercept of the conversion function,
# which is equivalent to the threshold value when calculating ecosystem multifunctionality with the threshold approach (Gamfeldt, L. & Roger, F. Revisiting the biodiversity-ecosystem multifunctionality
# relationship. Nat. Ecol. Evol. 1, 0168 (2017).
# For each of the four stability components, we took the highest value among the measured stability values. 
# Next, we dplyr::selected a multifunctionality threshold (Q value) of 0.5 for each stability component (50% of the  maximum calculated stability values).
# Note that we do that for the each organism group in isolation.
# The rationale for choosing a 50% treshold level is that Gamfeldt et al. (2008) made reasonable observations assuming a 50% functioning threshold 
# to study the effects of species loss on multifunctionality.Here, we do not study the direct effects of species removal, but
# those of extreme events on overall functional, compositional and fluxes stability. Though, we belive the measurement can be applied nicely also to this kind of
# climatic disturbances, which can indeed influence stability by reducing the overall number of species



##### threshold method

gen_log <- function(A=NULL, K=NULL, C = NULL, Q=NULL, v= NULL, B=NULL, x=NULL)
  A + (K - A) / (C + Q * exp(-B*x)) ^ 1/v 

A <- -1
K <- 1
B <- 5
v <- 1
C <- 1


Q_resist_phyto <- max(functional_stab_phyto$resistance)*0.5
Q_resilience_phyto <- max(functional_stab_phyto$resilience)*0.5
Q_recovery_phyto <- max(functional_stab_phyto$recovery)*0.5
Q_temp_var_phyto <- max(functional_stab_phyto$temp.var)*0.5


tot_stab_phyto <- functional_stab_phyto %>% mutate(
  q_resistance = gen_log(A=A, K=K, B=B, v=v, Q=Q_resist_phyto, C=C, x=scale(resistance)),
  q_recovery = gen_log(A=A, K=K, B=B, v=v, Q=Q_recovery_phyto, C=C, x=scale(recovery)),
  q_resilience = gen_log(A=A, K=K, B=B, v=v, Q=Q_resilience_phyto, C=C, x=scale(resilience)),
  q_temp.var = gen_log(A=A, K=K, B=B, v=v, Q=Q_temp_var_phyto, C=C, x=scale(temp.var)),
  oes_converted = q_resistance + q_recovery +q_resilience + q_temp.var)



### ZOo

Q_resist_zoo <- max(functional_stab_zoo$resistance)*0.5
Q_resilience_zoo <- max(functional_stab_zoo$resilience)*0.5
Q_recovery_zoo <- max(functional_stab_zoo$recovery)*0.5
Q_temp_var_zoo <- max(functional_stab_zoo$temp.var)*0.5


tot_stab_zoo <- functional_stab_zoo %>% mutate(
  q_resistance = gen_log(A=A, K=K, B=B, v=v, Q=Q_resist_zoo, C=C, x=scale(resistance)),
  q_recovery = gen_log(A=A, K=K, B=B, v=v, Q=Q_recovery_zoo, C=C, x=scale(recovery)),
  q_resilience = gen_log(A=A, K=K, B=B, v=v, Q=Q_resilience_zoo, C=C, x=scale(resilience)),
  q_temp.var = gen_log(A=A, K=K, B=B, v=v, Q=Q_temp_var_zoo, C=C, x=scale(temp.var)),
  oes_converted = q_resistance + q_recovery +q_resilience + q_temp.var)



### Macro

Q_resist_macro <- max(functional_stab_macro$resistance)*0.5
Q_resilience_macro <- max(functional_stab_macro$resilience)*0.5
Q_recovery_macro <- max(functional_stab_macro$recovery)*0.5
Q_temp_var_macro <- max(functional_stab_macro$temp.var)*0.5


tot_stab_macro <- functional_stab_macro %>% mutate(
  q_resistance = gen_log(A=A, K=K, B=B, v=v, Q=Q_resist_macro, C=C, x=scale(resistance)),
  q_recovery = gen_log(A=A, K=K, B=B, v=v, Q=Q_recovery_macro, C=C, x=scale(recovery)),
  q_resilience = gen_log(A=A, K=K, B=B, v=v, Q=Q_resilience_macro, C=C, x=scale(resilience)),
  q_temp.var = gen_log(A=A, K=K, B=B, v=v, Q=Q_temp_var_macro, C=C, x=scale(temp.var)),
  oes_converted = q_resistance + q_recovery +q_resilience + q_temp.var)

### Merge different stability df #

tot_stab_df <- full_join(tot_stab_phyto, tot_stab_zoo)
tot_stab_df <- full_join(tot_stab_df, tot_stab_macro)


## Plotting OFS

Y_min<-min((tot_stab_df$oes_converted),na.rm = T)-0.001
Y_max<-max((tot_stab_df$oes_converted),na.rm = T)+0.001

plot_OFS <- ggplot(data = tot_stab_df,
                                  mapping = aes(x = Treatment,
                                                y = oes_converted),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Overall Functional Stability") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

# LMM OFS
mod.OFS <- lme(oes_converted ~ Recurrent.treatment + Long.treatment,
               random = list(organism = ~ 1, Mesocosm.No = ~ 1),
               weights = varIdent(form = ~ 1 | organism),
               control = ctrl,
               method = 'REML',
               data= tot_stab_df,
               na.action=na.omit)



summary.OFS <- papeR::prettify(summary(mod.OFS))
summary.OFS$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.OFS)[2] <- c("Estimate")
summary.OFS
## Model validation:  
#Residuals

check_model(mod.OFS)


## Estimates for the random effects:  


ranef(mod.OFS)

#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$OFS<- as.numeric(predict(mod.OFS))


ggplot() + geom_boxplot(data=df_new, aes(y=OFS, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=oes_converted, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Overall Functional Stability") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 




### Averaging method 

functional_stab_phyto_scaled <- functional_stab_phyto %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience =scale(resilience),
         converted_temp_var = scale(temp.var))



### ZOo


functional_stab_zoo_scaled <- functional_stab_zoo %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience =scale(resilience),
         converted_temp_var = scale(temp.var))



### Macro

functional_stab_macro_scaled <- functional_stab_macro %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience = scale(resilience),
         converted_temp_var = scale(temp.var))

### Merge different stability df #



tot_stab_df_scaled <- full_join(functional_stab_phyto_scaled, functional_stab_zoo_scaled)
tot_stab_df_scaled <- full_join(tot_stab_df_scaled, functional_stab_macro_scaled)

av <- tot_stab_df_scaled %>% mutate(av_OFS = converted_resistance + converted_recovery +
                               converted_resilience + converted_temp_var)




## Plotting OFS

Y_min<-min((av$av_OFS),na.rm = T)-0.001
Y_max<-max((av$av_OFS),na.rm = T)+0.001

plot_OFS <- ggplot(data = av,
                   mapping = aes(x = Treatment,
                                 y = av_OFS),
                   group=Treatment,
                   fill = Treatment) +
  ylab("Overall Functional Stability") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism), position = position_jitter(width = 0.1),
             size = 2, 
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# LMM OFS
mod.OFS <- lme(av_OFS ~ Recurrent.treatment + Long.treatment,
               random = list(organism = ~ 1, Mesocosm.No = ~ 1),
               weights = varIdent(form = ~ 1 | organism),
               control = ctrl,
               method = 'REML',
               data= av,
               na.action=na.omit)



summary.OFS <- papeR::prettify(summary(mod.OFS))
summary.OFS$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.OFS)[2] <- c("Estimate")
summary.OFS
## Model validation:  
#Residuals

check_model(mod.OFS)


write.csv(av, "F:/IMDEA/Mesocosm 2021/Heat Waves on STability/Data/Total_Functional_Stability.csv", row.names = FALSE, quote = FALSE)


#### nice plot
mybox <- boxplot(av$av_OFS ~ av$Treatment)
mybox$stats
mydata2 <- as.data.frame(mybox$stats)
av$Treatment <- factor(av$Treatment)
names(mydata2) <- levels(av$Treatment)
rownames(mydata2) <- c("lower_whisker","q25","median","q75","upper_whisker")
mydata2 <- t(mydata2)
mydata2 <- as.data.frame(mydata2)
mydata2$Treatment <- as.factor(rownames(mydata2))
mydata2

## To get the outliers, you can do the following:
mybox$out; mybox$group

## This means, outlier 1 belongs to setosa, and outlier 3 to versicolor

myout <- data.frame(outlier= c(mybox$out,NA),Treatment=c("Control"))
myout

## Plot

g_func <- ggplot() + geom_flat_violin(data=av,aes(x=Treatment,y=av_OFS,fill=Treatment),
                                 position=position_nudge(0.05),
                                 color="white",scale="count",trim=FALSE)   ## or TRUE

g_func <- g_func +  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom")  
g_func <- g_func + labs(x="",y="Overall Functional Stability")
g_func <- g_func + scale_y_continuous(limits = c(Y_min,Y_max),
                            breaks = pretty_breaks(n = 7))

g_func <- g_func + scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F)


g_func

## Add the boxplot to your existing flat violinplot:

## Box

g_func <- g_func + geom_rect(data = mydata2, stat = "identity",
                   aes(xmin = as.numeric(Treatment) - 0.25,
                       ymin = q25,
                       xmax = as.numeric(Treatment) - 0.05,
                       ymax = q75,
                       fill = Treatment),
                   color = "white")

g_func

## Median

g_func <- g_func + geom_segment(data = mydata2, stat = "identity",
                      aes(x = as.numeric(Treatment) - 0.25,
                          y = median,
                          xend = as.numeric(Treatment) - 0.05,
                          yend = median),
                      color = "white",
                      size = 1)

g_func

## Vertical segment
g_func <- g_func + geom_segment(data = mydata2, stat = "identity",
                      aes(x = as.numeric(Treatment) - 0.05,
                          y = lower_whisker,
                          xend = as.numeric(Treatment) - 0.05,
                          yend = upper_whisker),
                      color = "black")

g_func

## Bottom horizontal segment

g_func <- g_func + geom_segment(data = mydata2, stat = "identity",
                      aes(x = as.numeric(Treatment) - 0.1,
                          y = lower_whisker,
                          xend = as.numeric(Treatment) - 0.05,
                          yend = lower_whisker),
                      color = "black")

g_func

## Top horizontal segment

g_func <- g_func + geom_segment(data = mydata2, stat = "identity",
                      aes(x = as.numeric(Treatment) - 0.1,
                          y = upper_whisker,
                          xend = as.numeric(Treatment) - 0.05,
                          yend = upper_whisker),
                      color = "black")

g_func

## points

g_func <- g_func + geom_point(data = av,
                    mapping = aes(x = Treatment,
                                  y = av_OFS, shape = organism), position = position_jitter(width = 0.05),
                    size = 2,
                    show.legend = "none")
g_func



NEW_functional_stability <- plot_resistance+plot_resilience+plot_recovery+plot_temporal_stability+plot_OFS
ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/NEW_functional_stability.pdf", NEW_functional_stability, pagecentre = F, 
       width=18, height=10, pointsize=8)
### load biomass data ###
biomass <- read_xlsx(paste0(DIR, "Data/TrophicNetworkCosm2021_reduced.xlsx"), sheet = "biomass")
names(biomass)


biomass1 <- biomass %>% 
  mutate(basal = rowSums((biomass[,7:95]), na.rm = TRUE),
         zooplankton = rowSums((biomass[,96:118]), na.rm = TRUE),
         benthos = rowSums((biomass[,c(120:135,139:143)]), na.rm = TRUE),
         predators = rowSums((biomass[,c(136:138,118,144)]), na.rm = TRUE))


### We now plot the consumers to resource biomass ration. Theory and empirical data from freshwater ecosystems suggest
# that the ratio increases under warming (increase in consumers biomass relative to resources)
# But first, let's check closely the organism groups biomass dynamics
biomass_plot <- biomass1[,c(1:6, 145:148)]
names(biomass_plot)
ratios <- biomass_plot %>% group_by(Day, Mesocosm.No) %>% 
  mutate(ratio = (zooplankton + benthos + predators)/(basal))
view(ratios)
#gather data from columns 2 and 3
biomass_plot <- biomass_plot %>%  gather(organism, biomass, -c(Day, Treatment, Mesocosm.No,  Recurrent.treatment, Long.treatment, Phase))
biomass_plot  %>%   ggplot(aes(x=factor(Day), y=log(biomass), fill=Treatment))+
  geom_boxplot(position=position_dodge(0.8)) + facet_wrap("organism") +
  geom_point( position = position_jitterdodge(jitter.width = .2), alpha = .5, size =1)+
  theme_bw()+
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma")


ratios %>% ggplot(aes(x=factor(Day), y=ratio, fill=Treatment))+
  geom_boxplot(position=position_dodge(0.8)) +
  theme_classic() +
  geom_point( position = position_jitterdodge(jitter.width = .2), alpha = .5)+
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F)


#------------#### COMPOSITIONAL STABILIY ####---------------------#
rm(list = ls())
DIR = "F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/"
setwd(DIR)
### load abundance data ###
dd <- read_xlsx(paste0(DIR, "Data/TrophicNetworkCosm2021.xlsx"), sheet = "abundances")
names(dd)

tot.ab <- dd[, c(1:6)]
tot.ab<-as.data.frame(tot.ab) 
tot.ab$total.abundance<- rowSums(dd[, c(7:144)])

### Log10 abundance
tot.ab$total.ab_log <- log10(tot.ab$total.abundance+1)
### abundance dynamics ###

# Plot summary total abundance dynamics 

tot.ab$Treatment <- factor(tot.ab$Treatment, levels = c("Control", "Long", "Recurrent"))

se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_ab_dynamics <- tot.ab %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_ab = mean((log10(total.abundance)), na.rm=T), se= se(log10(total.abundance))) %>%
  mutate(lower_y = mean_ab-se, upper_y = mean_ab+se) %>% 
  ggplot(aes(y=mean_ab, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.3, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("Log10(Density (ind/L))") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  scale_x_continuous(limits = c(-5,80), breaks = c(-4,10,24,38,52,66,80)) +
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))

tot_ab_dynamics
### Overview of Bray - Curtis distances dynamics overtime
dd <- as.data.frame(dd)

days_FR <- unique(dd$Day)



# Include running index "m", set it to 1 

m <- 1



for (j in 1:length(days_FR)){  ##  loop for days
  
  # Extract data for one single day
  
  mysite <- dd %>% 
    filter( Day == days_FR[j])
  
  # Add row names to the data frame, useful later for the Bray-Curtis calculation
  
  rownames(mysite) <- paste(mysite$Treatment, mysite$Mesocosm.No, mysite$Day, sep = "_")
  
  # Extract controls 
  
  control_cosm <- mysite %>% 
    filter(Treatment == "Control")
  
  # Calculate average community composition (average abundance of each group/column)
  # Important: only columns with species are included 
  # ref.comm.all => includes all species
  
  
  ref.comm.all <- control_cosm[,c(7:144)] %>% summarise_each(funs( mean( .,na.rm = TRUE)))
  rownames(ref.comm.all) <- "REF.COMM.ALL"
  
  
  # Add the reference community to your site
  
  z.all <- rbind(mysite[,c(7:144)], ref.comm.all)
  
  # Calculate Bray-Curtis Dissimilary using the function vegdist
  
  # Matrix of all Bray-Curtis Dissimilarities
  
  calc.BC.all <- as.matrix(vegdist(z.all, method = "bray", binary = F, na.rm = T))
  
  # Extract just the last column containing the pairwise comparison of each plot 
  # to the average control community composition
  
  BC.mean.C.all <- calc.BC.all[1:12,"REF.COMM.ALL"]
  
  
  # Add the BCs to the mysite dataset
  
  mysite$BC_meanC_all <- BC.mean.C.all
  
  
  # This is optional: add the names from the BC vectors to mysite 
  # to be sure you extracted the correct comparisons of single communities to REF.COMM.
  
  mysite$community_all <- names(BC.mean.C.all)
  
  
  if (m == 1){
    df.sites <- mysite
  }
  
  if (m > 1){
    df.sites <- rbind(df.sites,mysite)
  }
  
  # Increase m (the running index) by 1
  
  m <- m + 1
}


names(df.sites)
Bray_Curtis_distances_tot <- df.sites[,c(1:6,146:147)]

names(Bray_Curtis_distances_tot)

# dplyr::select control as reference 
control_bc <- Bray_Curtis_distances_tot %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_bm_control = mean(BC_meanC_all, na.rm = T))
# dplyr::select all other treatments
bc_all_treat <- Bray_Curtis_distances_tot %>% 
  group_by(Day,  Treatment) 

bc_plot <- merge(bc_all_treat, control_bc, by = "Day")



# Difference to control

bc_plot <-  bc_plot %>% 
  mutate(diff= bc_plot$BC_meanC_all - bc_plot$mean_bm_control)

# Plot summary BC distances dynamics 
bc_plot$Treatment <- factor(bc_plot$Treatment, levels = c("Control", "Long", "Recurrent"))

bc_plot <- bc_plot %>% filter(Treatment != "Control")

se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_bc_dynamics <- bc_plot %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_bc = mean((diff), na.rm=T), se= se(diff)) %>%
  mutate(lower_y = mean_bc-se, upper_y = mean_bc+se) %>% 
  ggplot(aes(y=mean_bc, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.3, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("Bray - Curtis distances") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.3, option = "magma") +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.3, option = "magma") +
  scale_x_continuous(limits = c(-5,80), breaks = c(-4,10,24,38,52,66,80)) +
  scale_y_continuous(limits = c(-0.3,0.5))+
  geom_hline(yintercept = 0)+
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))


tot_bc_dynamics

# We also examined variation in the estimated effects of the treatments
# differed over the course of the experiment. 
# To do so, we fitted mixed models for each day. 


## split the data by day
dd3_bm <- Bray_Curtis_distances_tot %>% 
  dplyr::select(Day, BC_meanC_all, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>%  
  group_by(Day) %>% 
  nest()



ctrl <- lmeControl(opt='optim');
dd3_bm <- dd3_bm %>% filter(Day  > 0) %>%
  mutate(mod_per_day_bm_trend = map(data, ~ lme(BC_meanC_all ~ Recurrent.treatment  + Long.treatment,
                                                random = ~ 1 | Mesocosm.No,
                                                control = ctrl,
                                                data=.,
                                                na.action=na.omit)))



dd3_bm <- dd3_bm[,1:3]

# extract model coefficients
fixed_per_day <-  plyr::ldply(map(dd3_bm$mod_per_day_bm_trend, ~ fixed.effects(.)))
confid_per_day <-  bind_rows(lapply(1:nrow(dd3_bm),
                                    function(x) tibble::rownames_to_column(
                                      as.data.frame(intervals(dd3_bm$mod_per_day_bm_trend[[x]], which="fixed")$fixed))))

confid_per_day_t <- confid_per_day %>% 
  mutate(day = rep(1:6, each=3)) %>%
  dplyr::select(rowname, lower, upper, day) %>%
  gather(var, value, -rowname, -day) %>% 
  mutate(rowname2 = paste0(rowname, "_", var),
         rowname3 = paste0(rowname, "_", var, "_", day)) %>%
  dplyr::select(day, rowname2, value) %>%
  spread(rowname2, value) 

dd3_bm <- cbind(dd3_bm, fixed_per_day, confid_per_day_t)
names(plot_dd3)



plot_dd3 <- dd3_bm[, c(-2,-3)]
gg_Recurrent <-  ggplot(data=plot_dd3, aes(y=Recurrent.treatmentPresent, x=Day))  +
  geom_ribbon(aes(ymin = Recurrent.treatmentPresent_lower, ymax = Recurrent.treatmentPresent_upper), fill="lightgrey") +
  geom_line() + xlab("")+ geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 30, unit = "pt")) +
  theme_classic()+
  ylab("Recurrent\nmain effect")

gg_Warm <- ggplot(data=plot_dd3, aes(y= Long.treatmentPresent, x=Day)) +
  geom_ribbon(aes(ymin = Long.treatmentPresent_lower, ymax = `Long.treatmentPresent_upper`), fill="lightgrey") +
  geom_line()  + xlab("") + geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme_classic()+
  ylab("Long\nmain effect")

BC <- tot_bc_dynamics/(gg_Recurrent + gg_Recurrent)
ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/Effect_size_BC.pdf", BC, 
       width=18, height=12, pointsize=8)
### Phyto ###
### Bray-Curtis dissimilarity calculation ###
dd_phyto <- dd[,1:95]
dd_phyto[is.na(dd_phyto)] <- 0

dd_phyto <- as.data.frame(dd_phyto)

days_FR <- unique(dd_phyto$Day)



# Include running index "m", set it to 1 

m <- 1



for (j in 1:length(days_FR)){  ##  loop for days
  
  # Extract data for one single day
  
  mysite <- dd_phyto %>% 
    filter( Day == days_FR[j])
  
  # Add row names to the data frame, useful later for the Bray-Curtis calculation
  
  rownames(mysite) <- paste(mysite$Treatment, mysite$Mesocosm.No, mysite$Day, sep = "_")
  
  # Extract controls 
  
  control_cosm <- mysite %>% 
    filter(Treatment == "Control")
  
  # Calculate average community composition (average abundance of each group/column)
  # Important: only columns with species are included 
  # ref.comm.all => includes all species
  
  
  ref.comm.all <- control_cosm[,c(7:95)] %>% summarise_each(funs( mean( .,na.rm = TRUE)))
  rownames(ref.comm.all) <- "REF.COMM.ALL"
  
  
  # Add the reference community to your site
  
  z.all <- rbind(mysite[,c(7:95)], ref.comm.all)
  
  # Calculate Bray-Curtis Dissimilary using the function vegdist
  
  # Matrix of all Bray-Curtis Dissimilarities
  
  calc.BC.all <- as.matrix(vegdist(z.all, method = "bray", binary = F, na.rm = T))
  
  # Extract just the last column containing the pairwise comparison of each plot 
  # to the average control community composition
  
  BC.mean.C.all <- calc.BC.all[1:12,"REF.COMM.ALL"]
  
  
  # Add the BCs to the mysite dataset
  
  mysite$BC_meanC_all <- BC.mean.C.all
  
  
  # This is optional: add the names from the BC vectors to mysite 
  # to be sure you extracted the correct comparions of single communities to REF.COMM.
  
  mysite$community_all <- names(BC.mean.C.all)
  
  
  if (m == 1){
    df.sites <- mysite
  }
  
  if (m > 1){
    df.sites <- rbind(df.sites,mysite)
  }
  
  # Increase m (the running index) by 1
  
  m <- m + 1
}

df.sites_phyto <-  df.sites 

names(df.sites_phyto)
Bray_Curtis_distances_phyto <- df.sites_phyto[,c(1:6,96:97)]

names(Bray_Curtis_distances_phyto)

### Resistance ###

# dplyr::select control as reference 
control_bc <- Bray_Curtis_distances_phyto %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_bc_control = mean(BC_meanC_all, na.rm = T))
# dplyr::select all other treatments
bc_all_treat <- Bray_Curtis_distances_phyto %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bc = mean(BC_meanC_all, na.rm = T))

bc_data_phyto <- merge(bc_all_treat, control_bc, by = "Day")


# resistance defined as the difference between stressed and control divided by the control
# at the end of the treatment phase (i.e. Pennekamp et al 2018)

bc_resist <-  bc_data_phyto %>% 
  dplyr::filter(Day == 38) 
bc_resist <- bc_resist %>% 
  mutate(resist= ((bc_resist$mean_bc-bc_resist$mean_bc_control)/bc_resist$mean_bc_control)*-1)


# plot resistance
Y_min<-min(c(bc_resist$resist),na.rm = T)-0.001
Y_max<-max(c(bc_resist$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to put a line with y = 0 which is the benchmark for control values
plot_resistance_dd <- bc_resist

plot_resistance <-  ggplot(data = plot_resistance_dd,
                           mapping = aes(x = Treatment,
                                         y = resist),
                           group=Treatment,
                           fill = Treatment) +
  ylab("Compositional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))


### RESILIENCE ###

# remove Day -4 
bc_resilience <- bc_data_phyto%>% 
  filter(Day != -4)


# functional resilience defined as the slope of the log-transformed difference (LRR) between 
# perturbed and control BC distances (e.g., Hillebrand et al 2018)

bc_resilience <-  bc_resilience %>% 
  mutate(ratio = log(bc_resilience$mean_bc/bc_resilience$mean_bc_control))

resilience_model <- lmList(ratio ~ Day | Mesocosm.No, data=bc_resilience)
df.coef <- as.data.frame( coef(summary(resilience_model)) )
# visualize resilience

ggplot(data = bc_resilience, aes(Day, ratio, color = Treatment))+
  geom_quasirandom()+
  theme_bw()+
  geom_smooth(method=lm, se = FALSE)+
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma")

# now we want to merge the resilience values (n = 12) with the relative treatments' info
# to do that we take only the info need from bm_resilience
# we need: Mesocosm.No ID, Treatment, Recurrent.treatment,  Long.treatment

bc_resilience <- bc_resilience %>% 
  filter(Day == 10) %>% 
  dplyr::select(Day,Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) 


bc_resilience <-  bc_resilience %>% 
  mutate(resilience = df.coef$Estimate.Day)
names(bc_resilience)

plot_resistance_dd <- bc_resilience 

Y_min<-min(c(bc_resilience$resilience),na.rm = T)-0.001
Y_max<-max(c(bc_resilience$resilience),na.rm = T)+0.001
plot_resilience <- ggplot(data = plot_resistance_dd,
                          mapping = aes(x = Treatment,
                                        y = resilience),
                          group=Treatment,
                          fill = Treatment) +
  ylab("Compositional Resilience") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

### RECOVERY ###

# Recovery is here defined as the difference between stressed and control divided 
# by the control at the end of the experiment.
# Same as Resistance, but at the end of the experiment

# we need to take only the last day of the experiment ( Day == 80)

recovery_bc <- bc_data_phyto%>% 
  filter(Day == 80)


# resistance defined as the difference between stressed and control divided by the control (i.e. Pennekamp et al 2018)

recovery_bc$recovery <- ((recovery_bc$mean_bc-recovery_bc$mean_bc_control)/recovery_bc$mean_bc_control)*-1


### Plot recovery
plot_recovery_dd <- recovery_bc 


Y_min<-min(c(recovery_bc$recovery),na.rm = T)-0.001
Y_max<-max(c(recovery_bc$recovery),na.rm = T)+0.001

plot_recovery <- ggplot(data = plot_recovery_dd,
                        mapping = aes(x = Treatment,
                                      y = recovery),
                        group=Treatment,
                        fill = Treatment) +
  ylab("Compositional Recovery") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# temporal variability is calculated by hard coding the coefficient of variation
# |sd/abs(mean)| for each mesoMesocosm.No across all periods
names(bc_data_phyto)
# analysis of temporal stability
temp_stab <- bc_data_phyto %>% 
  group_by(Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(Temp.Var = mean(mean_bc, na.rm=T)/sd(mean_bc, na.rm = T))

# Plot temporal stability 
plot_temp_stab_dd <- temp_stab 


Y_min<-min(c((temp_stab$Temp.Var)),na.rm = T)-0.001
Y_max<-max(c((temp_stab$Temp.Var)),na.rm = T)+0.001

plot_temporal_stability <- ggplot(data = plot_temp_stab_dd,
                                  mapping = aes(x = Treatment,
                                                y = Temp.Var),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Temporal Stability log(mean/STD)") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

## join all stability components
compo_stab_phyto <- cbind(bc_resist[,c(2:5,8)], bc_resilience$resilience, recovery_bc$recovery, temp_stab$Temp.Var)


compo_stab_phyto <- compo_stab_phyto %>% 
  dplyr::rename(resistance = "resist", resilience = "bc_resilience$resilience",
                recovery = "recovery_bc$recovery", temp.var = "temp_stab$Temp.Var")





plot1_phyto <- cowplot::plot_grid(plot_resistance, plot_recovery, plot_resilience, plot_temporal_stability,
                                  nrow = 2, ncol = 2, label = c("a", "b", "c", "d"))

ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/Treatments_effects_On_single_compositional_stability_properties_phyto.pdf", plot1_phyto, pagecentre = F, 
       width=10, height=10, pointsize=8) #saves g



### BC distances dynamics phyto ###

# Plot summary BC distances dynamics 
Bray_Curtis_distances_phyto$Treatment <- factor(Bray_Curtis_distances_phyto$Treatment, levels = c("Control", "Long", "Recurrent"))
Bray_Curtis_distances_phytop <- Bray_Curtis_distances_phyto 

se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_bc_dynamics_phyto <- Bray_Curtis_distances_phytop %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_bc = mean((BC_meanC_all), na.rm=T), se= se(BC_meanC_all)) %>%
  mutate(lower_y = mean_bc-se, upper_y = mean_bc+se) %>% 
  ggplot(aes(y=mean_bc, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.1, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("Bray - Curtis distances") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  scale_x_continuous(limits = c(-5,80), breaks = c(-4,10,24,38,52,66,80)) +
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))




## Model 2: total BC diatnces, split by day

# We also examined variation in the estimated effects of the treatments
# differed over the course of the experiment. 
# To do so, we fitted mixed models for each day. 


## split the data by day
dd3_bm <- Bray_Curtis_distances_phyto %>% 
  dplyr::select(Day, BC_meanC_all, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>%  
  group_by(Day) %>% 
  nest()



ctrl <- lmeControl(opt='optim');
dd3_bm <- dd3_bm %>% filter(Day  > 0) %>%
  mutate(mod_per_day_bm_trend = map(data, ~ lme(BC_meanC_all ~ Recurrent.treatment  + Long.treatment,
                                                random = ~ 1 | Mesocosm.No,
                                                control = ctrl,
                                                data=.,
                                                na.action=na.omit)))



dd3_bm <- dd3_bm[,1:3]

# extract model coefficients
fixed_per_day <-  plyr::ldply(map(dd3_bm$mod_per_day_bm_trend, ~ fixed.effects(.)))
confid_per_day <-  bind_rows(lapply(1:nrow(dd3_bm),
                                    function(x) tibble::rownames_to_column(
                                      as.data.frame(intervals(dd3_bm$mod_per_day_bm_trend[[x]], which="fixed")$fixed))))

confid_per_day_t <- confid_per_day %>% 
  mutate(day = rep(1:6, each=3)) %>%
  dplyr::select(rowname, lower, upper, day) %>%
  gather(var, value, -rowname, -day) %>% 
  mutate(rowname2 = paste0(rowname, "_", var),
         rowname3 = paste0(rowname, "_", var, "_", day)) %>%
  dplyr::select(day, rowname2, value) %>%
  spread(rowname2, value) 

dd3_bm <- cbind(dd3_bm, fixed_per_day, confid_per_day_t)
names(plot_dd3)



plot_dd3 <- dd3_bm[, c(-2,-3)]
gg_Recurrent <-  ggplot(data=plot_dd3, aes(y=Recurrent.treatmentPresent, x=Day))  +
  geom_ribbon(aes(ymin = Recurrent.treatmentPresent_lower, ymax = Recurrent.treatmentPresent_upper), fill="lightgrey") +
  geom_line() + xlab("")+ geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 30, unit = "pt")) +
  theme_classic()+
  ylab("Recurrent\nmain effect")

gg_Warm <- ggplot(data=plot_dd3, aes(y= Long.treatmentPresent, x=Day)) +
  geom_ribbon(aes(ymin = Long.treatmentPresent_lower, ymax = `Long.treatmentPresent_upper`), fill="lightgrey") +
  geom_line()  + xlab("") + geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme_classic()+
  ylab("Long\nmain effect")

tot_bc_dynamics_phyto/(gg_Recurrent + gg_Recurrent)



### Zoo ###
### Bray-Curtis dissimilarity calculation ###
names(dd)

dd_zoo <- dd[,c(1:6, 96:118)]
dd_zoo[is.na(dd_zoo)] <- 0

dd_zoo <- as.data.frame(dd_zoo)
names(dd_zoo)

days_FR <- unique(dd_zoo$Day)



# Include running index "m", set it to 1 

m <- 1



for (j in 1:length(days_FR)){  ## inner loop for days
  
  # Extract data for one single day
  
  mysite <- dd_zoo %>% 
    filter( Day == days_FR[j])
  
  # Add row names to the data frame, useful later for the Bray-Curtis calculation
  
  rownames(mysite) <- paste(mysite$Treatment, mysite$Mesocosm.No, mysite$Day, sep = "_")
  
  # Extract controls 
  
  control_cosm <- mysite %>% 
    filter(Treatment == "Control")
  
  # Calculate average community composition (average abundance of each group/column)
  # Important: only columns with species are included 
  # ref.comm.all => includes all species
  
  
  ref.comm.all <- control_cosm[,c(7:29)] %>% summarise_each(funs( mean( .,na.rm = TRUE)))
  rownames(ref.comm.all) <- "REF.COMM.ALL"
  
  
  # Add the reference community to your site
  
  z.all <- rbind(mysite[,c(7:29)], ref.comm.all)
  
  # Calculate Bray-Curtis Dissimilary using the function vegdist
  
  # Matrix of all Bray-Curtis Dissimilarities
  
  calc.BC.all <- as.matrix(vegdist(z.all, method = "bray", binary = F, na.rm = T))
  
  # Extract just the last column containing the pairwise comparison of each plot 
  # to the average control community composition
  
  BC.mean.C.all <- calc.BC.all[1:12,"REF.COMM.ALL"]
  
  
  # Add the BCs to the mysite dataset
  
  mysite$BC_meanC_all <- BC.mean.C.all
  
  
  # This is optional: add the names from the BC vectors to mysite 
  # to be sure you extracted the correct comparions of single communities to REF.COMM.
  
  mysite$community_all <- names(BC.mean.C.all)
  
  
  if (m == 1){
    df.sites <- mysite
  }
  
  if (m > 1){
    df.sites <- rbind(df.sites,mysite)
  }
  
  # Increase m (the running index) by 1
  
  m <- m + 1
}


df.sites_zoo <- df.sites

names(df.sites_zoo)
Bray_Curtis_distances_zoo <- df.sites_zoo[,c(1:6,30:31)]

names(Bray_Curtis_distances_zoo)

### Resistance ###

# dplyr::select control as reference 
control_bc <- Bray_Curtis_distances_zoo %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_bc_control = mean(BC_meanC_all, na.rm = T))
# dplyr::select all other treatments
bc_all_treat <- Bray_Curtis_distances_zoo %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bc = mean(BC_meanC_all, na.rm = T))

bc_data_zoo <- merge(bc_all_treat, control_bc, by = "Day")


# resistance defined as the difference between stressed and control divided by the control (i.e. Pennekamp et al 2018)

bc_resist <-  bc_data_zoo %>% 
  dplyr::filter(Day == 38) 
bc_resist <- bc_resist %>% 
  mutate(resist= ((bc_resist$mean_bc-bc_resist$mean_bc_control)/bc_resist$mean_bc_control)*-1)


# plot resistance
Y_min<-min(c(bc_resist$resist),na.rm = T)-0.001
Y_max<-max(c(bc_resist$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to put a line with y = 0 which is the benchmark for control values
plot_resistance_dd <- bc_resist 

plot_resistance <-  ggplot(data = plot_resistance_dd,
                           mapping = aes(x = Treatment,
                                         y = resist),
                           group=Treatment,
                           fill = Treatment) +
  ylab("Compositional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))


### RESILIENCE ###

# remove Day -4 
bc_resilience <- bc_data_zoo%>% 
  filter(Day != -4)


# functional resilience defined as the slope of the log-transformed difference (LRR) between 
# perturbed and control BC distances (e.g., Hillebrand et al 2018)

bc_resilience <-  bc_resilience %>% 
  mutate(ratio = log(bc_resilience$mean_bc/bc_resilience$mean_bc_control))

resilience_model <- lmList(ratio ~ Day | Mesocosm.No, data=bc_resilience)
df.coef <- as.data.frame( coef(summary(resilience_model)) )
# visualize resilience

ggplot(data = bc_resilience, aes(Day, ratio, color = Treatment))+
  geom_quasirandom()+
  theme_bw()+
  geom_smooth(method=lm, se = FALSE)+
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma")

# now we want to merge the resilience values (n = 12) with the relative treatments' info
# to do that we take only the info need from bm_resilience
# we need: Mesocosm.No ID, Treatment, Heat.tretament, Long.treatment 

bc_resilience <- bc_resilience %>% 
  filter(Day == 10) %>% 
  dplyr::select(Day,Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) 


bc_resilience <-  bc_resilience %>% 
  mutate(resilience = df.coef$Estimate.Day)
names(bc_resilience)

plot_resistance_dd <- bc_resilience 

Y_min<-min(c(bc_resilience$resilience),na.rm = T)-0.001
Y_max<-max(c(bc_resilience$resilience),na.rm = T)+0.001
plot_resilience <- ggplot(data = plot_resistance_dd,
                          mapping = aes(x = Treatment,
                                        y = resilience),
                          group=Treatment,
                          fill = Treatment) +
  ylab("Compositional Resilience") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

### RECOVERY ###

# Recovery is here defined as the difference between stressed and control divided 
# by the control at the end of the experiment.
# Same as Resistance, but at the end of the experiment

# we need to take only the last day of the experiment ( Day == 80)

recovery_bc <- bc_data_zoo%>% 
  filter(Day == 80)


# resistance defined as the difference between stressed and control divided by the control (i.e. Pennekamp et al 2018)

recovery_bc$recovery <- ((recovery_bc$mean_bc-recovery_bc$mean_bc_control)/recovery_bc$mean_bc_control)*-1


### Plot recovery
plot_recovery_dd <- recovery_bc


Y_min<-min(c(recovery_bc$recovery),na.rm = T)-0.001
Y_max<-max(c(recovery_bc$recovery),na.rm = T)+0.001

plot_recovery <- ggplot(data = plot_recovery_dd,
                        mapping = aes(x = Treatment,
                                      y = recovery),
                        group=Treatment,
                        fill = Treatment) +
  ylab("Compositional Recovery") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# temporal variability is calculated by hard coding the coefficient of variation
# |sd/abs(mean)| for each mesoMesocosm.No across all periods
names(bc_data_zoo)
# analysis of temporal stability
temp_stab <- bc_data_zoo %>% 
  group_by(Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(Temp.Var = mean(mean_bc, na.rm=T)/sd(mean_bc, na.rm = T))

# Plot temporal stability 
plot_temp_stab_dd <- temp_stab


Y_min<-min(c((temp_stab$Temp.Var)),na.rm = T)-0.001
Y_max<-max(c((temp_stab$Temp.Var)),na.rm = T)+0.001

plot_temporal_stability <- ggplot(data = plot_temp_stab_dd,
                                  mapping = aes(x = Treatment,
                                                y = Temp.Var),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Temporal Stability log(mean/STD)") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

## join all stability components
compo_stab_zoo <- cbind(bc_resist[,c(2:5, 8)], bc_resilience$resilience, recovery_bc$recovery, temp_stab$Temp.Var)


compo_stab_zoo <- compo_stab_zoo %>% 
  dplyr::rename(resistance = "resist", resilience = "bc_resilience$resilience",
                recovery = "recovery_bc$recovery", temp.var = "temp_stab$Temp.Var")




plot1_zoo <- cowplot::plot_grid(plot_resistance, plot_recovery, plot_resilience, plot_temporal_stability,
                                nrow = 2, ncol = 2, label = c("a", "b", "c", "d"))

ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/Treatments_effects_On_single_compositional_stability_properties_zoo.pdf", plot1_zoo, pagecentre = F, 
       width=10, height=10, pointsize=8) #saves g




### BC distances dynamics zoo ###

# Plot summary BC distances dynamics 
Bray_Curtis_distances_zoo$Treatment <- factor(Bray_Curtis_distances_zoo$Treatment, levels = c("Control", "Long", "Recurrent"))
Bray_Curtis_distances_zoop <- Bray_Curtis_distances_zoo 

se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_bc_dynamics_zoo <- Bray_Curtis_distances_zoop %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_bc = mean((BC_meanC_all), na.rm=T), se= se(BC_meanC_all)) %>%
  mutate(lower_y = mean_bc-se, upper_y = mean_bc+se) %>% 
  ggplot(aes(y=mean_bc, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.1, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("Bray - Curtis distances") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  scale_x_continuous(limits = c(-5,80), breaks = c(-4,10,24,38,52,66,80)) +
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))


tot_bc_dynamics_zoo


## Model 2: total BC distances, split by day

# We also examined variation in the estimated effects of the treatments
# differed over the course of the experiment. 
# To do so, we fitted mixed models for each day. 


## split the data by day
dd3_bm <- Bray_Curtis_distances_zoo %>% 
  dplyr::select(Day, BC_meanC_all, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>%  
  group_by(Day) %>% 
  nest()



ctrl <- lmeControl(opt='optim');
dd3_bm <- dd3_bm %>% filter(Day  > 0) %>%
  mutate(mod_per_day_bm_trend = map(data, ~ lme(BC_meanC_all ~ Recurrent.treatment + Long.treatment,
                                                random = ~ 1 | Mesocosm.No,
                                                control = ctrl,
                                                data=.,
                                                na.action=na.omit)))



dd3_bm <- dd3_bm[,1:3]

# extract model coefficients
fixed_per_day <-  plyr::ldply(map(dd3_bm$mod_per_day_bm_trend, ~ fixed.effects(.)))
confid_per_day <-  bind_rows(lapply(1:nrow(dd3_bm),
                                    function(x) tibble::rownames_to_column(
                                      as.data.frame(intervals(dd3_bm$mod_per_day_bm_trend[[x]], which="fixed")$fixed))))

confid_per_day_t <- confid_per_day %>% 
  mutate(day = rep(1:6, each=3)) %>%
  dplyr::select(rowname, lower, upper, day) %>%
  gather(var, value, -rowname, -day) %>% 
  mutate(rowname2 = paste0(rowname, "_", var),
         rowname3 = paste0(rowname, "_", var, "_", day)) %>%
  dplyr::select(day, rowname2, value) %>%
  spread(rowname2, value) 

dd3_bm <- cbind(dd3_bm, fixed_per_day, confid_per_day_t)
names(plot_dd3)



plot_dd3 <- dd3_bm[, c(-2,-3)]
gg_Recurrent <-  ggplot(data=plot_dd3, aes(y=Recurrent.treatmentPresent, x=Day))  +
  geom_ribbon(aes(ymin = Recurrent.treatmentPresent_lower, ymax = Recurrent.treatmentPresent_upper), fill="lightgrey") +
  geom_line() + xlab("")+ geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 30, unit = "pt")) +
  theme_classic()+
  ylab("Recurrent\nmain effect")

gg_Warm <- ggplot(data=plot_dd3, aes(y= Long.treatmentPresent, x=Day)) +
  geom_ribbon(aes(ymin = Long.treatmentPresent_lower, ymax = `Long.treatmentPresent_upper`), fill="lightgrey") +
  geom_line()  + xlab("") + geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme_classic()+
  ylab("Long\nmain effect")


tot_bc_dynamics_zoo/(gg_Recurrent + gg_Warm)



### Macro ###
### Bray-Curtis dissimilarity calculation ###
names(dd)

dd_macro <- dd[,c(1:6, 119:144)]
dd_macro[is.na(dd_macro)] <- 0

dd_macro <- as.data.frame(dd_macro)

days_FR <- unique(dd_macro$Day)

names(dd_macro)

# Include running index "m", set it to 1 

m <- 1



for (j in 1:length(days_FR)){  ## inner loop for days
  
  # Extract data for one single day
  
  mysite <- dd_macro %>% 
    filter( Day == days_FR[j])
  
  # Add row names to the data frame, useful later for the Bray-Curtis calculation
  
  rownames(mysite) <- paste(mysite$Treatment, mysite$Mesocosm.No, mysite$Day, sep = "_")
  
  # Extract controls 
  
  control_cosm <- mysite %>% 
    filter(Treatment == "Control")
  
  # Calculate average community composition (average abundance of each group/column)
  # Important: only columns with species are included 
  # ref.comm.all => includes all species
  
  
  ref.comm.all <- control_cosm[,c(7:32)] %>% summarise_each(funs( mean( .,na.rm = TRUE)))
  rownames(ref.comm.all) <- "REF.COMM.ALL"
  
  
  # Add the reference community to your site
  
  z.all <- rbind(mysite[,c(7:32)], ref.comm.all)
  
  # Calculate Bray-Curtis Dissimilary using the function vegdist
  
  # Matrix of all Bray-Curtis Dissimilarities
  
  calc.BC.all <- as.matrix(vegdist(z.all, method = "bray", binary = F, na.rm = T))
  
  # Extract just the last column containing the pairwise comparison of each plot 
  # to the average control community composition
  
  BC.mean.C.all <- calc.BC.all[1:12,"REF.COMM.ALL"]
  
  
  # Add the BCs to the mysite dataset
  
  mysite$BC_meanC_all <- BC.mean.C.all
  
  
  # This is optional: add the names from the BC vectors to mysite 
  # to be sure you extracted the correct comparions of single communities to REF.COMM.
  
  mysite$community_all <- names(BC.mean.C.all)
  
  
  if (m == 1){
    df.sites <- mysite
  }
  
  if (m > 1){
    df.sites <- rbind(df.sites,mysite)
  }
  
  # Increase m (the running index) by 1
  
  m <- m + 1
}


df.sites_macro <- df.sites

names(df.sites_macro)
Bray_Curtis_distances_macro <- df.sites_macro[,c(1:7,33:34)]

names(Bray_Curtis_distances_macro)

### Resistance ###

# dplyr::select control as reference 
control_bc <- Bray_Curtis_distances_macro %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_bc_control = mean(BC_meanC_all, na.rm = T))
# dplyr::select all other treatments
bc_all_treat <- Bray_Curtis_distances_macro %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bc = mean(BC_meanC_all, na.rm = T))

bc_data_macro <- merge(bc_all_treat, control_bc, by = "Day")


# resistance defined as the difference between stressed and control divided by the control
# for day 38 (end of treatment period) (i.e. Pennekamp et al 2018)

bc_resist <-  bc_data_macro %>% 
  dplyr::filter(Day == 38) 
bc_resist <- bc_resist %>% 
  mutate(resist= ((bc_resist$mean_bc-bc_resist$mean_bc_control)/bc_resist$mean_bc_control)*-1)


# plot resistance
Y_min<-min(c(bc_resist$resist),na.rm = T)-0.001
Y_max<-max(c(bc_resist$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to put a line with y = 0 which is the benchmark for control values
plot_resistance_dd <- bc_resist 

plot_resistance <-  ggplot(data = plot_resistance_dd,
                           mapping = aes(x = Treatment,
                                         y = resist),
                           group=Treatment,
                           fill = Treatment) +
  ylab("Compositional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))


### RESILIENCE ###

# remove Day -4 
bc_resilience <- bc_data_macro%>% 
  filter(Day != -4)


# functional resilience defined as the slope of the log-transformed difference (LRR) between 
# perturbed and control biomass (e.g., Hillebrand et al 2018)

bc_resilience <-  bc_resilience %>% 
  mutate(ratio = log(bc_resilience$mean_bc/bc_resilience$mean_bc_control))

resilience_model <- lmList(ratio ~ Day | Mesocosm.No, data=bc_resilience)
df.coef <- as.data.frame( coef(summary(resilience_model)) )
# visualize resilience

ggplot(data = bc_resilience, aes(Day, ratio, color = Treatment))+
  geom_quasirandom()+
  theme_bw()+
  geom_smooth(method=lm, se = FALSE)+
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma")

# now we want to merge the resilience values (n = 12) with the relative treatments' info
# to do that we take only the info need from bm_resilience
# we need: Mesocosm.No ID, Treatment, Heat.tretament, Long.treatment 

bc_resilience <- bc_resilience %>% 
  filter(Day == 10) %>% 
  dplyr::select(Day,Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) 


bc_resilience <-  bc_resilience %>% 
  mutate(resilience = df.coef$Estimate.Day)
names(bc_resilience)

plot_resistance_dd <- bc_resilience

Y_min<-min(c(bc_resilience$resilience),na.rm = T)-0.001
Y_max<-max(c(bc_resilience$resilience),na.rm = T)+0.001
plot_resilience <- ggplot(data = plot_resistance_dd,
                          mapping = aes(x = Treatment,
                                        y = resilience),
                          group=Treatment,
                          fill = Treatment) +
  ylab("Compositional Resilience") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

### RECOVERY ###

# Recovery is here defined as the difference between stressed and control divided 
# by the control at the end of the experiment.
# Same as Resistance, but at the end of the experiment

# we need to take only the last day of the experiment ( Day == 80)

recovery_bc <- bc_data_macro%>% 
  filter(Day == 80)


# resistance defined as the difference between stressed and control divided by the control (i.e. Pennekamp et al 2018)

recovery_bc$recovery <- ((recovery_bc$mean_bc-recovery_bc$mean_bc_control)/recovery_bc$mean_bc_control)*-1


### Plot recovery
plot_recovery_dd <- recovery_bc


Y_min<-min(c(recovery_bc$recovery),na.rm = T)-0.001
Y_max<-max(c(recovery_bc$recovery),na.rm = T)+0.001

plot_recovery <- ggplot(data = plot_recovery_dd,
                        mapping = aes(x = Treatment,
                                      y = recovery),
                        group=Treatment,
                        fill = Treatment) +
  ylab("Compositional Recovery") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# temporal variability is calculated by hard coding the coefficient of variation
# |sd/abs(mean)| for each mesoMesocosm.No across all periods
names(bc_data_macro)
# analysis of temporal stability
temp_stab <- bc_data_macro %>% 
  group_by(Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(Temp.Var = mean(mean_bc, na.rm=T)/sd(mean_bc, na.rm = T))

# Plot temporal stability 
plot_temp_stab_dd <- temp_stab 


Y_min<-min(c((temp_stab$Temp.Var)),na.rm = T)-0.001
Y_max<-max(c((temp_stab$Temp.Var)),na.rm = T)+0.001

plot_temporal_stability <- ggplot(data = plot_temp_stab_dd,
                                  mapping = aes(x = Treatment,
                                                y = Temp.Var),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Temporal Stability log(mean/STD)") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

## join all stability components
compo_stab_macro <- cbind(bc_resist[,c(2:5, 8)], bc_resilience$resilience, recovery_bc$recovery, temp_stab$Temp.Var)


compo_stab_macro <- compo_stab_macro %>% 
  dplyr::rename(resistance = "resist", resilience = "bc_resilience$resilience",
                recovery = "recovery_bc$recovery", temp.var = "temp_stab$Temp.Var")




plot1_macro <- cowplot::plot_grid(plot_resistance, plot_recovery, plot_resilience, plot_temporal_stability,
                                  nrow = 2, ncol = 2, label = c("a", "b", "c", "d"))






### BC distances dynamics macro ###

# Plot summary BC distances dynamics 
Bray_Curtis_distances_macro$Treatment <- factor(Bray_Curtis_distances_macro$Treatment, levels = c("Control", "Long", "Recurrent"))
Bray_Curtis_distances_macrop <- Bray_Curtis_distances_macro

se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_bc_dynamics_macro <- Bray_Curtis_distances_macrop %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_bc = mean((BC_meanC_all), na.rm=T), se= se(BC_meanC_all)) %>%
  mutate(lower_y = mean_bc-se, upper_y = mean_bc+se) %>% 
  ggplot(aes(y=mean_bc, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.1, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("Bray - Curtis distances") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  scale_x_continuous(limits = c(-5,80), breaks = c(-4,10,24,38,52,66,80)) +
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))

tot_bc_dynamics_macro



## Black boxplot are predicted, colored ones are measured

## Model 2: total biomass, split by day

# We also examined variation in the estimated effects of the treatments
# and insecticide differed over the course of the experiment. 
# To do so, we fitted mixed models for each day. 


## split the data by day
dd3_bm <- Bray_Curtis_distances_macro %>% 
  dplyr::select(Day, BC_meanC_all, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>%  
  group_by(Day) %>% 
  nest()



ctrl <- lmeControl(opt='optim');
dd3_bm <- dd3_bm %>% filter(Day  > 0) %>%
  mutate(mod_per_day_bm_trend = map(data, ~ lme(BC_meanC_all ~ Recurrent.treatment + Long.treatment,
                                                random = ~ 1 | Mesocosm.No,
                                                control = ctrl,
                                                data=.,
                                                na.action=na.omit)))



dd3_bm <- dd3_bm[,1:3]

# extract model coefficients
fixed_per_day <-  plyr::ldply(map(dd3_bm$mod_per_day_bm_trend, ~ fixed.effects(.)))
confid_per_day <-  bind_rows(lapply(1:nrow(dd3_bm),
                                    function(x) tibble::rownames_to_column(
                                      as.data.frame(intervals(dd3_bm$mod_per_day_bm_trend[[x]], which="fixed")$fixed))))

confid_per_day_t <- confid_per_day %>% 
  mutate(day = rep(1:6, each=3)) %>%
  dplyr::select(rowname, lower, upper, day) %>%
  gather(var, value, -rowname, -day) %>% 
  mutate(rowname2 = paste0(rowname, "_", var),
         rowname3 = paste0(rowname, "_", var, "_", day)) %>%
  dplyr::select(day, rowname2, value) %>%
  spread(rowname2, value) 

dd3_bm <- cbind(dd3_bm, fixed_per_day, confid_per_day_t)
names(plot_dd3)



plot_dd3 <- dd3_bm[, c(-2,-3)]
gg_Recurrent <-  ggplot(data=plot_dd3, aes(y=Recurrent.treatmentPresent, x=Day))  +
  geom_ribbon(aes(ymin = Recurrent.treatmentPresent_lower, ymax = Recurrent.treatmentPresent_upper), fill="lightgrey") +
  geom_line() + xlab("")+ geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 30, unit = "pt")) +
  theme_classic()+
  ylab("Recurrent\nmain effect")

gg_Warm <- ggplot(data=plot_dd3, aes(y= Long.treatmentPresent, x=Day)) +
  geom_ribbon(aes(ymin = Long.treatmentPresent_lower, ymax = `Long.treatmentPresent_upper`), fill="lightgrey") +
  geom_line()  + xlab("") + geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme_classic()+
  ylab("Long\nmain effect")


tot_bc_dynamics_macro/(gg_Recurrent + gg_Warm)






### Scaling and multistability calculation ###
# First, we scale single stability components to homogenize the data between the different organism groups
# (not doing so does not change the results of the analysis though). We use these scaled values to assess the effects of the 
# the experimental Recurrents on the different stability components. We do that through LMM with Recurrents and Long Recurrent as fixed effects and 
# mesocosm number and organism group as random effects.


### Phyto

compo_stab_phyto <- compo_stab_phyto %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience =scale(resilience),
         converted_temp_var = scale(temp.var),
         organism = "phyto")



### ZOo


compo_stab_zoo <- compo_stab_zoo %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience =scale(resilience),
         converted_temp_var = scale(temp.var),
         organism = "zoo")



### Macro

compo_stab_macro <- compo_stab_macro %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience = scale(resilience),
         converted_temp_var = scale(temp.var), 
         organism = "macro")

### Merge different stability df #
compo_stab_phyto$organism <-"phyto"
compo_stab_zoo$organism <- "zoo"
compo_stab_macro$organism <- "macro"
tot_stab_df <- full_join(compo_stab_phyto, compo_stab_zoo)
tot_stab_df <- full_join(tot_stab_df, compo_stab_macro)

tot_stab_df$Treatment<- factor(tot_stab_df$Treatment, levels = c("Control", "Long", "Recurrent"))





### Resistance
Y_min<-min(c(tot_stab_df$resistance),na.rm = T)-0.001
Y_max<-max(c(tot_stab_df$resistance),na.rm = T)+0.001


# Since resistance was calculated in relation to the control, we are going to 
# put a line with y = 0 which is the benchmark for control values


plot_resistance <-  ggplot(data = tot_stab_df,
                           mapping = aes(x = Treatment,
                                         y = resistance),
                           group=Treatment,
                           fill = Treatment) +
  ylab("Compositional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism), position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



### RESILIENCE ###


Y_min<-min(c(tot_stab_df$resilience),na.rm = T)-0.001
Y_max<-max(c(tot_stab_df$resilience),na.rm = T)+0.001
plot_resilience <- ggplot(data = tot_stab_df,
                          mapping = aes(x = Treatment,
                                        y = resilience),
                          group=Treatment,
                          fill = Treatment) +
  ylab("Compositional Resilience") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism),position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

### RECOVERY ###

Y_min<-min(c(tot_stab_df$recovery),na.rm = T)-0.001
Y_max<-max(c(tot_stab_df$recovery),na.rm = T)+0.001

plot_recovery <- ggplot(data = tot_stab_df,
                        mapping = aes(x = Treatment,
                                      y = recovery),
                        group=Treatment,
                        fill = Treatment) +
  ylab("Compositional Recovery") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism),position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# temporal variability is calculated by hard coding the coefficient of variation
# |sd/abs(mean)| for each mesoMesocosm.No across all periods

Y_min<-min((tot_stab_df$temp.var),na.rm = T)-0.001
Y_max<-max((tot_stab_df$temp.var),na.rm = T)+0.001

plot_temporal_stability <- ggplot(data = tot_stab_df,
                                  mapping = aes(x = Treatment,
                                                y = temp.var),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Temporal Stability of composition") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism),position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



plot1_tot_compo <- cowplot::plot_grid(plot_resistance, plot_recovery, plot_resilience, plot_temporal_stability,
                                nrow = 2, ncol = 2, label = c("a", "b", "c", "d"))

plot1_tot_compo
##-- Reistenace--##
#hist(stab_df$resist) # assess normality (not run)


ctrl <- lmeControl(opt='optim', msMaxIter=1000, msVerbose = F);

mod.resis <- lme(resistance ~ Recurrent.treatment  + Long.treatment,
                 random = list(organism = ~ 1, Mesocosm.No = ~ 1),
                 weights = varIdent(form = ~ 1 | organism),
                 control = ctrl,
                 method = 'REML',
                 data= tot_stab_df,
                 na.action=na.omit)

## get summary table
summary.resis <- papeR::prettify(summary(mod.resis))
summary.resis$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.resis)[2] <- c("Estimate")
summary.resis

## Model validation:  
#Residuals

check_model(mod.resis)


## Estimates for the random effects:  


ranef(mod.resis)

#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$resistance <- as.numeric(predict(mod.resis))


ggplot() + geom_boxplot(data=df_new, aes(y=resistance, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=converted_resistance, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Resistance") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 
## Black boxplot are predicted, colored dots are measured


##-- Recovery--##
#hist(stab_df$resist) # assess normality (not run)

mod.recovery <- lme(recovery ~ Recurrent.treatment  + Long.treatment,
                    random = list(organism = ~ 1, Mesocosm.No = ~ 1),
                    weights = varIdent(form = ~ 1 | organism),
                    control = ctrl,
                    data= tot_stab_df,
                    na.action=na.omit)

summary.recovery <- papeR::prettify(summary(mod.recovery))
summary.recovery$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.recovery)[2] <- c("Estimate")
summary.recovery

## Model validation:  
#Residuals

check_model(mod.recovery)


## Estimates for the random effects:  


ranef(mod.recovery)


#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$recovery <- as.numeric(predict(mod.recovery))


ggplot() + geom_boxplot(data=df_new, aes(y=recovery, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=converted_recovery, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Recovery") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 



##-- Resilience--##
#hist(stab_df$resist) # assess normality (not run)

mod.resilience <- lme(resilience ~ Recurrent.treatment  + Long.treatment,
                      random = list(organism = ~ 1, Mesocosm.No = ~ 1),
                      weights = varIdent(form = ~ 1 | organism),
                      control = ctrl,
                      data= tot_stab_df,
                      na.action=na.omit)

summary.resilience <- papeR::prettify(summary(mod.resilience))
summary.resilience$` ` <- c("Intercept", "Recurrent",  "Long")
colnames(summary.resilience)[2] <- c("Estimate")
summary.resilience

## Model validation:  
#Residuals

check_model(mod.resilience)


## Estimates for the random effects:  


ranef(mod.resilience)

#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$resilience<- as.numeric(predict(mod.resilience))


ggplot() + geom_boxplot(data=df_new, aes(y=resilience, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=converted_resilience, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Resilience") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 


##-- Temporal Variability --##
#hist(stab_df$resist) # assess normality (not run)

mod.temp.var <- lme(temp.var ~ Recurrent.treatment  + Long.treatment,
                    random = list(organism = ~ 1, Mesocosm.No = ~ 1),
                    weights = varIdent(form = ~ 1 | organism),
                    control = ctrl,
                    data= tot_stab_df,
                    na.action=na.omit)

summary.temp.var <- papeR::prettify(summary(mod.temp.var))
summary.temp.var$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.temp.var)[2] <- c("Estimate")
summary.temp.var
## Model validation:  
#Residuals

check_model(mod.temp.var)


## Estimates for the random effects:  


ranef(mod.temp.var)


#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$temp.var<- as.numeric(predict(mod.temp.var))


ggplot() + geom_boxplot(data=df_new, aes(y=temp.var, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=converted_temp_var, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Temporal Variability") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 





# Next, we follow Pennekamp et al 2018, who calculated overall ecosystem stability as follows (here we apply the same concept for functional, compositional and fluxes stability):
# overall ecosystem stability requires that values of an ecosystem function (e.g. biomass production) 
# or of a stability component (e.g. resistance to temperature) be converted into a common currency. 
# Mathematical functions used for these conversions include linear and threshold (step) functions. 
# The generalised logistic function (also known as the Richard's function) 
# is flexible enough to give a wide range of conversion functions. 
# If $x$ is the measured variable, and $y$ is the converted variable, the generalised logistic function is:

$Y = A + \frac{K-A}{(C + Qe^{-Bx})^{1/v}}$
  
  * $A$ is the lower asymptote.
* $K$ is the upper asymptote.
* $B$ is the gradient.
* $v$ affects the symmetry, and also the value of $y(0)$.
* $Q$ affects the value of $y(0)$.
* $C$ is typically set to 1.
* $x$ is a variable, here the value of the measured ecosystem function or stability component.

# Overall ecosystem stability is then the sum of the standardised and converted stability components 
# $OES = c(z(res)) + z(rec)) + z(resil)) + c(z(t))$, where $rec$ is the measured resistance, 
# $rec$ is the measured recovery, $resil$ is the measured resilience,$t$ is the measured temporal stability, 
# the function $z()$ subtracts the mean and divides by the standard deviation, and $c()$ is the generalised 
# logistic function. The parameters of $c()$ were $A=$ `r A`,  $K=$ `r K`, $B=$ `r B`, $v=$ `r v`, $C=$ `r C`;
# these parameter values were 
# chosen to produce converted stability measures that span the range $A$ to $K$ and to have a relatively 
# threshold-like change from $A$ to $K$. Standardisation prior to summation emphasises that the units of 
# converted stability measures here are arbitrary (though generally need not be). Standardisation also implies 
# equal weights for different stability compononents, while [Gamfeldt et al (2008)]
# (http://onlinelibrary.wiley.com/doi/10.1890/06-2091.1/full) point out that weighting of functions 
# needs to be considered. Differential weightings, if desired and justified, can be incorporated by varying the
# parameters of the generalised logistic (or some other) conversion function. 
# How we calculated the values of Q deserves particular attention. Q is the value of the intercept of the conversion function,
# which is equivalent to the threshold value when calculating ecosystem multifunctionality with the threshold approach (Gamfeldt, L. & Roger, F. Revisiting the biodiversity-ecosystem multifunctionality
# relationship. Nat. Ecol. Evol. 1, 0168 (2017).
# For each of the four stability components, we took the highest value among the measured stability values. 
# Next, we dplyr::selected a multifunctionality threshold (Q value) of 0.5 for each stability component (50% of the  maximum calculated stability values).
# Note that we do that for the each organism group in isolation.
# The rationale for choosing a 50% treshold level is that Gamfeldt et al. (2008) made reasonable observations assuming a 50% functioning threshold 
# to study the effects of species loss on multifunctionality.Here, we do not study the direct effects of species removal, but
# those of extreme events on overall functional, compositional and fluxes stability. Though, we belive the measurement can be applied nicely also to this kind of
# climatic disturbances, which can indeed influence stability by reducing the overall number of species





#####  threshold method

gen_log <- function(A=NULL, K=NULL, C = NULL, Q=NULL, v= NULL, B=NULL, x=NULL)
  A + (K - A) / (C + Q * exp(-B*x)) ^ 1/v 

A <- -1
K <- 1
B <- 5
v <- 1
C <- 1




Q_resist_phyto <- max(compo_stab_phyto$resistance)*0.5
Q_resilience_phyto <- max(compo_stab_phyto$resilience)*0.5
Q_recovery_phyto <- max(compo_stab_phyto$recovery)*0.5
Q_temp_var_phyto <- max(compo_stab_phyto$temp.var)*0.5


tot_stab_phyto <- compo_stab_phyto %>% mutate(
  q_resistance = gen_log(A=A, K=K, B=B, v=v, Q=Q_resist_phyto, C=C, x=scale(resistance)),
  q_recovery = gen_log(A=A, K=K, B=B, v=v, Q=Q_recovery_phyto, C=C, x=scale(recovery)),
  q_resilience = gen_log(A=A, K=K, B=B, v=v, Q=Q_resilience_phyto, C=C, x=scale(resilience)),
  q_temp.var = gen_log(A=A, K=K, B=B, v=v, Q=Q_temp_var_phyto, C=C, x=scale(temp.var)),
  oes_converted = q_resistance + q_recovery +q_resilience + q_temp.var)



### ZOo



Q_resist_zoo <- max(compo_stab_zoo$resistance)*0.5
Q_resilience_zoo <- max(compo_stab_zoo$resilience)*0.5
Q_recovery_zoo <- max(compo_stab_zoo$recovery)*0.5
Q_temp_var_zoo <- max(compo_stab_zoo$temp.var)*0.5


tot_stab_zoo <- compo_stab_zoo %>% mutate(
  q_resistance = gen_log(A=A, K=K, B=B, v=v, Q=Q_resist_zoo, C=C, x=scale(resistance)),
  q_recovery = gen_log(A=A, K=K, B=B, v=v, Q=Q_recovery_zoo, C=C, x=scale(recovery)),
  q_resilience = gen_log(A=A, K=K, B=B, v=v, Q=Q_resilience_zoo, C=C, x=scale(resilience)),
  q_temp.var = gen_log(A=A, K=K, B=B, v=v, Q=Q_temp_var_zoo, C=C, x=scale(temp.var)),
  oes_converted = q_resistance + q_recovery +q_resilience + q_temp.var)



### Macro

Q_resist_macro <- max(compo_stab_macro$resistance)*0.5
Q_resilience_macro <- max(compo_stab_macro$resilience)*0.5
Q_recovery_macro <- max(compo_stab_macro$recovery)*0.5
Q_temp_var_macro <- max(compo_stab_macro$temp.var)*0.5


tot_stab_macro <- compo_stab_macro %>% mutate(
  q_resistance = gen_log(A=A, K=K, B=B, v=v, Q=Q_resist_macro, C=C, x=scale(resistance)),
  q_recovery = gen_log(A=A, K=K, B=B, v=v, Q=Q_recovery_macro, C=C, x=scale(recovery)),
  q_resilience = gen_log(A=A, K=K, B=B, v=v, Q=Q_resilience_macro, C=C, x=scale(resilience)),
  q_temp.var = gen_log(A=A, K=K, B=B, v=v, Q=Q_temp_var_macro, C=C, x=scale(temp.var)),
  oes_converted = q_resistance + q_recovery +q_resilience + q_temp.var)

### Merge different stability df #

tot_stab_df <- full_join(tot_stab_phyto, tot_stab_zoo)
tot_stab_df <- full_join(tot_stab_df, tot_stab_macro)






## Plotting OFS

Y_min<-min((tot_stab_df$oes_converted),na.rm = T)-0.001
Y_max<-max((tot_stab_df$oes_converted),na.rm = T)+0.001

plot_OFS <- ggplot(data = tot_stab_df,
                   mapping = aes(x = Treatment,
                                 y = oes_converted),
                   group=Treatment,
                   fill = Treatment) +
  ylab("Overall Compositional Stability") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

# LMM OCS
mod.OCS <- lme(oes_converted ~ Recurrent.treatment + Long.treatment,
               random = list(organism = ~ 1, Mesocosm.No = ~ 1),
               weights = varIdent(form = ~ 1 | organism),
               control = ctrl,
               method = 'REML',
               data= tot_stab_df,
               na.action=na.omit)


summary(mod.OCS)
summary.OCS <- papeR::prettify(summary(mod.OCS))
summary.OCS$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.OCS)[2] <- c("Estimate")
summary.OCS
## Model validation:  
#Residuals

check_model(mod.OCS)


## Estimates for the random effects:  


ranef(mod.OCS)


#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$OCS<- as.numeric(predict(mod.OCS))


ggplot() + geom_boxplot(data=df_new, aes(y=mod.OCS, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=oes_converted, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Overall Compositional Stability") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 





### Averaging method 
### Phyto

compo_stab_phyto_scaled <- compo_stab_phyto %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience =scale(resilience),
         converted_temp_var = scale(temp.var),
         organism = "phyto")



### ZOo


compo_stab_zoo_scaled <- compo_stab_zoo %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience =scale(resilience),
         converted_temp_var = scale(temp.var),
         organism = "zoo")



### Macro

compo_stab_macro_scaled <- compo_stab_macro %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience = scale(resilience),
         converted_temp_var = scale(temp.var), 
         organism = "macro")

tot_stab_df_scaled <- full_join(compo_stab_phyto_scaled, compo_stab_zoo_scaled)
tot_stab_df_scaled <- full_join(tot_stab_df_scaled, compo_stab_macro_scaled)

av <- tot_stab_df_scaled %>% mutate(av_OFS = converted_resistance + converted_recovery +
                               converted_resilience + converted_temp_var)




## Plotting OFS

Y_min<-min((av$av_OFS),na.rm = T)-0.001
Y_max<-max((av$av_OFS),na.rm = T)+0.001

plot_OFS <- ggplot(data = av,
                   mapping = aes(x = Treatment,
                                 y = av_OFS),
                   group=Treatment,
                   fill = Treatment) +
  ylab("Overall Compositional Stability") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism),position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))


#### trying nice plot
  mybox <- boxplot(av$av_OFS ~ av$Treatment)
  mybox$stats
  mydata2 <- as.data.frame(mybox$stats)
  av$Treatment <- factor(av$Treatment)
  names(mydata2) <- levels(av$Treatment)
  rownames(mydata2) <- c("lower_whisker","q25","median","q75","upper_whisker")
  mydata2 <- t(mydata2)
  mydata2 <- as.data.frame(mydata2)
  mydata2$Treatment <- as.factor(rownames(mydata2))
  mydata2
  
  ## To get the outliers, you can do the following:
  mybox$out; mybox$group
  
  ## This means, outlier 1 belongs to setosa, and outlier 3 to versicolor
  
  myout <- data.frame(outlier= c(mybox$out,NA),Treatment=c("Control"))
  myout

  ## Plot

  g_compo <- ggplot() + geom_flat_violin(data=av,aes(x=Treatment,y=av_OFS,fill=Treatment),
                            position=position_nudge(0.05),
                            color="white",scale="count",trim=FALSE)   ## or TRUE
    
  g_compo <- g_compo +  theme_classic() +
    theme(text = element_text(size = 16), 
          axis.text = element_text(colour = "black"),
          strip.background = element_blank(),
          legend.position = "bottom")  
  g_compo <- g_compo + labs(x="",y="Overall Compositional Stability")
  g_compo <- g_compo + scale_y_continuous(limits = c(Y_min,Y_max),
                              breaks = pretty_breaks(n = 7))
 
  g_compo <- g_compo +  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                         option = "magma",guide=F)
  
 
  g_compo
  
  ## Add the boxplot to your existing flat violinplot:
  
  ## Box
  
  g_compo <- g_compo + geom_rect(data = mydata2, stat = "identity",
                     aes(xmin = as.numeric(Treatment) - 0.25,
                         ymin = q25,
                         xmax = as.numeric(Treatment) - 0.05,
                         ymax = q75,
                         fill = Treatment),
                     color = "white")
  
  g_compo
  
  ## Median
  
  g_compo <- g_compo + geom_segment(data = mydata2, stat = "identity",
                        aes(x = as.numeric(Treatment) - 0.25,
                            y = median,
                            xend = as.numeric(Treatment) - 0.05,
                            yend = median),
                        color = "white",
                        size = 1)
  
  g_compo
  
  ## Vertical segment
  g_compo <- g_compo + geom_segment(data = mydata2, stat = "identity",
                        aes(x = as.numeric(Treatment) - 0.05,
                            y = lower_whisker,
                            xend = as.numeric(Treatment) - 0.05,
                            yend = upper_whisker),
                        color = "black")
  
  g_compo
  
  ## Bottom horizontal segment
  
  g_compo <- g_compo + geom_segment(data = mydata2, stat = "identity",
                        aes(x = as.numeric(Treatment) - 0.1,
                            y = lower_whisker,
                            xend = as.numeric(Treatment) - 0.05,
                            yend = lower_whisker),
                        color = "black")
  
  g_compo
  
  ## Top horizontal segment
  
  g_compo <- g_compo + geom_segment(data = mydata2, stat = "identity",
                        aes(x = as.numeric(Treatment) - 0.1,
                            y = upper_whisker,
                            xend = as.numeric(Treatment) - 0.05,
                            yend = upper_whisker),
                        color = "black")
  
  g_compo
  
  ## points

  g_compo <- g_compo + geom_point(data = av,
                      mapping = aes(x = Treatment,
                                    y = av_OFS, shape = organism), position = position_jitter(width = 0.05),
                      size = 2,
                      show.legend = FALSE)
  g_compo

# LMM OFS
mod.OFS <- lme(av_OFS ~ Recurrent.treatment + Long.treatment,
               random = list(organism = ~ 1, Mesocosm.No = ~ 1),
               weights = varIdent(form = ~ 1 | organism),
               control = ctrl,
               method = 'REML',
               data= av,
               na.action=na.omit)



summary.OFS <- papeR::prettify(summary(mod.OFS))
summary.OFS$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.OFS)[2] <- c("Estimate")
summary.OFS
## Model validation:  
#Residuals

check_model(mod.OFS)


write.csv(av, "F:/IMDEA/Mesocosm 2021/Heat Waves on STability/Data/Total_Compositional_Stability.csv", row.names = FALSE, quote = FALSE)


NEW_compositional_stability <- plot_resistance+plot_resilience+plot_recovery+plot_temporal_stability+plot_OFS
ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/NEW_compositional_stability.pdf", NEW_compositional_stability, pagecentre = F, 
       width=18, height=10, pointsize=8)
#------------#### FLUXES STABILIY ####---------------------#
# For this part, you will have to run first the code entitled "Food web and fluxes calculations"

rm(list = ls())
DIR = "F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/"
setwd(DIR)




# We first check total fluxes dynamics over time###
# load dataset
fluxes <- read.csv( "F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Data/Fluxes_by_organism.csv")
names(fluxes)
fluxes[is.na(fluxes)] <- 0

fluxes <- fluxes %>% group_by(Day, Mesocosm.No) %>%  mutate(basal = sum(Phytoplankton + Periphyton),
                            Zooplankton = sum(Micro.zooplankton + Zooplankton),
                            Predators = sum(Top.predator + Predator))
names(fluxes)
fluxes <- fluxes[,-c(7,8,9,13,12 )]
view(fluxes)
#gather data from columns 2 and 3
flux_plot <- fluxes %>%  gather(organism, fluxes, -c(Day, Treatment, Mesocosm.No,  Recurrent.treatment, Long.treatment, Phase))
flux_plot  %>%   ggplot(aes(x=factor(Day), y=log(fluxes), fill=Treatment))+geom_boxplot(position=position_dodge(0.8)) + facet_wrap("organism") 

tot.fluxes <- fluxes[, c(1:6)]
tot.fluxes<-as.data.frame(tot.fluxes) 
tot.fluxes$total.fluxes<- rowSums(fluxes[, c(7:13)])

### Log10 fluxes
tot.fluxes$total.flux_log <- log10(tot.fluxes$total.fluxes+1)
### Fluxes dynamics ###

# Plot summary total fluxes dynamics 

tot.fluxes$Treatment <- factor(tot.fluxes$Treatment, levels = c("Control", "Long", "Recurrent"))



se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_fluxes_dynamics <- tot.fluxes %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_fluxes = mean((total.flux_log), na.rm=T), se= se(total.flux_log)) %>%
  mutate(lower_y = mean_fluxes-se, upper_y = mean_fluxes+se) %>% 
  ggplot(aes(y=mean_fluxes, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.3, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("log10(Fluxes) (J/m/day))") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  scale_x_continuous(limits = c(-5,80), breaks = c(-4,10,24,38,52,66,80)) +
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))

tot_fluxes_dynamics



ctrl <- lmeControl(opt='optim', msMaxIter=1000, msVerbose = F);
mod.tot.fluxes <- lme(total.flux_log ~ Recurrent.treatment  + Long.treatment,
                   random =  ~ 1|Mesocosm.No,
                   control = ctrl,
                   method = 'REML',
                   data= tot.fluxes,
                   na.action=na.omit)



## get summary table
summary.tot.fluxes <- papeR::prettify(summary(mod.tot.fluxes))
summary.tot.fluxes$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.tot.fluxes)[2] <- c("Estimate")
summary.tot.fluxes

## Model validation:  
#Residuals

check_model(mod.tot.fluxes)
## Model 2: total fluxes, split by day

# We also examined variation in the estimated effects of the treatments
# and insecticide differed over the course of the experiment. 
# To do so, we fitted mixed models for each day. 


## split the data by day
dd3_bm <- tot.fluxes %>% 
  dplyr::select(Day, total.flux_log, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>%  
  group_by(Day) %>% 
  nest()



ctrl <- lmeControl(opt='optim');
dd3_bm <- dd3_bm %>% filter(Day  > 0) %>%
  mutate(mod_per_day_bm_trend = map(data, ~ lme(total.flux_log ~ Recurrent.treatment + Long.treatment,
                                                random = ~ 1 | Mesocosm.No,
                                                control = ctrl,
                                                data=.,
                                                na.action=na.omit)))



dd3_bm <- dd3_bm[,1:3]

# extract model coefficients
fixed_per_day <-  plyr::ldply(map(dd3_bm$mod_per_day_bm_trend, ~ fixed.effects(.)))
confid_per_day <-  bind_rows(lapply(1:nrow(dd3_bm),
                                    function(x) tibble::rownames_to_column(
                                      as.data.frame(intervals(dd3_bm$mod_per_day_bm_trend[[x]], which="fixed")$fixed))))

confid_per_day_t <- confid_per_day %>% 
  mutate(day = rep(1:6, each=3)) %>%
  dplyr::select(rowname, lower, upper, day) %>%
  gather(var, value, -rowname, -day) %>% 
  mutate(rowname2 = paste0(rowname, "_", var),
         rowname3 = paste0(rowname, "_", var, "_", day)) %>%
  dplyr::select(day, rowname2, value) %>%
  spread(rowname2, value) 

dd3_bm <- cbind(dd3_bm, fixed_per_day, confid_per_day_t)



plot_dd3 <- dd3_bm[, c(-2,-3)]
gg_HW <-  ggplot(data=plot_dd3, aes(y=Recurrent.treatmentPresent, x=Day))  +
  geom_ribbon(aes(ymin = Recurrent.treatmentPresent_lower, ymax = Recurrent.treatmentPresent_upper), fill="lightgrey") +
  geom_line() + xlab("")+ geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 30, unit = "pt")) +
  theme_classic()+
  ylab("Recurrent\nmain effect")

gg_Warm <- ggplot(data=plot_dd3, aes(y= Long.treatmentPresent, x=Day)) +
  geom_ribbon(aes(ymin = Long.treatmentPresent_lower, ymax = `Long.treatmentPresent_upper`), fill="lightgrey") +
  geom_line()  + xlab("") + geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme_classic()+
  ylab("Long\nmain effect")


effects_size_flux <- tot_fluxes_dynamics/(gg_HW + gg_Warm)

ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/p_effect_size_fluxes.pdf", effects_size_flux, pagecentre = F, 
       width=18, height=12, pointsize=8) #saves g

p_effect_size <- cowplot::plot_grid(gg_HW, gg_Warm,
                                    align = "hv",  ncol=2, nrow = 1, labels = c("a", "b"))







### Phytoplankton####
### Calculate total biomass per mesoMesocosm.No ###
names(fluxes)
tot.fluxes.phyto <- fluxes[, c(1:6)]
tot.fluxes.phyto<-as.data.frame(tot.fluxes.phyto) 
tot.fluxes.phyto$total.fluxes<- rowSums(fluxes[, c(7:8)])
tot.fluxes.phyto$total.fl_log <- log10(tot.fluxes.phyto$total.fluxes)


### Resistance ###

# dplyr::select control as reference 
control_fl <- tot.fluxes.phyto %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_fl_control = mean(total.fl_log, na.rm = T))
# dplyr::select all other treatments
fl_all_treat <- tot.fluxes.phyto %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_fl = mean(total.fl_log, na.rm = T))

fl_data <- merge(fl_all_treat, control_fl, by = "Day")



# resistance defined as the difference between stressed and control divided by the control
# at the end of the treatment phase (i.e. Pennekamp et al 2018)

fl_resist <-  fl_data %>% 
  mutate(resist= ((fl_data$mean_fl-fl_data$mean_fl_control)/fl_data$mean_fl_control))

# dplyr::select only the days we want to test (10, 24, 38)
target <- c(10, 24, 38)
fl_resist <- fl_resist %>% 
  filter(Day %in% target)


# for now let's keep only resistence values for day 38
fl_resist_38 <-  fl_resist %>% 
  filter(Day == 38)
#remome column "Day"
fl_resist_38 <- fl_resist_38[,-1]
# plot resistance
Y_min<-min(c(fl_resist_38$resist),na.rm = T)-0.001
Y_max<-max(c(fl_resist_38$resist),na.rm = T)+0.001


# Since resistance was calculated in relation to the control, we are going to 
# put a line with y = 0 which is the benchmark for control values
plot_resistance_dd <- fl_resist_38 

plot_resistance <-  ggplot(data = plot_resistance_dd,
                           mapping = aes(x = Treatment,
                                         y = resist),
                           group=Treatment,
                           fill = Treatment) +
  ylab("Fluxes Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



### RESILIENCE ###



# remove Day -4 
fl_resilience <- fl_data%>% 
  filter(Day != -4)


# functional resilience defined as the slope of the log-transformed difference (LRR) between 
# perturbed and control biomass (e.g., Hillebrand et al 2018)

fl_resilience <-  fl_resilience %>% 
  mutate(LRR = log(fl_resilience$mean_fl/fl_resilience$mean_fl_control))

resilience_model <- lmList(LRR ~ Day | Mesocosm.No, data=fl_resilience)
df.coef <- as.data.frame( coef(summary(resilience_model)) )
# visualize resilience

ggplot(data = fl_resilience, aes(Day, LRR, color = Treatment))+
  geom_quasirandom()+
  theme_bw()+
  geom_smooth(method=lm)+
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma")

# now we want to merge the resilience values (n = 12) with the relative treatments' info
# to do that we take only the info need from bm_resilience
# we need: Mesocosm.No ID, Treatment, Heat.tretament, Long.treatment 

fl_resilience <- fl_resilience %>% 
  filter(Day == 10) %>% 
  dplyr::select(Day,Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) 


fl_resilience <-  fl_resilience %>% 
  mutate(resilience = df.coef$Estimate.Day)
names(fl_resilience)

plot_resistance_dd <- fl_resilience 

Y_min<-min(c(fl_resilience$resilience),na.rm = T)-0.001
Y_max<-max(c(fl_resilience$resilience),na.rm = T)+0.001
plot_resilience <- ggplot(data = plot_resistance_dd,
                          mapping = aes(x = Treatment,
                                        y = resilience),
                          group=Treatment,
                          fill = Treatment) +
  ylab("Fluxes Resilience") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

### RECOVERY ###

# Recovery is here defined as the difference between stressed and control divided 
# by the control at the end of the experiment.
# Same as Resistance, but at the end of the experiment

# we need to take only the last day of the experiment ( Day == 80)

recovery_fl <- fl_data%>% 
  filter(Day == 80)


recovery_fl$recovery <- (recovery_fl$mean_fl-recovery_fl$mean_fl_control)/recovery_fl$mean_fl_control


### Plot recovery
plot_recovery_dd <- recovery_fl


Y_min<-min(c(recovery_fl$recovery),na.rm = T)-0.001
Y_max<-max(c(recovery_fl$recovery),na.rm = T)+0.001

plot_recovery <- ggplot(data = plot_recovery_dd,
                        mapping = aes(x = Treatment,
                                      y = recovery),
                        group=Treatment,
                        fill = Treatment) +
  ylab("Fluxes Recovery") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# temporal variability is calculated by hard coding the coefficient of variation
# |sd/abs(mean)| for each mesoMesocosm.No across all periods

# analysis of temporal stability
temp_stab <- tot.fluxes.phyto %>% 
  group_by(Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(inv_community_CV = mean(total.fluxes, na.rm=T)/sd(total.fluxes, na.rm = T))

# Plot temporal stability 
plot_temp_stab_dd <- temp_stab


Y_min<-min(c(log10(temp_stab$inv_community_CV+1)),na.rm = T)-0.001
Y_max<-max(c(log10(temp_stab$inv_community_CV+1)),na.rm = T)+0.001

plot_temporal_stability <- ggplot(data = plot_temp_stab_dd,
                                  mapping = aes(x = Treatment,
                                                y = log10(inv_community_CV+1)),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Temporal Stability log(mean/STD)") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

## join resistance and temporal stability data
fluxes_stab_phyto <- cbind(fl_resist_38[,c(1:4,7)], fl_resilience$resilience, recovery_fl$recovery, temp_stab$inv_community_CV)


fluxes_stab_phyto <- fluxes_stab_phyto %>% 
  dplyr::rename(resistance = "resist", resilience = "fl_resilience$resilience",
                recovery = "recovery_fl$recovery", temp.var = "temp_stab$inv_community_CV")

fluxes_stab_phyto$organism <- "phyto"


plot1_phyto <- cowplot::plot_grid(plot_resistance, plot_recovery, plot_resilience, plot_temporal_stability,
                                  nrow = 2, ncol = 2, label = c("a", "b", "c", "d"))



# Resistance was calculated only for Day 10. Let's check also what happened in the other dates in the 
# treatments phase
### Resistance D10, 24, 38 ###

# dplyr::select only the days we want to test (10, 24, 38)
target <- c(10, 24, 38)
fl_resist <- fl_resist %>% 
  filter(Day %in% target)


#  now let's check resistence values for day 24
fl_resist_24 <-  fl_resist %>% 
  filter(Day == 24)
#remome column "Day"
fl_resist_24 <- fl_resist_24[,-1]
# plot resistance
Y_min<-min(c(fl_resist_24$resist),na.rm = T)-0.001
Y_max<-max(c(fl_resist_24$resist),na.rm = T)+0.001


# Since resistance was calculated in relation to the control, we are going to 
# put a line with y = 0 which is the benchmark for control values
plot_resistance_dd_24 <- fl_resist_24 %>% 
  filter(!(Treatment %in% c("Control")))

plot_resistance_24 <-  ggplot(data = plot_resistance_dd_24,
                              mapping = aes(x = Treatment,
                                            y = resist),
                              group=Treatment,
                              fill = Treatment) +
  ylab("Fluxes Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

#  now let's check resistence values for day 10
fl_resist_10 <-  fl_resist %>% 
  filter(Day == 10)
#remome column "Day"
fl_resist_10 <- fl_resist_10[,-1]
# plot resistance
Y_min<-min(c(fl_resist_10$resist),na.rm = T)-0.001
Y_max<-max(c(fl_resist_10$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to
# put a line with y = 0 which is the benchmark for control values
plot_resistance_dd_10<- fl_resist_10 %>% 
  filter(!(Treatment %in% c("Control")))

plot_resistance_10 <-  ggplot(data = plot_resistance_dd_10,
                              mapping = aes(x = Treatment,
                                            y = resist),
                              group=Treatment,
                              fill = Treatment) +
  ylab("Fluxes Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

plot2 <- cowplot::plot_grid(plot_resistance, plot_resistance_24, plot_resistance_38, 
                            nrow = 1, ncol = 3, labels=c("a", "b", "c"))





### Fluxes dynamics phyto ###

# Plot summary total Fluxes dynamics 
tot.fluxes.phyto$Treatment <- factor(tot.fluxes.phyto$Treatment, levels = c("Control", "Long", "Recurrent"))


se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_fl_dynamics_phyto <- tot.fluxes.phyto %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_fluxes = mean((total.fl_log), na.rm=T), se= se(total.fl_log)) %>%
  mutate(lower_y = mean_fluxes-se, upper_y = mean_fluxes+se) %>% 
  ggplot(aes(y=mean_fluxes, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.1, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("Fluxes)") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))

tot_fl_dynamics_phyto



## Model 2: total fluxes, split by day

# We also examined variation in the estimated effects of the treatments
# and insecticide differed over the course of the experiment. 
# To do so, we fitted mixed models for each day. 


## split the data by day
dd3_bm <- tot.fluxes.phyto %>% 
  dplyr::select(Day, total.fl_log, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>%  
  group_by(Day) %>% 
  nest()



ctrl <- lmeControl(opt='optim');
dd3_bm <- dd3_bm %>% filter(Day  > 0) %>%
  mutate(mod_per_day_bm_trend = map(data, ~ lme(total.fl_log ~ Recurrent.treatment + Long.treatment,
                                                random = ~ 1 | Mesocosm.No,
                                                control = ctrl,
                                                data=.,
                                                na.action=na.omit)))



dd3_bm <- dd3_bm[,1:3]

# extract model coefficients
fixed_per_day <-  plyr::ldply(map(dd3_bm$mod_per_day_bm_trend, ~ fixed.effects(.)))
confid_per_day <-  bind_rows(lapply(1:nrow(dd3_bm),
                                    function(x) tibble::rownames_to_column(
                                      as.data.frame(intervals(dd3_bm$mod_per_day_bm_trend[[x]], which="fixed")$fixed))))

confid_per_day_t <- confid_per_day %>% 
  mutate(day = rep(1:6, each=3)) %>%
  dplyr::select(rowname, lower, upper, day) %>%
  gather(var, value, -rowname, -day) %>% 
  mutate(rowname2 = paste0(rowname, "_", var),
         rowname3 = paste0(rowname, "_", var, "_", day)) %>%
  dplyr::select(day, rowname2, value) %>%
  spread(rowname2, value) 

dd3_bm <- cbind(dd3_bm, fixed_per_day, confid_per_day_t)



plot_dd3 <- dd3_bm[, c(-2,-3)]
gg_HW <-  ggplot(data=plot_dd3, aes(y=Recurrent.treatmentPresent, x=Day))  +
  geom_ribbon(aes(ymin = Recurrent.treatmentPresent_lower, ymax = Recurrent.treatmentPresent_upper), fill="lightgrey") +
  geom_line() + xlab("")+ geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 30, unit = "pt")) +
  theme_classic()+
  ylab("Recurrent\nmain effect")

gg_Warm <- ggplot(data=plot_dd3, aes(y= Long.treatmentPresent, x=Day)) +
  geom_ribbon(aes(ymin = Long.treatmentPresent_lower, ymax = `Long.treatmentPresent_upper`), fill="lightgrey") +
  geom_line()  + xlab("") + geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme_classic()+
  ylab("Long\nmain effect")

tot_fl_dynamics_phyto/(gg_HW + gg_Warm)

p_effect_size <- cowplot::plot_grid(gg_HW, gg_Warm, 
                                    align = "hv",  ncol=2, nrow = 1, labels = c("a", "b"))












### zooplankton####
### Calculate total biomass per mesoMesocosm.No ###
names(fluxes)
tot.fluxes.zoo <- fluxes[, c(1:6)]
tot.fluxes.zoo<-as.data.frame(tot.fluxes.zoo) 
tot.fluxes.zoo$total.fluxes<- rowSums(fluxes[, c(9:10)])
tot.fluxes.zoo$total.fl_log <- log10(tot.fluxes.zoo$total.fluxes)


### Resistance ###

# dplyr::select control as reference 
control_fl <- tot.fluxes.zoo %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_fl_control = mean(total.fl_log, na.rm = T))
# dplyr::select all other treatments
fl_all_treat <- tot.fluxes.zoo %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_fl = mean(total.fl_log, na.rm = T))

fl_data_zoo <- merge(fl_all_treat, control_fl, by = "Day")



# resistance defined as the difference between stressed and control divided by the control
# at the end of the treatment phase (i.e. Pennekamp et al 2018)

fl_resist <-  fl_data_zoo %>% 
  mutate(resist= ((fl_data_zoo$mean_fl-fl_data_zoo$mean_fl_control)/fl_data_zoo$mean_fl_control))

# dplyr::select only the days we want to test (10, 24, 38)
target <- c(10, 24, 38)
fl_resist <- fl_resist %>% 
  filter(Day %in% target)


# for now let's keep only resistance values for day 38
fl_resist_38 <-  fl_resist %>% 
  filter(Day == 38)
#remome column "Day"
fl_resist_38 <- fl_resist_38[,-1]
# plot resistance
Y_min<-min(c(fl_resist_38$resist),na.rm = T)-0.001
Y_max<-max(c(fl_resist_38$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to 
# put a line with y = 0 which is the benchmark for control values
plot_resistance_dd <- fl_resist_38 

plot_resistance <-  ggplot(data = plot_resistance_dd,
                           mapping = aes(x = Treatment,
                                         y = resist),
                           group=Treatment,
                           fill = Treatment) +
  ylab("Fluxes Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



### RESILIENCE ###



# remove Day -4 
fl_resilience <- fl_data_zoo%>% 
  filter(Day != -4)


#  resilience defined as the slope of the log-transformed difference (LRR) between 
# perturbed and control biomass (e.g., Hillebrand et al 2018)

fl_resilience <-  fl_resilience %>% 
  mutate(LRR = log(fl_resilience$mean_fl/fl_resilience$mean_fl_control+1))

resilience_model <- lmList(LRR ~ Day | Mesocosm.No, data=fl_resilience)
df.coef <- as.data.frame( coef(summary(resilience_model)) )
# visualize resilience

ggplot(data = fl_resilience, aes(Day, LRR, color = Treatment))+
  geom_quasirandom()+
  theme_bw()+
  geom_smooth(method=lm)+
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma")

# now we want to merge the resilience values (n = 12) with the relative treatments' info
# to do that we take only the info need from bm_resilience
# we need: Mesocosm.No ID, Treatment, Heat.tretament, Long.treatment 

fl_resilience <- fl_resilience %>% 
  filter(Day == 10) %>% 
  dplyr::select(Day,Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) 


fl_resilience <-  fl_resilience %>% 
  mutate(resilience = df.coef$Estimate.Day)

names(fl_resilience)

plot_resistance_dd <- fl_resilience

Y_min<-min(c(fl_resilience$resilience),na.rm = T)-0.001
Y_max<-max(c(fl_resilience$resilience),na.rm = T)+0.001
plot_resilience <- ggplot(data = plot_resistance_dd,
                          mapping = aes(x = Treatment,
                                        y = resilience),
                          group=Treatment,
                          fill = Treatment) +
  ylab("Fluxes Resilience") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

### RECOVERY ###


recovery_fl <- fl_data_zoo%>% 
  filter(Day == 80)

recovery_fl$recovery <- (recovery_fl$mean_fl-recovery_fl$mean_fl_control)/recovery_fl$mean_fl_control


### Plot recovery
plot_recovery_dd <- recovery_fl 


Y_min<-min(c(recovery_fl$recovery),na.rm = T)-0.001
Y_max<-max(c(recovery_fl$recovery),na.rm = T)+0.001

plot_recovery <- ggplot(data = plot_recovery_dd,
                        mapping = aes(x = Treatment,
                                      y = recovery),
                        group=Treatment,
                        fill = Treatment) +
  ylab("Fluxes Recovery") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# temporal variability is calculated by hard coding the coefficient of variation
# |sd/abs(mean)| for each mesoMesocosm.No across all periods

# analysis of temporal stability
temp_stab <- tot.fluxes.zoo %>% 
  group_by(Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(inv_community_CV = mean(total.fluxes, na.rm=T)/sd(total.fluxes, na.rm = T))

# Plot temporal stability 
plot_temp_stab_dd <- temp_stab 


Y_min<-min(c(log10(temp_stab$inv_community_CV+1)),na.rm = T)-0.001
Y_max<-max(c(log10(temp_stab$inv_community_CV+1)),na.rm = T)+0.001

plot_temporal_stability <- ggplot(data = plot_temp_stab_dd,
                                  mapping = aes(x = Treatment,
                                                y = log10(inv_community_CV+1)),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Temporal Stability log(mean/STD)") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

## join resistance and temporal stability data
fluxes_stab_zoo <- cbind(fl_resist_38[,c(1:4,7)], fl_resilience$resilience, recovery_fl$recovery, temp_stab$inv_community_CV)


fluxes_stab_zoo <- fluxes_stab_zoo %>% 
  dplyr::rename(resistance = "resist", resilience = "fl_resilience$resilience",
                recovery = "recovery_fl$recovery", temp.var = "temp_stab$inv_community_CV")

fluxes_stab_zoo$organism <- "zoo"


plot1_zoo <- cowplot::plot_grid(plot_resistance, plot_recovery, plot_resilience, plot_temporal_stability,
                                nrow = 2, ncol = 2, label = c("a", "b", "c", "d"))



# Resistance was calculated only for Day 38 Let's check also what happened in the other dates in the 
# treatments phase
### Resistance D10, 24, 38 ###

# dplyr::select only the days we want to test (10, 24, 38)
target <- c(10, 24, 38)
fl_resist <- fl_resist %>% 
  filter(Day %in% target)


#  now let's check resistence values for day 24
fl_resist_24 <-  fl_resist %>% 
  filter(Day == 24)
#remome column "Day"
fl_resist_24 <- fl_resist_24[,-1]
# plot resistance
Y_min<-min(c(fl_resist_24$resist),na.rm = T)-0.001
Y_max<-max(c(fl_resist_24$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to exculde the controls,
# but we put a line with y = 0 which is the benchmark for control values
plot_resistance_dd_24 <- fl_resist_24 %>% 
  filter(!(Treatment %in% c("Control")))

plot_resistance_24 <-  ggplot(data = plot_resistance_dd_24,
                              mapping = aes(x = Treatment,
                                            y = resist),
                              group=Treatment,
                              fill = Treatment) +
  ylab("Functional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

#  now let's check resistence values for day 10
fl_resist_10 <-  fl_resist %>% 
  filter(Day == 10)
#remome column "Day"
fl_resist_10 <- fl_resist_10[,-1]
# plot resistance
Y_min<-min(c(fl_resist_10$resist),na.rm = T)-0.001
Y_max<-max(c(fl_resist_10$resist),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to exculde the controls,
# but we put a line with y = 0 which is the benchmark for control values
plot_resistance_dd_10<- fl_resist_10 %>% 
  filter(!(Treatment %in% c("Control")))

plot_resistance_10 <-  ggplot(data = plot_resistance_dd_10,
                              mapping = aes(x = Treatment,
                                            y = resist),
                              group=Treatment,
                              fill = Treatment) +
  ylab("Functional Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

plot2 <- cowplot::plot_grid(plot_resistance, plot_resistance_24, plot_resistance_38, 
                            nrow = 1, ncol = 3, labels=c("a", "b", "c"))





### fluxes dynamics zoo ###

# Plot summary total fluxes dynamics 
tot.fluxes.zoo$Treatment <- factor(tot.fluxes.zoo$Treatment, levels = c("Control", "Long", "Recurrent"))


se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_fl_dynamics_zoo <- tot.fluxes.zoo %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_fluxes = mean((total.fl_log), na.rm=T), se= se(total.fl_log)) %>%
  mutate(lower_y = mean_fluxes-se, upper_y = mean_fluxes+se) %>% 
  ggplot(aes(y=mean_fluxes, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.1, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("Fluxes)") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))

tot_fl_dynamics_zoo




## Model 2: total fluxes, split by day

# We also examined variation in the estimated effects of the treatments
# and insecticide differed over the course of the experiment. 
# To do so, we fitted mixed models for each day. 


## split the data by day
dd3_bm <- tot.fluxes.zoo %>% 
  dplyr::select(Day, total.fl_log, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>%  
  group_by(Day) %>% 
  nest()



ctrl <- lmeControl(opt='optim');
dd3_bm <- dd3_bm %>% filter(Day  > 0) %>%
  mutate(mod_per_day_bm_trend = map(data, ~ lme(total.fl_log ~ Recurrent.treatment + Long.treatment,
                                                random = ~ 1 | Mesocosm.No,
                                                control = ctrl,
                                                data=.,
                                                na.action=na.omit)))



dd3_bm <- dd3_bm[,1:3]

# extract model coefficients
fixed_per_day <-  plyr::ldply(map(dd3_bm$mod_per_day_bm_trend, ~ fixed.effects(.)))
confid_per_day <-  bind_rows(lapply(1:nrow(dd3_bm),
                                    function(x) tibble::rownames_to_column(
                                      as.data.frame(intervals(dd3_bm$mod_per_day_bm_trend[[x]], which="fixed")$fixed))))

confid_per_day_t <- confid_per_day %>% 
  mutate(day = rep(1:6, each=3)) %>%
  dplyr::select(rowname, lower, upper, day) %>%
  gather(var, value, -rowname, -day) %>% 
  mutate(rowname2 = paste0(rowname, "_", var),
         rowname3 = paste0(rowname, "_", var, "_", day)) %>%
  dplyr::select(day, rowname2, value) %>%
  spread(rowname2, value) 

dd3_bm <- cbind(dd3_bm, fixed_per_day, confid_per_day_t)
names(plot_dd3)



plot_dd3 <- dd3_bm[, c(-2,-3)]
gg_HW <-  ggplot(data=plot_dd3, aes(y=Recurrent.treatmentPresent, x=Day))  +
  geom_ribbon(aes(ymin = Recurrent.treatmentPresent_lower, ymax = Recurrent.treatmentPresent_upper), fill="lightgrey") +
  geom_line() + xlab("")+ geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 30, unit = "pt")) +
  theme_classic()+
  ylab("Recurrent\nmain effect")

gg_Warm <- ggplot(data=plot_dd3, aes(y= Long.treatmentPresent, x=Day)) +
  geom_ribbon(aes(ymin = Long.treatmentPresent_lower, ymax = `Long.treatmentPresent_upper`), fill="lightgrey") +
  geom_line()  + xlab("") + geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme_classic()+
  ylab("Long\nmain effect")


tot_fl_dynamics_zoo/(gg_HW + gg_Warm)









### macroinvertebrates ####
### Calculate total biomass per mesoMesocosm.No ###
names(fluxes)
tot.fluxes.macro <- fluxes[, c(1:6)]
tot.fluxes.macro<-as.data.frame(tot.fluxes.macro) 
tot.fluxes.macro$total.fluxes<- rowSums(fluxes[, 11:13])
tot.fluxes.macro$total.fl_log <- log10(tot.fluxes.macro$total.fluxes+1)


### Resistance ###

# dplyr::select control as reference 
control_fl <- tot.fluxes.macro %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_fl_control = mean(total.fl_log, na.rm = T))
# dplyr::select all other treatments
fl_all_treat <- tot.fluxes.macro %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_fl = mean(total.fl_log, na.rm = T))

fl_data_macro <- merge(fl_all_treat, control_fl, by = "Day")



# resistance defined as the difference between stressed and control divided by the control (i.e. Pennekamp et al 2018)

fl_resist <-  fl_data_macro %>% 
  mutate(resist= ((fl_data_macro$mean_fl-fl_data_macro$mean_fl_control)/fl_data_macro$mean_fl_control))

# dplyr::select only the days we want to test (10, 24, 38)
target <- c(10, 24, 38)
fl_resist <- fl_resist %>% 
  filter(Day %in% target)


# for now let's keep only resistance values for day 38
fl_resist_38 <-  fl_resist %>% 
  filter(Day == 38)
#remove column "Day"
fl_resist_38 <- fl_resist_38[,-1]
# plot resistance
Y_min<-min(c(fl_resist_38$resist),na.rm = T)-0.001
Y_max<-max(c(fl_resist_38$resist),na.rm = T)+0.001


# Since resistance was calculated in relation to the control, we are going to exculde the controls,
# but we put a line with y = 0 which is the benchmark for control values
plot_resistance_dd <- fl_resist_38 

plot_resistance <-  ggplot(data = plot_resistance_dd,
                           mapping = aes(x = Treatment,
                                         y = resist),
                           group=Treatment,
                           fill = Treatment) +
  ylab("Fluxes Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



### RESILIENCE ###



# remove Day -4 
fl_resilience <- fl_data_macro%>% 
  filter(Day != -4)


# functional resilience defined as the slope of the log-transformed difference (LRR) between 
# perturbed and control biomass (e.g., Hillebrand et al 2018)

fl_resilience <-  fl_resilience %>% 
  mutate(LRR = log(fl_resilience$mean_fl/fl_resilience$mean_fl_control))

resilience_model <- lmList(LRR ~ Day | Mesocosm.No, data=fl_resilience)
df.coef <- as.data.frame( coef(summary(resilience_model)) )
# visualize resilience

ggplot(data = fl_resilience, aes(Day, LRR, color = Treatment))+
  geom_quasirandom()+
  theme_bw()+
  geom_smooth(method=lm)+
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma")

# now we want to merge the resilience values (n = 12) with the relative treatments' info
# to do that we take only the info need from bm_resilience
# we need: Mesocosm.No ID, Treatment, Heat.tretament, Long.treatment 

fl_resilience <- fl_resilience %>% 
  filter(Day == 10) %>% 
  dplyr::select(Day,Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) 


fl_resilience <-  fl_resilience %>% 
  mutate(resilience = df.coef$Estimate.Day)
names(fl_resilience)

plot_resistance_dd <- fl_resilience 

Y_min<-min(c(fl_resilience$resilience),na.rm = T)-0.001
Y_max<-max(c(fl_resilience$resilience),na.rm = T)+0.001
plot_resilience <- ggplot(data = plot_resistance_dd,
                          mapping = aes(x = Treatment,
                                        y = resilience),
                          group=Treatment,
                          fill = Treatment) +
  ylab("Fluxes Resilience") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

### RECOVERY ###

# Recovery is here defined as the difference between stressed and control divided 
# by the control at the end of the experiment
# we need to take only the last day of the experiment ( Day == 80)


recovery_fl <- fl_data_macro%>% 
  filter(Day == 80)



# resistance defined as the difference between stressed and control divided by the control (i.e. Pennekamp et al 2018)

recovery_fl$recovery <- (recovery_fl$mean_fl-recovery_fl$mean_fl_control)/recovery_fl$mean_fl_control


### Plot recovery
plot_recovery_dd <- recovery_fl 


Y_min<-min(c(recovery_fl$recovery),na.rm = T)-0.001
Y_max<-max(c(recovery_fl$recovery),na.rm = T)+0.001

plot_recovery <- ggplot(data = plot_recovery_dd,
                        mapping = aes(x = Treatment,
                                      y = recovery),
                        group=Treatment,
                        fill = Treatment) +
  ylab("Fluxes Recovery") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# temporal variability is calculated by hard coding the coefficient of variation
# |sd/abs(mean)| for each mesoMesocosm.No across all periods

# analysis of temporal stability
temp_stab <- tot.fluxes.macro %>% 
  group_by(Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(inv_community_CV = mean(total.fluxes, na.rm=T)/sd(total.fluxes, na.rm = T))

# Plot temporal stability 
plot_temp_stab_dd <- temp_stab


Y_min<-min(c(log10(temp_stab$inv_community_CV+1)),na.rm = T)-0.001
Y_max<-max(c(log10(temp_stab$inv_community_CV+1)),na.rm = T)+0.001

plot_temporal_stability <- ggplot(data = plot_temp_stab_dd,
                                  mapping = aes(x = Treatment,
                                                y = log10(inv_community_CV+1)),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Temporal Stability log(mean/STD)") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

## join resistance and temporal stability data
fluxes_stab_macro <- cbind(fl_resist_38[,c(1:4,7)], fl_resilience$resilience, recovery_fl$recovery, temp_stab$inv_community_CV)


fluxes_stab_macro <- fluxes_stab_macro %>% 
  dplyr::rename(resistance = "resist", resilience = "fl_resilience$resilience",
                recovery = "recovery_fl$recovery", temp.var = "temp_stab$inv_community_CV")

fluxes_stab_macro$organism <- "macro"


plot1_macro <- cowplot::plot_grid(plot_resistance, plot_recovery, plot_resilience, plot_temporal_stability,
                                  nrow = 2, ncol = 2, label = c("a", "b", "c", "d"))



# Resistance was calculated only for Day 10. Let's check also what happened in the other dates in the 
# treatments phase
### Resistance D10, 24, 38 ###

# dplyr::select only the days we want to test (10, 24, 38)
target <- c(10, 24, 38)
fl_resist <- fl_resist %>% 
  filter(Day %in% target)


#  now let's check resistence values for day 24
fl_resist_24 <-  fl_resist %>% 
  filter(Day == 24)
#remome column "Day"
fl_resist_24 <- fl_resist_24[,-1]
# plot resistance
Y_min<-min(c(fl_resist_24$resist),na.rm = T)-0.001
Y_max<-max(c(fl_resist_24$resist),na.rm = T)+0.001


plot_resistance_dd_24 <- fl_resist_24 %>% 
  filter(!(Treatment %in% c("Control")))

plot_resistance_24 <-  ggplot(data = plot_resistance_dd_24,
                              mapping = aes(x = Treatment,
                                            y = resist),
                              group=Treatment,
                              fill = Treatment) +
  ylab("Fluxes Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

#  now let's check resistence values for day 10
fl_resist_10 <-  fl_resist %>% 
  filter(Day == 10)
#remome column "Day"
fl_resist_10 <- fl_resist_10[,-1]
# plot resistance
Y_min<-min(c(fl_resist_10$resist),na.rm = T)-0.001
Y_max<-max(c(fl_resist_10$resist),na.rm = T)+0.001


plot_resistance_dd_10<- fl_resist_10 %>% 
  filter(!(Treatment %in% c("Control")))

plot_resistance_10 <-  ggplot(data = plot_resistance_dd_10,
                              mapping = aes(x = Treatment,
                                            y = resist),
                              group=Treatment,
                              fill = Treatment) +
  ylab("Fluxes Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.35),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

plot2 <- cowplot::plot_grid(plot_resistance, plot_resistance_24, plot_resistance_38, 
                            nrow = 1, ncol = 3, labels=c("a", "b", "c"))





### Fluxes dynamics macro ###

# Plot summary total Fluxes dynamics 
tot.fluxes.macro$Treatment <- factor(tot.fluxes.macro$Treatment, levels = c("Control", "Long", "Recurrent"))


se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))

tot_fl_dynamics_macro <- tot.fluxes.macro %>% group_by(Treatment, Day, color=Treatment, fill=Treatment) %>%
  dplyr::summarize(mean_fluxes = mean((total.fl_log), na.rm=T), se= se(total.fl_log)) %>%
  mutate(lower_y = mean_fluxes-se, upper_y = mean_fluxes+se) %>% 
  ggplot(aes(y=mean_fluxes, x=Day)) + geom_line(aes(colour=Treatment, group=Treatment), size = 3) +
  geom_ribbon(alpha=.1, aes(ymin=lower_y, ymax=upper_y, group=Treatment, fill=Treatment),show.legend = FALSE) +
  ylab("Fluxes)") + xlab("Day") +
  viridis::scale_colour_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  viridis::scale_fill_viridis(name ="Treatment", discrete=T, end = 0.8,begin = 0.1, option = "magma") +
  theme(legend.position="top") + 
  theme_bw()+
  guides( fill = guide_legend(override.aes = list(size = 8), ncol = 6))

tot_fl_dynamics_macro



## Model 2: total fluxes, split by day

# We also examined variation in the estimated effects of the treatments
# and insecticide differed over the course of the experiment. 
# To do so, we fitted mixed models for each day. 


## split the data by day
dd3_bm <- tot.fluxes.macro %>% 
  dplyr::select(Day, total.fl_log, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>%  
  group_by(Day) %>% 
  nest()



ctrl <- lmeControl(opt='optim');
dd3_bm <- dd3_bm %>% filter(Day  > 0) %>%
  mutate(mod_per_day_bm_trend = map(data, ~ lme(total.fl_log ~ Recurrent.treatment + Long.treatment,
                                                random = ~ 1 | Mesocosm.No,
                                                control = ctrl,
                                                data=.,
                                                na.action=na.omit)))



dd3_bm <- dd3_bm[,1:3]

# extract model coefficients
fixed_per_day <-  plyr::ldply(map(dd3_bm$mod_per_day_bm_trend, ~ fixed.effects(.)))
confid_per_day <-  bind_rows(lapply(1:nrow(dd3_bm),
                                    function(x) tibble::rownames_to_column(
                                      as.data.frame(intervals(dd3_bm$mod_per_day_bm_trend[[x]], which="fixed")$fixed))))

confid_per_day_t <- confid_per_day %>% 
  mutate(day = rep(1:6, each=3)) %>%
  dplyr::select(rowname, lower, upper, day) %>%
  gather(var, value, -rowname, -day) %>% 
  mutate(rowname2 = paste0(rowname, "_", var),
         rowname3 = paste0(rowname, "_", var, "_", day)) %>%
  dplyr::select(day, rowname2, value) %>%
  spread(rowname2, value) 

dd3_bm <- cbind(dd3_bm, fixed_per_day, confid_per_day_t)
names(plot_dd3)



plot_dd3 <- dd3_bm[, c(-2,-3)]
gg_HW <-  ggplot(data=plot_dd3, aes(y=Recurrent.treatmentPresent, x=Day))  +
  geom_ribbon(aes(ymin = Recurrent.treatmentPresent_lower, ymax = Recurrent.treatmentPresent_upper), fill="lightgrey") +
  geom_line() + xlab("")+ geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 30, unit = "pt")) +
  theme_classic()+
  ylab("Recurrent\nmain effect")

gg_Warm <- ggplot(data=plot_dd3, aes(y= Long.treatmentPresent, x=Day)) +
  geom_ribbon(aes(ymin = Long.treatmentPresent_lower, ymax = `Long.treatmentPresent_upper`), fill="lightgrey") +
  geom_line()  + xlab("") + geom_abline(intercept=0, slope=0, linetype="dashed") +
  theme_classic()+
  ylab("Long\nmain effect")


tot_fl_dynamics_macro/(gg_HW + gg_Warm)







### Scaling and multifunctionality calculation ###
# We assess now the stability of multiple ecosystem functions. We merge the concept of 
# multidimensional stability with the one of  multifunctionality (i.e., we calculate several stability dimensions of multiple functions).
# We calculate multifunctionality for each stability dimension (resistance, recovery, resilience and temp. variability)
# following an averaging approach (Maestre et al 2012) [https://www.science.org/doi/full/10.1126/science.1215442]. 
# For each of the three functions (primary productivity, zooplankton biomass and macroinvertebrates biomass),
# and for each of the four stability dimensions, we calumniate Overall Functional stability .
# as the sum of the standardised stability components (resistance, recovery, resilience, temp.var)
# To standardize, we use the function "scale", which subtracts the mean and divides by the standard deviation.

### Phyto

fluxes_stab_phyto <- fluxes_stab_phyto %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience =scale(resilience),
         converted_temp_var = scale(temp.var))



### ZOo

fluxes_stab_zoo <- fluxes_stab_zoo %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience =scale(resilience),
         converted_temp_var = scale(temp.var))



### Macro

fluxes_stab_macro <- fluxes_stab_macro %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience = scale(resilience),
         converted_temp_var = scale(temp.var))

### Merge different stability df #

fluxes_stab_phyto$organism <- "phyto"
fluxes_stab_zoo$organism <- "zoo"
fluxes_stab_macro$organism <- "macro"

tot_stab_df <- full_join(fluxes_stab_phyto, fluxes_stab_zoo)
tot_stab_df <- full_join(tot_stab_df, fluxes_stab_macro)


tot_stab_df$Treatment <- factor(tot_stab_df$Treatment, levels = c("Control", "Long", "Recurrent"))






### Resistance
Y_min<-min(c(tot_stab_df$resistance),na.rm = T)-0.001
Y_max<-max(c(tot_stab_df$resistance),na.rm = T)+0.001


# Since resistence was calculated in relation to the control, we are going to exculde the controls,
# but we put a line with y = 0 which is the benchmark for control values


plot_resistance <-  ggplot(data = tot_stab_df,
                           mapping = aes(x = Treatment,
                                         y = resistance),
                           group=Treatment,
                           fill = Treatment) +
  ylab("Fluxes Resistance") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism), position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
   scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



### RESILIENCE ###


Y_min<-min(c(tot_stab_df$resilience),na.rm = T)-0.001
Y_max<-max(c(tot_stab_df$resilience),na.rm = T)+0.001
plot_resilience <- ggplot(data = tot_stab_df,
                          mapping = aes(x = Treatment,
                                        y = resilience),
                          group=Treatment,
                          fill = Treatment) +
  ylab("Fluxes Resilience") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism),position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

### RECOVERY ###

Y_min<-min(c(tot_stab_df$recovery),na.rm = T)-0.001
Y_max<-max(c(tot_stab_df$recovery),na.rm = T)+0.001

plot_recovery <- ggplot(data = tot_stab_df,
                        mapping = aes(x = Treatment,
                                      y = recovery),
                        group=Treatment,
                        fill = Treatment) +
  ylab("Fluxes Recovery") + 
  xlab("") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism),position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  geom_abline(intercept=0, slope=0, linetype="dashed")+ 
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                        option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



# temporal variability is calculated by hard coding the coefficient of variation
# |sd/abs(mean)| for each mesoMesocosm.No across all periods

Y_min<-min((tot_stab_df$temp.var),na.rm = T)-0.001
Y_max<-max((tot_stab_df$temp.var),na.rm = T)+0.001

plot_temporal_stability <- ggplot(data = tot_stab_df,
                                  mapping = aes(x = Treatment,
                                                y = temp.var),
                                  group=Treatment,
                                  fill = Treatment) +
  ylab("Temporal Stability log(mean/STD)") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(aes(shape = organism),position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))



plot1_tot_fluxes <- cowplot::plot_grid(plot_resistance, plot_recovery, plot_resilience, plot_temporal_stability,
                                nrow = 2, ncol = 2, label = c("a", "b", "c", "d"))

plot1_tot_fluxes

tot_fluxes_dynamics/(tot_fl_dynamics_phyto+tot_fl_dynamics_zoo+tot_fl_dynamics_macro)


##-- Resistenace--##
ctrl <- lmeControl(opt='optim', msMaxIter=1000, msVerbose = F);

mod.resis <- lme(resistance ~ Recurrent.treatment  + Long.treatment,
                 random = list(organism = ~ 1, Mesocosm.No = ~ 1),
                 weights = varIdent(form = ~ 1 | organism),
                 control = ctrl,
                 method = 'REML',
                 data= tot_stab_df,
                 na.action=na.omit)

## get summary table
summary.resis <- papeR::prettify(summary(mod.resis))
summary.resis$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.resis)[2] <- c("Estimate")
summary.resis

## Model validation:  
#Residuals

check_model(mod.resis)


## Estimates for the random effects:  


ranef(mod.resis)


#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$resistance <- as.numeric(predict(mod.resis))


ggplot() + geom_boxplot(data=df_new, aes(y=resistance, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=converted_resistance, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Resistance") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 
## Black boxplot are predicted, colored dots are measured


##-- Recovery--##
#hist(stab_df$resist) # assess normality (not run)

mod.recovery <- lme(recovery ~ Recurrent.treatment  + Long.treatment,
                    random = list(organism = ~ 1, Mesocosm.No = ~ 1),
                    weights = varIdent(form = ~ 1 | organism),
                    control = ctrl,
                    data= tot_stab_df,
                    na.action=na.omit)

summary.recovery <- papeR::prettify(summary(mod.recovery))
summary.recovery$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.recovery)[2] <- c("Estimate")
summary.recovery

## Model validation:  
#Residuals

check_model(mod.recovery)


## Estimates for the random effects:  


ranef(mod.recovery)


#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$recovery <- as.numeric(predict(mod.recovery))


ggplot() + geom_boxplot(data=df_new, aes(y=recovery, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=converted_recovery, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Recovery") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 



##-- Resilience--##
#hist(stab_df$resist) # assess normality (not run)

mod.resilience <- lme(resilience ~ Recurrent.treatment  + Long.treatment,
                      random = list(organism = ~ 1, Mesocosm.No = ~ 1),
                      weights = varIdent(form = ~ 1 | organism),
                      control = ctrl,
                      data= tot_stab_df,
                      na.action=na.omit)

summary.resilience <- papeR::prettify(summary(mod.resilience))
summary.resilience$` ` <- c("Intercept", "Recurrent",  "Long")
colnames(summary.resilience)[2] <- c("Estimate")
summary.resilience

## Model validation:  
#Residuals

check_model(mod.resilience)


## Estimates for the random effects:  


ranef(mod.resilience)


#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$resilience<- as.numeric(predict(mod.resilience))


ggplot() + geom_boxplot(data=df_new, aes(y=resilience, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=converted_resilience, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Resilience") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 


##-- Temporal Variability --##
#hist(stab_df$resist) # assess normality (not run)

mod.temp.var <- lme(temp_var ~ Recurrent.treatment  + Long.treatment,
                    random = list(organism = ~ 1, Mesocosm.No = ~ 1),
                    weights = varIdent(form = ~ 1 | organism),
                    control = ctrl,
                    data= tot_stab_df,
                    na.action=na.omit)

summary.temp.var <- papeR::prettify(summary(mod.temp.var))
summary.temp.var$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.temp.var)[2] <- c("Estimate")
summary.temp.var
## Model validation:  
#Residuals

check_model(mod.temp.var)


## Estimates for the random effects:  


ranef(mod.temp.var)

#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$temp.var<- as.numeric(predict(mod.temp.var))


ggplot() + geom_boxplot(data=df_new, aes(y=temp.var, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=converted_temp_var, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Temporal Variability") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 





##### Try threshold method

gen_log <- function(A=NULL, K=NULL, C = NULL, Q=NULL, v= NULL, B=NULL, x=NULL)
  A + (K - A) / (C + Q * exp(-B*x)) ^ 1/v 

A <- -1
K <- 1
B <- 5
v <- 1
C <- 1




Q_resist_phyto <- max(fluxes_stab_phyto$resistance)*0.5
Q_resilience_phyto <- max(fluxes_stab_phyto$resilience)*0.5
Q_recovery_phyto <- max(fluxes_stab_phyto$recovery)*0.5
Q_temp_var_phyto <- max(fluxes_stab_phyto$temp.var)*0.5


tot_stab_phyto <- fluxes_stab_phyto %>% mutate(
  q_resistance = gen_log(A=A, K=K, B=B, v=v, Q=Q_resist_phyto, C=C, x=scale(resistance)),
  q_recovery = gen_log(A=A, K=K, B=B, v=v, Q=Q_recovery_phyto, C=C, x=scale(recovery)),
  q_resilience = gen_log(A=A, K=K, B=B, v=v, Q=Q_resilience_phyto, C=C, x=scale(resilience)),
  q_temp.var = gen_log(A=A, K=K, B=B, v=v, Q=Q_temp_var_phyto, C=C, x=scale(temp.var)),
  oes_converted = q_resistance + q_recovery +q_resilience + q_temp.var)



### ZOo



Q_resist_zoo <- max(fluxes_stab_zoo$resistance)*0.5
Q_resilience_zoo <- max(fluxes_stab_zoo$resilience)*0.5
Q_recovery_zoo <- max(fluxes_stab_zoo$recovery)*0.5
Q_temp_var_zoo <- max(fluxes_stab_zoo$temp.var)*0.5


tot_stab_zoo <- fluxes_stab_zoo %>% mutate(
  q_resistance = gen_log(A=A, K=K, B=B, v=v, Q=Q_resist_zoo, C=C, x=scale(resistance)),
  q_recovery = gen_log(A=A, K=K, B=B, v=v, Q=Q_recovery_zoo, C=C, x=scale(recovery)),
  q_resilience = gen_log(A=A, K=K, B=B, v=v, Q=Q_resilience_zoo, C=C, x=scale(resilience)),
  q_temp.var = gen_log(A=A, K=K, B=B, v=v, Q=Q_temp_var_zoo, C=C, x=scale(temp.var)),
  oes_converted = q_resistance + q_recovery +q_resilience + q_temp.var)



### Macro

Q_resist_macro <- max(fluxes_stab_macro$resistance)*0.5
Q_resilience_macro <- max(fluxes_stab_macro$resilience)*0.5
Q_recovery_macro <- max(fluxes_stab_macro$recovery)*0.5
Q_temp_var_macro <- max(fluxes_stab_macro$temp.var)*0.5


tot_stab_macro <- fluxes_stab_macro %>% mutate(
  q_resistance = gen_log(A=A, K=K, B=B, v=v, Q=Q_resist_macro, C=C, x=scale(resistance)),
  q_recovery = gen_log(A=A, K=K, B=B, v=v, Q=Q_recovery_macro, C=C, x=scale(recovery)),
  q_resilience = gen_log(A=A, K=K, B=B, v=v, Q=Q_resilience_macro, C=C, x=scale(resilience)),
  q_temp.var = gen_log(A=A, K=K, B=B, v=v, Q=Q_temp_var_macro, C=C, x=scale(temp.var)),
  oes_converted = q_resistance + q_recovery +q_resilience + q_temp.var)

### Merge different stability df #

tot_stab_df <- full_join(tot_stab_phyto, tot_stab_zoo)
tot_stab_df <- full_join(tot_stab_df, tot_stab_macro)


## Plotting OFS

Y_min<-min((tot_stab_df$oes_converted),na.rm = T)-0.001
Y_max<-max((tot_stab_df$oes_converted),na.rm = T)+0.001

plot_OFS <- ggplot(data = tot_stab_df,
                   mapping = aes(x = Treatment,
                                 y = oes_converted),
                   group=Treatment,
                   fill = Treatment) +
  ylab("Overall Fluxes Stability") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(mapping = aes(fill = Treatment),
               alpha = 0.6) +
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

# LMM OFS
mod.OFS <- lme(oes_converted ~ Recurrent.treatment + Long.treatment,
               random = list(organism = ~ 1, Mesocosm.No = ~ 1),
               weights = varIdent(form = ~ 1 | organism),
               control = ctrl,
               method = 'REML',
               data= tot_stab_df,
               na.action=na.omit)



summary.OFS <- papeR::prettify(summary(mod.OFS))
summary.OFS$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.OFS)[2] <- c("Estimate")
summary.OFS
## Model validation:  
#Residuals

check_model(mod.OFS)


## Estimates for the random effects:  


ranef(mod.OFS)


#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$OFS<- as.numeric(predict(mod.OFS))


ggplot() + geom_boxplot(data=df_new, aes(y=OFS, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=oes_converted, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Overall Functional Stability") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 



### Averaging method 
### Phyto

fluxes_stab_phyto_scaled <- fluxes_stab_phyto %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience =scale(resilience),
         converted_temp_var = scale(temp.var))



### ZOo

fluxes_stab_zoo_scaled <- fluxes_stab_zoo %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience =scale(resilience),
         converted_temp_var = scale(temp.var))



### Macro

fluxes_stab_macro_scaled <- fluxes_stab_macro %>%  
  mutate(converted_resistance = scale(resistance),
         converted_recovery = scale(recovery),
         converted_resilience = scale(resilience),
         converted_temp_var = scale(temp.var))

### Merge different stability df #

tot_stab_df_scaled <- full_join(fluxes_stab_phyto_scaled, fluxes_stab_zoo_scaled)
tot_stab_df_scaled <- full_join(tot_stab_df_scaled, fluxes_stab_macro_scaled)

av <- tot_stab_df_scaled %>% mutate(av_OFS = converted_resistance + converted_recovery +
                               converted_resilience + converted_temp_var)




## Plotting OFS

Y_min<-min((av$av_OFS),na.rm = T)-0.001
Y_max<-max((av$av_OFS),na.rm = T)+0.001

plot_OFS <- ggplot(data = av,
                   mapping = aes(x = Treatment,
                                 y = av_OFS),
                   group=Treatment,
                   fill = Treatment) +
  ylab("Overall Fluxes Stability") + 
  xlab("Treatment") + 
  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom") + 
  geom_point(position = position_jitter(width = 0.1),
             size = 2,
             show.legend = FALSE) + 
  geom_boxplot(aes( fill = Treatment, color= Treatment),  alpha = 0.5, lwd  = 1)+ 
  scale_shape_manual(values = c(16,17),
                     guide=FALSE) +
  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_color_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F) + 
  scale_y_continuous(limits = c(Y_min,Y_max),
                     breaks = pretty_breaks(n = 7))

# LMM OFS
mod.OFS <- lme(av_OFS ~ Recurrent.treatment + Long.treatment,
               random = list(organism = ~ 1, Mesocosm.No = ~ 1),
               weights = varIdent(form = ~ 1 | organism),
               control = ctrl,
               method = 'REML',
               data= av,
               na.action=na.omit)



summary.OFS <- papeR::prettify(summary(mod.OFS))
summary.OFS$` ` <- c("Intercept", "Recurrent", "Long")
colnames(summary.OFS)[2] <- c("Estimate")
summary.OFS
## Model validation:  
#Residuals

check_model(mod.OFS)


## Estimates for the random effects:  


ranef(mod.OFS)




#### Visualise model predictions 

df_new <- expand.grid(tot_stab_df$Treatment)
df_new$Treatment <- tot_stab_df$Treatment
df_new$OFS<- as.numeric(predict(mod.OFS))


ggplot() + geom_boxplot(data=df_new, aes(y=OFS, x = Treatment)) +
  geom_point(data=tot_stab_df, aes(y=oes_converted, x = Treatment, colour=Treatment)) +
  theme_bw()+
  xlab("Treatment") + 
  ylab("Overall Functional Stability") +
  viridis::scale_colour_viridis(discrete=T, end = 0.8,begin = 0.1, option = "magma") 


write.csv(av, "F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Data/Total_Fluxes_Stability.csv", row.names = FALSE, quote = FALSE)



#### trying nice plot
mybox <- boxplot(av$av_OFS ~ av$Treatment)
mybox$stats
mydata2 <- as.data.frame(mybox$stats)
av$Treatment <- factor(av$Treatment)
names(mydata2) <- levels(av$Treatment)
rownames(mydata2) <- c("lower_whisker","q25","median","q75","upper_whisker")
mydata2 <- t(mydata2)
mydata2 <- as.data.frame(mydata2)
mydata2$Treatment <- as.factor(rownames(mydata2))
mydata2

## To get the outliers, you can do the following:
mybox$out; mybox$group

## This means, outlier 1 belongs to setosa, and outlier 3 to versicolor

myout <- data.frame(outlier= c(mybox$out,NA),Treatment=c("Control"))
myout

## Plot

g_flux <- ggplot() + geom_flat_violin(data=av,aes(x=Treatment,y=av_OFS,fill=Treatment),
                                 position=position_nudge(0.05),
                                 color="white",scale="count",trim=FALSE)   ## or TRUE

g_flux <- g_flux +  theme_classic() +
  theme(text = element_text(size = 16), 
        axis.text = element_text(colour = "black"),
        strip.background = element_blank(),
        legend.position = "bottom")  
g_flux <- g_flux + labs(x="",y="Overall Fluxes Stability")
g_flux <- g_flux + scale_y_dis(limits = c(Y_min,Y_max),
                            breaks = pretty_breaks(n = 7))

g_flux <- g_flux +  scale_fill_viridis_d(end = 0.8,begin = 0.1,
                       option = "magma",guide=F)


g_flux

## Add the boxplot to your existing flat violinplot:

## Box

g_flux <- g_flux + geom_rect(data = mydata2, stat = "identity",
                   aes(xmin = as.numeric(Treatment) - 0.25,
                       ymin = q25,
                       xmax = as.numeric(Treatment) - 0.05,
                       ymax = q75,
                       fill = Treatment),
                   color = "white")

g_flux

## Median

g_flux <- g_flux + geom_segment(data = mydata2, stat = "identity",
                      aes(x = as.numeric(Treatment) - 0.25,
                          y = median,
                          xend = as.numeric(Treatment) - 0.05,
                          yend = median),
                      color = "white",
                      size = 1)

g_flux

## Vertical segment
g_flux <- g_flux+ geom_segment(data = mydata2, stat = "identity",
                      aes(x = as.numeric(Treatment) - 0.05,
                          y = lower_whisker,
                          xend = as.numeric(Treatment) - 0.05,
                          yend = upper_whisker),
                      color = "black")

g_flux

## Bottom horizontal segment

g_flux <- g_flux + geom_segment(data = mydata2, stat = "identity",
                      aes(x = as.numeric(Treatment) - 0.1,
                          y = lower_whisker,
                          xend = as.numeric(Treatment) - 0.05,
                          yend = lower_whisker),
                      color = "black")

g_flux

## Top horizontal segment

g_flux <- g_flux + geom_segment(data = mydata2, stat = "identity",
                      aes(x = as.numeric(Treatment) - 0.1,
                          y = upper_whisker,
                          xend = as.numeric(Treatment) - 0.05,
                          yend = upper_whisker),
                      color = "black")

g_flux

## points

g_flux <- g_flux + geom_point(data = av,
                    mapping = aes(x = Treatment,
                                  y = av_OFS, shape = organism), position = position_jitter(width = 0.05),
                    size = 2,
                    show.legend = FALSE)
g_flux

NEW_fluxes_stability <- plot_resistance+plot_resilience+plot_recovery+plot_temporal_stability+plot_OFS
ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/NEW_fluxes_stability.pdf", NEW_fluxes_stability, pagecentre = F, 
       width=18, height=10, pointsize=8)

### Summary figures ###
x11()


summary.functional.stability <- g_func/plot1_tot_function
ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/Summary.functional.stability.pdf", summary.functional.stability, pagecentre = F, 
       width=15, height=18, pointsize=8)

summary.compo.stability <- g_compo/plot1_tot_compo
ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/Summary.compo.stability.pdf", summary.compo.stability, pagecentre = F, 
       width=15, height=18, pointsize=8)

summary.fluxes.stability <- g_flux/plot1_tot_fluxes
ggsave(file="F:/IMDEA/Mesocosm 2021/Heat Waves on Stability/Figures/Summary.fluxes.stability.pdf", summary.fluxes.stability, pagecentre = F, 
       width=15, height=18, pointsize=8)

tot.biomass


# dplyr::select control as reference 
control_bm <- tot.biomass %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_bm_control = mean(total.biomass, na.rm = T))
# dplyr::select all other treatments
bm_all_treat <- tot.biomass %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_bm = mean(total.biomass, na.rm = T))

tot.biomass <- merge(bm_all_treat, control_bm, by = "Day")
names(tot.biomass)

Biomass <- log(tot.biomass$mean_bm/tot.biomass$mean_bm_control)
Biomass <- as.data.frame(Biomass)
Biomass <- cbind(tot.biomass[,1:5], Biomass)



Bray_Curtis <- log(bc_plot$BC_meanC_all/bc_plot$mean_bm_control)
Bray_Curtis <- as.data.frame(Bray_Curtis)
total <- cbind(Biomass, Bray_Curtis)



tot.fluxes
names(tot.fluxes)
# dplyr::select control as reference 
control_fl <- tot.fluxes %>% 
  filter(Treatment == "Control") %>%
  group_by(Day) %>% 
  dplyr::summarize(mean_fl_control = mean(total.fluxes, na.rm = T))
# dplyr::select all other treatments
fl_all_treat <- tot.fluxes %>% 
  group_by(Day, Mesocosm.No, Treatment, Recurrent.treatment, Long.treatment) %>% 
  dplyr::summarize(mean_fl = mean(total.fluxes, na.rm = T))

tot.fluxes <- merge(fl_all_treat, control_fl, by = "Day")
names(tot.fluxes)

Fluxes <- log(tot.fluxes$mean_fl/tot.fluxes$mean_fl_control)
Fluxes <- as.data.frame(Fluxes)
total <- cbind(total, Fluxes)



### Overall func - biomass - averaging
p_func_flux<-ggplot(total,aes(x = Biomass, y = Fluxes, colour=Treatment))+
  geom_point( aes(color=Treatment)) +
  theme_bw()+theme(panel.grid = element_blank())+scale_color_viridis_d(option = "magma", end = 0.8, begin = 0.2)+
  #geom_smooth(se=FALSE, method="lm")+
  geom_smooth(color=1, se=TRUE, method="lm")+
  stat_cor(color=1,method = "spearman")+
  theme(axis.title.x = element_text(size=15, family ="sans"),
        axis.title.y = element_text(size=15, family ="sans"),
        axis.text.x = element_text(size=15, face = "bold"),
        axis.text.y = element_text(size=15, face = "bold"))+ylab("Functional")+xlab("Fluxes")+
  ggtitle("Overall Stability - Averaging")+theme(legend.position = "none")
p_func_flux


p_compo_flux<-ggplot(reduced,aes(x = Bray_Curtis, y = Fluxes, colour=Treatment))+
  geom_point( aes(color=Treatment)) +
  theme_bw()+theme(panel.grid = element_blank())+scale_color_viridis_d(option = "magma", end = 0.8, begin = 0.2)+
  #geom_smooth(se=FALSE, method="lm")+
  geom_smooth(color=1, se=TRUE, method="lm")+
  stat_cor(color=1,method = "spearman")+
  theme(axis.title.x = element_text(size=15, family ="sans"),
        axis.title.y = element_text(size=15, family ="sans"),
        axis.text.x = element_text(size=15, face = "bold"),
        axis.text.y = element_text(size=15, face = "bold"))+ylab("Bray_Curtis")+xlab("Fluxes")+
  ggtitle("Overall Stability - Averaging")+theme(legend.position = "none")
p_compo_flux

reduced <- total %>% filter(Day == 38)






biomass <- read_xlsx(paste0(DIR, "/Data/TrophicNetworkCosm2021_reduced.xlsx"), sheet = "biomass")
names(biomass)

df <- biomass %>% gather(species, biomass, -c(Day, Treatment, Mesocosm.No, Recurrent.treatment, Long.treatment, Phase))


### plotting using real abundances
df %>% filter(Day!="80") %>%  # Filter step here
  ggplot(aes(x = Treatment, y = log10(biomass+1)))+
  geom_bar(stat = "identity", position = "stack", aes(fill = species), width = 0.7)+
  scale_fill_viridis(discrete=T,  end = 1,begin = 0.1, option = "inferno") +
  theme_bw()+
  facet_wrap(~Day) +
  theme(plot.title=element_text( hjust=1, vjust=.02))


### plotting using % abundances
df %>% filter(Day!="42") %>%  # Filter step here
  ggplot(aes(x = Treatment, y = log10(abundance+1)))+
  geom_bar(stat = "identity", position = "fill", aes(fill = species), width = 0.7)+
  scale_fill_viridis(discrete=T) +
  theme_bw()+
  facet_wrap(~Day) +
  theme(plot.title=element_text( hjust=1, vjust=.02))
