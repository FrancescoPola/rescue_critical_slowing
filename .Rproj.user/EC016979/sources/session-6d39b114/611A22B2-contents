groups <- read_excel("data/DataMesocosms2021.xlsx", 
                     sheet = "Phytoplankton counting")

groups <- groups[-c(1:5), c(2,4)]
names(groups)
groups <- groups %>% rename(group = "...2",
                            species = "UNIT cell/mL")



dd_abu <- read_excel("data/abundance_cosm.xlsx")

dd_abu1 <- merge(dd_abu, groups, by = "")
str(dd_abu)


tot.abu <- dd_abu[, c(1:6)]
tot.abu<-as.data.frame(tot.abu) 
tot.abu$total.abu<- rowSums(dd_abu[, c(7:97)])
unique(tot.abu$Day)
### Log10 abundance
tot.abu$tot.abu_log <- log10(tot.abu$total.abu+1)


# Function to calculate standard error
se <- function(x) sqrt(var(x, na.rm = TRUE) / length(na.omit(x)))

# Calculate mean abundance and standard error for Control
control_mean <- tot.abu %>% filter(Treatment == "Control") %>%
  group_by(Day) %>%
  summarize(control_mean_abu = mean(tot.abu_log, na.rm = TRUE))

# Calculate differences from Control for each treatment
tot.abu_diff <- tot.abu %>%
  left_join(control_mean, by = "Day") %>%
  mutate(diff_abu = tot.abu_log - control_mean_abu)

# Summarize the data for plotting
tot_abu_dynamics <- tot.abu_diff %>%
  group_by(Treatment, Day) %>%
  summarize(mean_diff_abu = mean(diff_abu, na.rm = TRUE), se = se(diff_abu)) %>%
  mutate(lower_y = mean_diff_abu - se, upper_y = mean_diff_abu + se)

# Determine the y-axis limits to ensure alignment of zero line
y_limits <- range(tot_abu_dynamics$mean_diff_abu + tot_abu_dynamics$se, 
                  tot_abu_dynamics$mean_diff_abu - tot_abu_dynamics$se)

# Filter out the control treatment for the plot
tot_abu_dynamics_filtered <- tot_abu_dynamics %>% filter(Treatment == "HW/C0")
data_phyto_plot <- tot_abu_dynamics_filtered %>% filter(Day <= 38)
# Plot the data with faceting and aligned y-axis
abu_plot <- ggplot(data_phyto_plot, aes(x = Day, y = mean_diff_abu, color = Treatment, fill = Treatment)) +
  geom_line(aes(group = Treatment), size = 1) +
  geom_ribbon(aes(ymin = lower_y, ymax = upper_y, group = Treatment), alpha = 0.1, show.legend = FALSE) +
  ylab("Phytoplankton \nDifference in abumass (ind/mesocosm)") +
  xlab("Day") +
  viridis::scale_colour_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
  viridis::scale_fill_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
  scale_x_continuous(limits = c(-5, 40)) +
  theme(legend.position = "top") +
  theme_bw() +
  guides(fill = guide_legend(override.aes = list(size = 8), ncol = 6)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  facet_wrap(~ Treatment, scales = "fixed") + 
  coord_cartesian(ylim = y_limits)  # Set the y-axis limits to align the zero line

abu_plot


abumass_plot <- ggplot(data_phyto_plot, aes(x = Day, y = mean_diff_abu, color = Treatment, fill = Treatment)) +
  geom_line(aes(group = Treatment), size = 1) +
  geom_point()+
  geom_ribbon(aes(ymin = lower_y, ymax = upper_y, group = Treatment), alpha = 0.1, show.legend = FALSE) +
  ylab("Phytoplankton \nDifference in abumass (g/mesocosm)") +
  xlab("Day") +
  viridis::scale_colour_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
  viridis::scale_fill_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
  scale_x_continuous(limits = c(-5, 40)) +
  theme(legend.position = "top") +
  theme_bw() +
  guides(fill = guide_legend(override.aes = list(size = 8), ncol = 6)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  coord_cartesian(ylim = y_limits) +  # Set the y-axis limits to align the zero line
  annotate("rect", xmin = 0, xmax = 6, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  annotate("rect", xmin = 14, xmax = 20, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  annotate("rect", xmin = 28, xmax = 34, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red")+
  theme(legend.position = "none")



library(lme4)
library(lmerTest)
install.packages("performance")
library(performance)




model_abu <- lmer(tot.abu_log ~ Treatment * Day + (1 | Sample), data = tot.abu)
summary(model_abu)


# Model diagnostics
check_model(model_abu)

# Specify the days you are interested in for post-hoc comparisons
days_of_interest <- unique(tot.abu$Day)  # You can also specify specific days manually, e.g., c(1, 5, 10, 15)

# Perform post-hoc analysis with specified days
emm_abu <- emmeans(model_abu, ~ Treatment | Day, at = list(Day = days_of_interest))
post_hoc_results_abu <- pairs(emm_abu)


# Visualization (optional)
emmip(model_abu, Treatment ~ Day, at = list(Day = days_of_interest), CIs = TRUE)


# Convert post_hoc_results to a data frame
post_hoc_df_abu <- as.data.frame(post_hoc_results_abu)

# Print the results using kable
kable(post_hoc_df_abu, format = "markdown")




library(dplyr)
library(tidyr)

# Transform dd_abu into a long format
dd_abu_long <- dd_abu %>%
  pivot_longer(
    cols = -c(Sample, Treatment, Day, Heat.treatment, Warm.treatment, Ins.treatment),
    names_to = "species",
    values_to = "abundance"
  )

# Merge with groups by species names
merged_data <- dd_abu_long %>%
  left_join(groups, by = "species")

# Calculate the abundance by group for each day/treatment/sample
group_abundance <- merged_data %>%
  group_by(Sample, Treatment, Day, Heat.treatment, Warm.treatment, Ins.treatment, group) %>%
  summarise(total_abundance = sum(abundance, na.rm = TRUE), .groups = "drop")



# Calculate relative abundance
group_abundance <- group_abundance %>%
  group_by(Sample, Treatment, Day, Heat.treatment, Warm.treatment, Ins.treatment) %>%
  mutate(total = sum(total_abundance),
         relative_abundance = total_abundance / total * 100) %>%
  ungroup()
group_abundance <- group_abundance %>% filter(Treatment != "E/C0")
# Create the bar plot
p <- ggplot(group_abundance, aes(x = Treatment, y = relative_abundance, fill = group)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~ Day) +
  labs(x = "Treatment", y = "Relative Abundance (%)", title = "Relative Abundance by Treatment and Day") +
  theme_minimal(base_size = 20) +
  theme(
    panel.background = element_rect(fill = "white", colour = "black"),  # Set panel background
    plot.title = element_text(hjust = 0.5, margin = margin(b = 20), size = 20, face = "bold"),  # Set plot title text size and make it bold
    axis.text = element_text(size = 20),  # Set axis text size
    axis.title = element_text(size = 20),  # Set axis title text size
    plot.tag = element_text(size = 20)  # Set tag size
  )

# Display the plot
print(p)

library(readxl)
library(tidyverse)

# load group data
groups <- read_excel("data/DataMesocosms2021.xlsx", 
                     sheet = "Phytoplankton counting")

groups <- groups[-c(1:5), c(2,4)]
names(groups)
groups <- groups %>% rename(group = "...2",
                            species = "UNIT cell/mL")


# Load the data
bio <- read_excel("data/biomass_cosm.xlsx")

# Reshape the data to long format
bio_long <- bio %>%
  pivot_longer(
    cols = -c(Sample, Treatment, Day),
    names_to = "species",
    values_to = "biomass"
  )

# Merge with groups by species names
merged_data <- bio_long %>%
  left_join(groups, by = "species")

# Calculate the total biomass by group for each sample/treatment/day
group_bio <- merged_data %>%
  group_by(Treatment, Day, group) %>%
  summarise(total_biomass = sum(biomass, na.rm = TRUE), .groups = "drop")

# Calculate relative abundance
group_bio <- group_bio %>%
  group_by( Treatment, Day) %>%
  mutate(total = sum(total_biomass)) %>%
  mutate(relative_bio = total_biomass / total * 100) %>%
  ungroup() %>%
  filter(Treatment != "E/C0",
         Day <= 38)


library(RColorBrewer)
# Create the bar plot using a ColorBrewer palette
p <- ggplot(group_bio, aes(x = Treatment, y = relative_bio, fill = group)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~ Day, ncol = 5) +
  labs(x = "Treatment", y = "Relative Abundance (%)", title = "Relative Abundance by Treatment and Day") +
  theme_minimal(base_size = 20) +
  theme(
    panel.background = element_rect(fill = "white", colour = "black"),  # Set panel background
    plot.title = element_text(hjust = 0.5, margin = margin(b = 20), size = 20, face = "bold"),  # Set plot title text size and make it bold
    axis.text = element_text(size = 20),  # Set axis text size
    axis.title = element_text(size = 20),  # Set axis title text size
    plot.tag = element_text(size = 20)  # Set tag size
  ) +
  scale_fill_brewer(palette = "Set1")  # Apply a ColorBrewer palette

# Display the plot
print(p)






merged_data <- merged_data[, -4]%>%
  filter(Day <= 38) %>% 
  group_by(Sample,  Treatment, Day, group) %>%
  summarise(total_biomass = sum(biomass, na.rm = TRUE))

merged_data 


wide_data <- merged_data %>%
  pivot_wider(
    names_from = group,
    values_from = total_biomass)  # Fill missing values with 0
  


group_bio_wide <- as.data.frame(wide_data)
group_bio_wide <- group_bio_wide %>% filter(Treatment %in% c("HW/C0", "Control"),
                              Day <= 38)


days_FR <- unique(group_bio_wide$Day)



# Include running index "m", set it to 1 

m <- 1



for (j in 1:length(days_FR)){  ## inner loop for days
  
  # Extract data for one single day
  
  mysite <- group_bio_wide %>% 
    filter( Day == days_FR[j])
  
  # Add row names to the data frame, useful later for the Bray-Curtis calculation
  
  rownames(mysite) <- paste(mysite$Treatment, mysite$Sample, mysite$Day, sep = "_")
  
  # Extract controls 
  
  control_cosm <- mysite %>% 
    filter(Treatment == "Control")
  
  # Calculate average community composition (average abundance of each group/column)
  # Important: only columns with species are included 
  # ref.comm.all => includes all species
  
  
  ref.comm.all <- control_cosm[,c(4:12)] %>% summarise_each(funs( mean( .,na.rm = TRUE)))
  rownames(ref.comm.all) <- "REF.COMM.ALL"
  
  
  # Add the reference community to your site
  
  z.all <- rbind(mysite[,c(4:12)], ref.comm.all)
  
  # Calculate Bray-Curtis Dissimilarity using the function vegdist
  
  # Matrix of all Bray-Curtis Dissimilarities
  
  calc.BC.all <- as.matrix(vegdist(z.all, method = "bray", binary = F, na.rm = T))
  
  # Extract just the last column containing the pairwise comparison of each plot 
  # to the average control community composition
  
  BC.mean.C.all <- calc.BC.all[1:8,"REF.COMM.ALL"]
  
  
  # Add the BCs to the mysite dataset
  
  mysite$BC_meanC_all <- BC.mean.C.all
  
  
  # This is optional: add the names from the BC vectors to mysite 
  # to be sure you extracted the correct comparions of single communities to REF.COMM.
  
  mysite$community_all <- names(BC.mean.C.all)
  
  
  if (m == 1){
    df.sites <- mysite
  }
  
  if (m > 1){
    df.sites <- rbind(df.sites,mysite)
  }
  
  # Increase m (the running index) by 1
  
  m <- m + 1
}

df.sites_phyto <-  df.sites 

names(df.sites_phyto)
Bray_Curtis_distances_phyto <- df.sites_phyto[,c(1:3,13:14)]



# Function to calculate standard error
se <- function(x) sqrt(var(x, na.rm = TRUE) / length(na.omit(x)))

# Calculate mean abundance and standard error for Control
control_mean_bray <- Bray_Curtis_distances_phyto %>% filter(Treatment == "Control") %>%
  group_by(Day) %>%
  summarize(control_mean_bray = mean(BC_meanC_all, na.rm = TRUE))

# Calculate differences from Control for each treatment
tot.bray_diff <- Bray_Curtis_distances_phyto %>%
  left_join(control_mean_bray, by = "Day") %>%
  mutate(diff_bray = BC_meanC_all - control_mean_bray)

# Summarize the data for plotting
tot_bray_dynamics <- tot.bray_diff %>%
  group_by(Treatment, Day) %>%
  summarize(mean_diff_bray = mean(diff_bray, na.rm = TRUE), se = se(diff_bray)) %>%
  mutate(lower_y = mean_diff_bray - se, upper_y = mean_diff_bray + se)


tot_bray_dynamics <- tot_bray_dynamics %>% mutate(mean_diff_bray = (mean_diff_bray* -1),
                                                  lower_y = (lower_y * -1),
                                                  upper_y = (upper_y * -1))

# Determine the y-axis limits to ensure alignment of zero line
y_limits <- range(tot_bray_dynamics$mean_diff_bray + tot_bray_dynamics$se, 
                  tot_bray_dynamics$mean_diff_bray - tot_bray_dynamics$se)

# Filter out the control treatment for the plot
# tot_bray_dynamics_filtered <- tot_bray_dynamics %>% filter(Treatment == "HW/C0")
# data_bray <- tot_bray_dynamics_filtered %>% filter(Day <= 38)

bray_plot <- ggplot(tot_bray_dynamics, aes(x = Day, y = mean_diff_bray, color = Treatment, fill = Treatment)) +
  geom_line(aes(group = Treatment), size = 1) +
  geom_point()+
  geom_ribbon(aes(ymin = lower_y, ymax = upper_y, group = Treatment), alpha = 0.1, show.legend = FALSE) +
  ylab("Phytoplankton \nDifference in Bray - Curtis dissimilarity") +
  xlab("Day") +
  viridis::scale_colour_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
  viridis::scale_fill_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
  scale_x_continuous(limits = c(-5, 40)) +
  theme(legend.position = "top") +
  theme_bw() +
  guides(fill = guide_legend(override.aes = list(size = 8), ncol = 6)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  coord_cartesian(ylim = y_limits) +  # Set the y-axis limits to align the zero line
  annotate("rect", xmin = 0, xmax = 6, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  annotate("rect", xmin = 14, xmax = 20, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  annotate("rect", xmin = 28, xmax = 34, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  theme(legend.position = "none")




group_bio_wide <- group_bio_wide[,-c(1)]

species_data <- group_bio_wide[, -(1:2)]  # Assuming the first two columns are Day and Treatment
bray_curtis_dist <- vegdist(species_data, method = "bray")

# Function to calculate NMDS and prepare data for plotting
prepare_nmds_data <- function(day_data) {
  species_data <- day_data[, -(1:2)]  # Assuming the first two columns are Day and Treatment
  bray_curtis_dist <- vegdist(species_data, method = "bray")
  nmds_result <- metaMDS(bray_curtis_dist, k = 2, trymax = 100)
  ordination_df <- as.data.frame(nmds_result$points)
  ordination_df$Treatment <- day_data$Treatment
  return(ordination_df)
}

# List to store ordination data frames for each day
ordination_list <- lapply(unique(group_bio_wide$Day), function(day) {
  day_data <- group_bio_wide %>% filter(Day == day)
  ordination_df <- prepare_nmds_data(day_data)
  ordination_df$Day <- day
  return(ordination_df)
})

# Combine all ordination data frames into one
combined_ordination_df <- do.call(rbind, ordination_list)



# Define the layout for 3 rows and 5 columns
num_rows <- 3
num_cols <- 5

# Plot with polygons for each treatment
ggplot(combined_ordination_df, aes(x = MDS1, y = MDS2, fill = Treatment, group = interaction(Treatment, Day))) +
  geom_polygon(alpha = 0.5, color = "black") +
  geom_point(size = 3, aes(color = Treatment)) +
  labs(x = "NMDS Axis 1", y = "NMDS Axis 2", color = "Treatment", fill = "Treatment") +
  theme_bw() +
  ggtitle("Compositional Change of Phytoplankton Community Over Time") +
  facet_wrap(~ Day, nrow = num_rows, ncol = num_cols, scales = "free")







# PERMANOVA per day
day_results <- lapply(unique(group_bio_wide$Day), function(day) {
  subset_data <- group_bio_wide %>% filter(Day == day)
  species_data <- subset_data[, 4:ncol(subset_data)]  # Extract species abundance columns
  bray_curtis_dist <- vegdist(species_data, method = "bray", binary = FALSE, na.rm = TRUE)  # Calculate Bray-Curtis dissimilarity
  adonis_result <- adonis2(bray_curtis_dist ~ Treatment, data = subset_data, permutations = 999)
  result <- list(Day = day, PERMANOVA_result = adonis_result)
  print(result)
  return(result)
})

# # Convert the list of results into a data frame
# day_results_df <- do.call(rbind, day_results)
# 
# # Add the "Day" column as row names
# rownames(day_results_df) <- day_results_df$Day
# 
# # Remove the "Day" column
# day_results_df <- day_results_df[, -1]
# 
# # Limit the number of decimals
# day_results_df$p_value <- format(day_results_df$p_value, digits = 3)
# 
# # Add a column indicating the day
# day_results_df$Day <- rownames(day_results_df)
# 
# # Print the results as a nice table using pander
# pander(day_results_df, caption = "PERMANOVA Results by Day")


# Calculate PERMANOVA for each day
day_results <- lapply(unique(dd_bray$Day), function(day) {
  subset_data <- dd_bray %>% filter(Day == day)
  species_data <- subset_data[, 4:ncol(subset_data)]  # Extract species abundance columns
  bray_curtis_dist <- vegdist(species_data, method = "bray", binary = FALSE, na.rm = TRUE)  # Calculate Bray-Curtis dissimilarity
  adonis_result <- adonis2(bray_curtis_dist ~ Treatment, data = subset_data, permutations = 999)
  result <- list(Day = day, PERMANOVA_result = adonis_result)
  return(result)
})

day_results





groups <- read_excel("data/DataMesocosms2021.xlsx", 
                     sheet = "Phytoplankton counting")

groups <- groups[-c(1:5), c(2,4)]
names(groups)
groups <- groups %>% rename(group = "...2",
                            species = "UNIT cell/mL")


# Load the data
bio <- read_excel("data/biomass_cosm.xlsx")
unique(bio$Day)
str()

# Add new day group column
data <- bio %>%
  mutate(day_group = case_when(
    Day %in% c(1, 2) ~ "1-2",
    Day %in% c(15, 16) ~ "15-16",
    Day %in% c(29, 30) ~ "29-30",
    TRUE ~ as.character(Day)  # Keep other days as is
  ))

# Calculate mean ox by Treatment, Cosm, and day group
result <- data %>%
  filter(day_group %in% c("1-2", "15-16", "29-30")) %>%
  group_by(Treatment, Sample, day_group) %>%
  summarise(mean_ox = mean(ox, na.rm = TRUE), .groups = 'drop')

day_group_mapping <- c("1-2" = 2, "15-16" = 15, "29-30" = 30)

# Replace day_group values based on the mapping
result <- result %>%
  mutate(day_group = day_group_mapping[day_group]) %>% 
  rename(ox = mean_ox,
         Day = day_group)


# Display the result
print(result)



# Reshape the data to long format
bio_long <- bio %>%
  pivot_longer(
    cols = -c(Sample, Treatment, Day),
    names_to = "species",
    values_to = "biomass"
  )

# Merge with groups by species names
merged_data <- bio_long %>%
  left_join(groups, by = "species")

# Calculate the total biomass by group for each sample/treatment/day
group_bio <- merged_data %>%
  group_by(Sample, Treatment, Day, group) %>%
  summarise(total_biomass = sum(biomass, na.rm = TRUE), .groups = "drop")



# Add new day group column
data <- group_bio %>%
  mutate(day_group = case_when(
    Day %in% c(1, 2) ~ "1-2",
    Day %in% c(15, 16) ~ "15-16",
    Day %in% c(29, 30) ~ "29-30",
    TRUE ~ as.character(Day)  # Keep other days as is
  ))

# Calculate mean ox by Treatment, Cosm, and day group
result <- data %>%
  filter(day_group %in% c("1-2", "15-16", "29-30")) %>%
  group_by(Treatment,  day_group, group) %>%
  summarise(mean_total_biomass = mean(total_biomass, na.rm = TRUE), .groups = 'drop')

day_group_mapping <- c("1-2" = 2, "15-16" = 15, "29-30" = 30)

# Replace day_group values based on the mapping
result <- result %>%
  mutate(day_group = day_group_mapping[day_group]) %>% 
  rename(total_biomass = mean_total_biomass,
         Day = day_group)

unique(group_bio$Treatment)

group_bio <- group_bio %>% filter(Day <= 38) 
group_bio <- group_bio %>%
  mutate(Treatment = ifelse(Treatment == "HW/C0", "HW", Treatment))


unique(group_bio$Day)
group_bio <- group_bio %>%
  filter(!Day %in% c(1, 16, 29))
group_bio <- group_bio[,-c(5:6)]
# Calculate relative abundance
group_bio <- group_bio %>%
  group_by( Treatment, Day) %>%
  mutate(total = sum(total_biomass)) %>%
  mutate(relative_bio = total_biomass / total * 100) %>%
  ungroup() %>%
  
  
  group_bio <- group_bio %>% filter(Treatment != "E/C0")


dd <- read_excel("data/DataMesocosms2021.xlsx", 
                 sheet = "Metabolism Morning")


unique(dd$Day)
dd_add <- read_excel("data/Additional_metabolism_phyto.xlsx")

unique(dd_add$Day)
# get only ox and rename

ox_add <- dd_add[, c(1:4,8)]
ox_add <- ox_add %>% rename(ox = "DO (mg/L)" )
unique(ox_add$Day)

# Add new day group column
data <- ox_add %>%
  mutate(day_group = case_when(
    Day %in% c(1, 2) ~ "1-2",
    Day %in% c(15, 16) ~ "15-16",
    Day %in% c(29, 30) ~ "29-30",
    TRUE ~ as.character(Day)  # Keep other days as is
  ))

# Calculate mean ox by Treatment, Cosm, and day group
result <- data %>%
  filter(day_group %in% c("1-2", "15-16", "29-30")) %>%
  group_by(Treatment, Cosm, day_group) %>%
  summarise(mean_ox = mean(ox, na.rm = TRUE), .groups = 'drop')

day_group_mapping <- c("1-2" = 2, "15-16" = 15, "29-30" = 30)

# Replace day_group values based on the mapping
result <- result %>%
  mutate(day_group = day_group_mapping[day_group]) %>% 
  rename(ox = mean_ox,
         Day = day_group)


# Display the result
print(result)




str(day_results)
day = 10

day_results <- lapply(unique(group_bio_wide$Day), function(day) {
  subset_data <- group_bio_wide %>% filter(Day == day)
  species_data <- subset_data[, 4:ncol(subset_data)]  # Extract species abundance columns
  bray_curtis_dist <- vegdist(species_data, method = "bray", binary = FALSE, na.rm = TRUE)  # Calculate Bray-Curtis dissimilarity
  adonis_result <- adonis(bray_curtis_dist ~ Treatment, data = subset_data, permutations = 999)
  result <- list(Day = day, PERMANOVA_result = adonis_result)
  print(result)
  return(result)
})

# Extract and organize the results
day_results_df <- lapply(day_results, function(res) {
  aov_tab <- res$PERMANOVA_result$aov.tab
  if (!is.null(aov_tab) && nrow(aov_tab) > 0) {
    data.frame(
      Day = res$Day,
      R2 = aov_tab$R2[1],
      p_value = aov_tab$`Pr(>F)`[1]
    )
  } else {
    data.frame(
      Day = res$Day,
      R2 = NA,
      p_value = NA
    )
  }
}) %>%
  bind_rows() %>%
  arrange(Day)


# Step 2: Create and display the interactive table using DT
library(DT)
library(dplyr)

datatable(day_results_df, 
          options = list(pageLength = 10, 
                         autoWidth = TRUE, 
                         columnDefs = list(list(width = '20%', targets = "_all"))),
          caption = 'Table: PERMANOVA results by Day')



ox <- read.csv("data/oxygen.csv")

# Summarize the specified groups of days
summarized_ox <- ox %>%
  filter(Day %in% c(1, 2, 3, 15, 16, 17, 29, 30, 31)) %>%
  mutate(Day = case_when(
    Day %in% c(1, 2, 3) ~ 3,
    Day %in% c(15, 16, 17) ~ 15,
    Day %in% c(29, 30, 31) ~ 30
  )) %>%
  group_by(Day, Treatment, Cosm) %>%
  summarize(ox = mean(ox, na.rm = TRUE), .groups = 'drop')

# Combine the summarized data with the rest of the data, keeping all other days
ox_combined <- ox %>%
  filter(!Day %in% c(1, 2, 3, 15, 16, 17, 29, 30, 31)) %>%
  bind_rows(summarized_ox) %>%
  arrange(Day, Treatment, Cosm)


unique(ox_combined$Day)
#ox <- ox %>% filter(Day %in% c(-4, 3, 10, 17, 24, 31, 38))

model_ox <- lmer(log10(ox) ~ Treatment * Day + (1 | Cosm), data = ox_combined)
summary(model_ox)
check_model(model_ox)



# Calculate mean abundance and standard error for Control
control_mean <- ox_combined %>% filter(Treatment == "Control") %>%
  group_by(Day) %>%
  summarize(control_mean_ox = mean(ox, na.rm = TRUE))

# Calculate differences from Control for each treatment
tot.ox_diff <- ox_combined %>%
  left_join(control_mean, by = "Day") %>%
  mutate(diff_ox = ox - control_mean_ox)

# Summarize the data for plotting
tot_ox_dynamics <- tot.ox_diff %>%
  group_by(Treatment, Day) %>%
  summarize(mean_diff_ox = mean(diff_ox, na.rm = TRUE), se = se(diff_ox)) %>%
  mutate(lower_y = mean_diff_ox - se, upper_y = mean_diff_ox + se)

# Determine the y-axis limits to ensure alignment of zero line
y_limits <- range(tot_ox_dynamics$mean_diff_ox + tot_ox_dynamics$se, 
                  tot_ox_dynamics$mean_diff_ox - tot_ox_dynamics$se)

# Filter out the control treatment for the plot
tot_ox_dynamics_filtered <- tot_ox_dynamics %>% filter(Treatment == "HW")


# Plot the data with faceting and aligned y-axis
ox_plot <- ggplot(tot_ox_dynamics_filtered, aes(x = Day, y = mean_diff_ox, color = Treatment, fill = Treatment)) +
  geom_line(aes(group = Treatment), size = 1) +
  geom_ribbon(aes(ymin = lower_y, ymax = upper_y, group = Treatment), alpha = 0.1, show.legend = FALSE) +
  ylab("Dissolved oxigen \nDifference in mg/L") +
  xlab("Day") +
  viridis::scale_colour_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
  viridis::scale_fill_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
  scale_x_continuous(limits = c(-5, 40)) +
  theme(legend.position = "top") +
  theme_bw() +
  guides(fill = guide_legend(override.aes = list(size = 8), ncol = 6)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  coord_cartesian(ylim = y_limits) + 
  annotate("rect", xmin = 0, xmax = 6, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  annotate("rect", xmin = 14, xmax = 20, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  annotate("rect", xmin = 28, xmax = 34, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  theme(legend.position = "none")





chla <- read.csv("data/chla.csv")
# Summarize the specified groups of days
summarized_chla <- chla %>%
  filter(Day %in% c(1, 2, 3, 15, 16, 17, 29, 30, 31)) %>%
  mutate(Day = case_when(
    Day %in% c(1, 2, 3) ~ 3,
    Day %in% c(15, 16, 17) ~ 15,
    Day %in% c(29, 30, 31) ~ 30
  )) %>%
  group_by(Day, Treatment, Cosm) %>%
  summarize(chla = mean(chla, na.rm = TRUE), .groups = 'drop')

# Combine the summarized data with the rest of the data, keeping all other days
chla_combined <- chla %>%
  filter(!Day %in% c(1, 2, 3, 15, 16, 17, 29, 30, 31)) %>%
  bind_rows(summarized_chla) %>%
  arrange(Day, Treatment, Cosm)


unique(chla_combined$Day)

model_chla <- lmer( log10(chla) ~ Treatment * Day + (1 | Cosm), data = chla_combined)
summary(model_chla)
check_model(model_chla)




# Calculate mean abundance and standard error for Control
control_mean <- chla_combined %>% filter(Treatment == "Control") %>%
  group_by(Day) %>%
  summarize(control_mean_chla = mean(chla, na.rm = TRUE))

# Calculate differences from Control for each treatment
tot.chla_diff <- chla_combined %>%
  left_join(control_mean, by = "Day") %>%
  mutate(diff_chla = chla - control_mean_chla)

# Summarize the data for plotting
tot_chla_dynamics <- tot.chla_diff %>%
  group_by(Treatment, Day) %>%
  summarize(mean_diff_chla = mean(diff_chla, na.rm = TRUE), se = se(diff_chla)) %>%
  mutate(lower_y = mean_diff_chla - se, upper_y = mean_diff_chla + se)

# Determine the y-axis limits to ensure alignment of zero line
y_limits <- range(tot_chla_dynamics$mean_diff_chla + tot_chla_dynamics$se, 
                  tot_chla_dynamics$mean_diff_chla - tot_chla_dynamics$se)

# Filter out the control treatment for the plot
tot_chla_dynamics_filtered <- tot_chla_dynamics %>% filter(Treatment == "HW")

# Plot the data with faceting and aligned y-axis
chla_plot <- ggplot(tot_chla_dynamics_filtered, aes(x = Day, y = mean_diff_chla, color = Treatment, fill = Treatment)) +
  geom_line(aes(group = Treatment), size = 1) +
  geom_ribbon(aes(ymin = lower_y, ymax = upper_y, group = Treatment), alpha = 0.1, show.legend = FALSE) +
  ylab("Chlorophyll-a \nDifference in µg/L") +
  xlab("Day") +
  viridis::scale_colour_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
  viridis::scale_fill_viridis(name = "Treatment", discrete = TRUE, end = 0.8, begin = 0.1, option = "inferno") +
  scale_x_continuous(limits = c(-5, 40)) +
  theme(legend.position = "top") +
  theme_bw() +
  guides(fill = guide_legend(override.aes = list(size = 8), ncol = 6)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  coord_cartesian(ylim = y_limits) +
  annotate("rect", xmin = 0, xmax = 6, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  annotate("rect", xmin = 14, xmax = 20, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  annotate("rect", xmin = 28, xmax = 34, ymin = -Inf, ymax = Inf, alpha = 0.1, fill = "red") +
  theme(legend.position = "none")






grouping_sp_groups <- read_excel("data/grouping_sp_groups.xlsx")
bio_dd <- read_excel("data/biomass_cosm.xlsx")
unique(bio_dd$Day)



# Convert bio_dd to long format
bio_dd_long <- bio_dd %>%
  pivot_longer(cols = -c(Sample, Treatment, Day), 
               names_to = "species", 
               values_to = "total_biomass")

# Merge bio_dd_long with grouping_sp_groups to assign each species to a group
bio_dd_grouped <- bio_dd_long %>%
  left_join(grouping_sp_groups, by = c("species" = "species"))

# Sum the values for each group
bio_dd_summarized <- bio_dd_grouped %>%
  group_by(Sample, Treatment, Day, Group) %>%
  summarise(total_biomass = sum(total_biomass, na.rm = TRUE), .groups = 'drop')

# Convert back to wide format if needed
bio_dd_wide <- bio_dd_summarized %>%
  pivot_wider(names_from = Group, values_from = total_biomass)

# View the final data frame


bio_dd_summarized <- bio_dd_summarized %>% filter( Day <= 38)
unique(bio_dd_wide$Day)
bio_dd_wide <- bio_dd_wide %>% filter(Treatment == c("Control", "HW/C0" ))
bio_dd <- bio_dd_wide %>%
  pivot_longer(cols = -c(Sample, Treatment, Day), 
               names_to = "Group", 
               values_to = "total_biomass")
bio_dd_summarized <- bio_dd_summarized%>% filter(Treatment == c("Control", "HW/C0" ))

# Summarize the specified groups of days
summarized_bio <- bio_dd %>%
  filter(Day %in% c(1, 2, 15, 16,  29, 30)) %>%
  mutate(Day = case_when(
    Day %in% c(1, 2) ~ 3,
    Day %in% c(15, 16) ~ 15,
    Day %in% c(29, 30) ~ 30
  )) %>%
  group_by(Day, Treatment, Sample) %>%
  summarize(total_biomass = mean(total_biomass, na.rm = TRUE), .groups = 'drop')

# Combine the summarized data with the rest of the data, keeping all other days
bio_combined <- bio_dd %>%
  filter(!Day %in% c(1, 2, 15, 16, 29, 30)) %>%
  bind_rows(summarized_bio) %>%
  arrange(Day, Treatment, Sample)




bio_dd_wide <- bio_dd_wide %>%
  filter(Day %in% c(-4, 2,10, 15, 24, 30, 38))


group_bio2 <- bio_dd_wide %>%
  mutate(Day = case_when(
    Day == 2~ 3,
    TRUE ~ Day
  ))



group_bio_try <- group_bio %>%
  mutate(Day = case_when(
    Day == 2~ 3,
    TRUE ~ Day
  ))

group_bio2_long <- group_bio2 %>%
  pivot_longer(cols = -c(Sample, Treatment, Day), 
               names_to = "Group", 
               values_to = "total_biomass")

# View the result


try <-  read_excel("data/biomass_collapse_cosm.xlsx")
names(try)
try <- try[, -c(4,5,6, 15)]
try <- as.data.frame(try)
try2 <- try %>% 
  pivot_longer(cols = -c(Day, Mesocosm.No, Treatment), 
               names_to = "species", 
               values_to = "total_biomass")

try2 <- try2 %>% filter(Day <= 38,
                        Treatment != "Long")
# Calculate relative abundance
group_bio2 <- try2 %>%
  group_by(Day, Treatment) %>%
  mutate(total = sum(total_biomass)) %>%
  mutate(relative_bio = total_biomass / total * 100) %>%
  ungroup() 

group_bio2 <- group_bio2 %>% filter(Day <= 38)
# Create the bar plot using a ColorBrewer palette
p <- ggplot(group_bio2, aes(x = Treatment, y = relative_bio, fill = species)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~ Day) +
  labs(x = "Treatment", y = "Relative Biomass (%)") +
  theme_minimal(base_size = 20) +
  theme(
    panel.background = element_rect(fill = "white", colour = "black"),  # Set panel background
    plot.title = element_text(hjust = 0.5, margin = margin(b = 20), size = 20, face = "bold"),  # Set plot title text size and make it bold
    axis.text = element_text(size = 30),  # Set axis text size
    axis.title = element_text(size = 30),  # Set axis title text size
    plot.tag = element_text(size = 30)  # Set tag size
  ) +
  scale_fill_brewer(palette = "Set1")  # Apply a ColorBrewer palette

# Display the plot
print(p)




wide_data <- try2 %>%
  pivot_wider(
    names_from = species,
    values_from = total_biomass)  # Fill missing values with 0



group_bio_wide <- as.data.frame(wide_data)


set.seed(258)
# PERMANOVA per day
day_results <- lapply(unique(group_bio_wide$Day), function(day) {
  subset_data <- group_bio_wide %>% filter(Day == day)
  species_data <- subset_data[, 4:ncol(subset_data)]  # Extract species abundance columns
  bray_curtis_dist <- vegdist(species_data, method = "bray", binary = FALSE, na.rm = TRUE)  # Calculate Bray-Curtis dissimilarity
  adonis_result <- adonis2(bray_curtis_dist ~ Treatment, data = subset_data, permutations = 999)
  result <- list(Day = day, PERMANOVA_result = adonis_result)
  print(result)
  return(result)
})


model_chla <- lmer(log(chla) ~ Treatment * Day + (1 | Cosm), data = chla)
summary(model_chla)


Ambient

# Convert datetime columns to POSIXct if they are not already
Ambient$`Date Time, GMT +0200` <- ymd_hms(Ambient$`Date Time, GMT +0200`)
HW$`Date Time` <- ymd_hms(HW$`Date Time`)

# Add a treatment column to each dataset
Ambient <- Ambient %>%
  rename(DateTime = `Date Time, GMT +0200`, Temp = `Temp, °C`, Intensity = `Intensity,  lux`) %>%
  mutate(Treatment = "Ambient")

HW <- HW %>%
  rename(DateTime = `Date Time`, Temp = `Temp, °C`, Intensity = `Intensity,  lux`) %>%
  mutate(Treatment = "HW")

# Combine the datasets
combined_data <- bind_rows(Ambient, HW)

# Check the resulting data frame
head(combined_data)

filtered_combined_data <- combined_data %>%
  filter(DateTime <= as.POSIXct("2021-06-15 23:59:59"))


# Plot temperature over time
temperature_plot <- ggplot(hobo, aes(x = DateTime, y = Temp, color = Treatment)) +
  geom_line(size = 1) +
  labs(title = "",
       x = "Date",
       y = "Temperature (°C)",
       color = "Treatment") +
  theme_minimal(base_size = 20) +
  theme(
    panel.grid.major = element_line(color = "gray", linetype = "dashed"),
    panel.grid.minor = element_blank(),
    plot.title = element_text(hjust = 0.5, size = 24, face = "bold"),
    axis.title.x = element_text(size = 22, face = "bold"),
    axis.title.y = element_text(size = 22, face = "bold"),
    axis.text = element_text(size = 20),
    legend.position = "top",
    legend.title = element_text(size = 20, face = "bold"),
    legend.text = element_text(size = 18)
  ) +
  scale_color_viridis_d(option = "C", end = 0.8)  # Using viridis color palette

# Print the plot
print(temperature_plot)
