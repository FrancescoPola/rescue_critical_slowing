# Ensure Treatment is a factor
dd_zoo_long$Treatment <- as.factor(dd_zoo_long$Treatment)
dd_zoo_long$Day <- factor(dd_zoo_long$Day, levels = c(-4, 10, 24,  38))  # Specify custom order

unique(dd_zoo_long$taxa)
# Create zooplankton groups
# Create the new column "group" based on "taxa"
dd_zoo_long <- dd_zoo_long %>%
  mutate(group = case_when(
    taxa %in% c("Simocephalus", "Chydorus", "Daphnia.longispina", "Alona", "Alonella", "Ceriodaphnia") ~ "Cladocerans",
    taxa %in% c("Cyclopoida", "Calanoida", "Nauplii") ~ "Copepods",
    taxa %in% c("Keratella.quadrata", "Lecanidae", "Mytilina", "Lepadella", "Testudinella", "Euchlanis", "Polyarthra", "Brachionus",
    "Squatinella", "Ascomorpha", "Trichocerca", "Cephalodella") ~ "Rotifers",
    taxa == "Ostracoda" ~ "Ostracoda"
  ))

dd_zoo_long <- dd_zoo_long %>%
  mutate(group = case_when(
    group == "Rotifers" ~ "Ostracoda",
    group == "Ostracoda" ~ "Rotifers",
    TRUE ~ group  # Leave other values unchanged
  ))


# Calculate relative abundance
dd_zoo_long_per <- dd_zoo_long[,-c(4,6,7)] %>%
  group_by( Treatment, Day, group) %>%
  summarize(total_group = sum(biomass)) %>%
  mutate(total_bio = sum(total_group)) %>% 
  mutate(relative_bio = total_group / total_bio * 100) 

# Step 2: Build the plot
p_zoo<- ggplot(dd_zoo_long_per, aes(x = Treatment, y = relative_bio, fill = group)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(x = "", y = "Relative Biomass (%)") +
  scale_fill_brewer(palette = "Set1") +  # Apply a ColorBrewer palette
  theme_bw(base_size = 20) +
  theme(
    panel.background = element_rect(fill = "white", colour = "black"),
    plot.title = element_text(hjust = 0.5, margin = margin(b = 20), size = 20, face = "bold"),
    axis.text = element_text(size = 30),
    axis.title = element_text(size = 30),
    legend.text = element_text(size = 30),
    legend.title = element_text(size = 30),
    legend.key.size = unit(1.5, "lines"),
    legend.position = "bottom",
    legend.justification = "center",
    legend.direction = "horizontal",
    legend.box = "vertical",
    axis.text.x = element_text(hjust = 1),
    strip.text = element_text(size = 30)
  ) +
  
  # Use facet_wrap2 from ggh4x to apply custom strip colors and order by Day_plot (ordered factor)
  facet_wrap2(
    ~ Day,   # Use Day_plot to control the order
    scales = "free_x")
# Display the plot
print(p_zoo)




  
  
  
Clad <- dd_zoo_long[,-c(6,7)] %>%
  filter(group == "Cladocerans") %>% 
  group_by( Treatment, Day, group, taxa) %>%
  summarize(total_group = sum(biomass)) %>%
  mutate(total_bio = sum(total_group)) %>% 
  mutate(relative_bio = total_group / total_bio * 100) 


ggplot(Clad, aes(x = Treatment, y = relative_bio, fill = taxa)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(x = "", y = "Relative Biomass (%)") +
  scale_fill_brewer(palette = "Set1") +  # Apply a ColorBrewer palette
  theme_bw(base_size = 20) +
  theme(
    panel.background = element_rect(fill = "white", colour = "black"),
    plot.title = element_text(hjust = 0.5, margin = margin(b = 20), size = 20, face = "bold"),
    axis.text = element_text(size = 30),
    axis.title = element_text(size = 30),
    legend.text = element_text(size = 30),
    legend.title = element_text(size = 30),
    legend.key.size = unit(1.5, "lines"),
    legend.position = "bottom",
    legend.justification = "center",
    legend.direction = "horizontal",
    legend.box = "vertical",
    axis.text.x = element_text(hjust = 1),
    strip.text = element_text(size = 30)
  ) +
  
  # Use facet_wrap2 from ggh4x to apply custom strip colors and order by Day_plot (ordered factor)
  facet_wrap2(
    ~ Day,   # Use Day_plot to control the order
    scales = "free_x")








# Function to calculate oxygen solubility in mg/L at a given temperature (T in °C)
oxygen_solubility <- function(T) {
  14.652 - 0.41022 * T + 0.007991 * T^2 - 0.000077774 * T^3
}

# Input variables
original_temperature <- 20  # Original temperature in °C
new_temperature <- original_temperature + 8  # New temperature (e.g., 8°C higher)
original_oxygen_concentration <- 8  # Oxygen concentration (mg/L) at original temperature

# Calculate oxygen solubility at both temperatures
solubility_original <- oxygen_solubility(original_temperature)
solubility_new <- oxygen_solubility(new_temperature)

# Adjust the oxygen concentration for the new temperature
adjusted_oxygen_concentration <- (solubility_new / solubility_original) * original_oxygen_concentration

# Output the adjusted oxygen concentration
adjusted_oxygen_concentration